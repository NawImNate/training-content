{
  "articles": [
    {
      "title": "ICS welcomes SpinSpire as technology sponsor",
      "nid": 171,
      "alias": "/article/ics-welcomes-spinspire-technology-sponsor",
      "slug": "ics-welcomes-spinspire-technology-sponsor",
      "body": "<p>In the year 2010, a company was born when a volunteer decided to build a better website for a non-profit organization. One could debate if that website made a real difference in the profile of the non-profit, or set it off on a trajectory of growth and excellence. But one thing is clear, it definitely did set that volunteer on a trajectory of personal and professional growth and that company on a trajectory of business excellence.</p>\n\n<p><em>That volunteer was me, that company was <a href=\"https://spinspire.com/\">SpinSpire</a>, and that non-profit organization was <a href=\"https://jaxics.org/\">JAXICS</a> (Indian Cultural Society of Jacksonville). That website caught the attention of SpinSpire's first (would-be) client (a very large heath insurance company based in Jacksonville), followed by many more. It gave me the experience and the confidence to build bigger &amp; better solutions for SpinSpire's clients.</em></p>\n\n<p>That beginning is the reason why SpinSpire and its people take giving back to the community very seriously. It is not just one of the things we do. It is the reason why we exist.</p>\n\n<p>That website for JAXICS was built almost a decade back, and it went through multiple improvement attempts in the meanwhile. Finally, in 2019, JAXICS once again came back to SpinSpire and asked us to build a new version of their website, with even better features than before. We of course were more than happy to do it. They asked for a quote, but we didn't want to do it for money, so we sponsored it instead.</p>\n\n<p>SpinSpire is very proud to build, host, and sponsor JAXICS's website, with many advanced features:</p>\n\n<ul>\n\t<li>Mobile first and responsive for smartphones and other devices.</li>\n\t<li>Fully managed hosting and support</li>\n\t<li>Self-service membership management (creation &amp; renewal) for members and site admins</li>\n\t<li>Payment acceptance and processing for anyone</li>\n\t<li>Self-service events, media, and content management for site admins</li>\n\t<li>Self-service RSVP for anyone and backend management for site admins</li>\n\t<li>Self-service performance entries for members and non-members, and backend management for site admins</li>\n\t<li>Sponsor and advertiser management</li>\n\t<li>Integration with MailChimp for email list management</li>\n\t<li>And much, much more ...</li>\n</ul>\n\n<p>We hope this will start a new chapter in the success of JAXICS and our community in Jacksonville, Florida.</p>\n",
      "changed": "2019-09-20T03:04:11+00:00",
      "created": "2019-09-15T18:43:18+00:00",
      "summary": "<p>In the year 2010, a company was born when a volunteer decided to build a better website for a non-profit organization. One could debate if that website made a real difference in the profile of the non-profit, or set it off on a trajectory of growth and excellence. But one thing is clear, it definitely did set that volunteer on a trajectory of personal and professional growth and that company on a trajectory of business excellence.</p>\n\n<p><em>That volunteer was me, that company was <a href=\"https://spinspire.com/\">SpinSpire</a>, and that non-profit organization was <a href=\"https://jaxics.org/\">JAXICS</a> (Indian Cultural Society of Jacksonville). That website caught the attention of SpinSpire's first (would-be) client (a very large heath insurance company based in Jacksonville), followed by many more. It gave me the experience and the confidence to build bigger &amp; better solutions for SpinSpire's clients.</em></p>\n\n<p>That beginning is the reason why SpinSpire and its people take giving back to the community very seriously. It is not just one of the things we do. It is the reason why we exist.</p>\n\n<p>That website for JAXICS was built almost a decade back, and it went through multiple improvement attempts in the meanwhile. Finally, in 2019, JAXICS once again came back to SpinSpire and asked us to build a new version of their website, with even better features than before. We of course were more than happy to do it. They asked for a quote, but we didn't want to do it for money, so we sponsored it instead.</p>\n\n<p>SpinSpire is very proud to build, host, and sponsor JAXICS's website, with many advanced features:</p>\n\n<ul>\n\t<li>Mobile first and responsive for smartphones and other devices.</li>\n\t<li>Fully managed hosting and support</li>\n\t<li>Self-service membership management (creation &amp; renewal) for members and site admins</li>\n\t<li>Payment acceptance and processing for anyone</li>\n\t<li>Self-service events, media, and content management for site admins</li>\n\t<li>Self-service RSVP for anyone and backend management for site admins</li>\n\t<li>Self-service performance entries for members and non-members, and backend management for site admins</li>\n\t<li>Sponsor and advertiser management</li>\n\t<li>Integration with MailChimp for email list management</li>\n\t<li>And much, much more ...</li>\n</ul>\n\n<p>We hope this will start a new chapter in the success of JAXICS and our community in Jacksonville, Florida.</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "e5824ef1-ab00-460a-9df2-fc4272e3aee6",
          "alt": "Priya & Jitesh at World of Nations 2014",
          "title": "Priya & Jitesh at World of Nations 2014",
          "url": "/sites/default/files/2019-09/World%20Of%20Nations%202014%20-%20Jitesh%20%26%20Priya_0_0.jpg",
          "fid": 409
        },
        {
          "id": "62bd39a1-ceed-408e-ae10-b8669329191c",
          "alt": "SpinSpire team (image 1)",
          "title": "SpinSpire team (image 1)",
          "url": "/sites/default/files/2019-09/SpinSpire-team-1.JPG",
          "fid": 406
        },
        {
          "id": "190a8a36-a364-4470-85f0-7b69bc072190",
          "alt": "Priya & Jitesh at ICS Independence Day",
          "title": "Priya & Jitesh at ICS Independence Day",
          "url": "/sites/default/files/2019-09/Priya%20%26%20Jitesh%20at%20ICS%20Independence%20Day.jpg",
          "fid": 408
        },
        {
          "id": "ee11e7c0-814a-47a8-b0fe-d7a65f05bcab",
          "alt": "SpinSpire team (image 2)",
          "title": "SpinSpire team (image 2)",
          "url": "/sites/default/files/2019-09/SpinSpire-team-2.JPG",
          "fid": 407
        },
        {
          "id": "43cb4e47-c244-4051-a1a4-d7592994252c",
          "alt": "JAXICS banner",
          "title": "JAXICS banner",
          "url": "/sites/default/files/2019-09/jaxics-banner.png",
          "fid": 400
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Creating a React Application with Headless Drupal 8",
      "nid": 147,
      "alias": "/article/creating-react-application-headless-drupal-8",
      "slug": "creating-react-application-headless-drupal-8",
      "body": "<h3 dir=\"ltr\">Overview:</h3>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Setting up Drupal to enable RESTful Services</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Implementing React with Drupal</p>\n\n\t<ul>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">Get a list of articles</p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">Add a new article</p>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>For this tutorial I will go over how to setup a Drupal 8 site with RESTful services as well as setting up a simple React application which will retrieve a list of Articles and allow for the creation of articles for logged in users with the proper credentials.</p>\n\n<p>Before working with React we will need to configure Drupal to provide us with some RESTful services.</p>\n\n<p dir=\"ltr\">The first step you will need to take is downloading and enabling the following modules: RESTful Web Services (rest), Serialization (serialization), and REST UI (restui) (https://www.drupal.org/project/restui). The Serialization module is required for RESTful  Web Services and the REST UI only provides a nice interface from which you can configure what pieces of content will be available via REST requests and which formats they are available.</p>\n\n<p dir=\"ltr\">Next head over to /admin/config/services/rest and select the actions you want to have available. In this tutorial I only want the Content or node/{node} resource enabled by both GET and POST requests. On the next page set the ‘Accepted request formats’ to JSON and the ‘Authentication providers’ to cookie. The ‘Authentication providers’ selection is required and at the moment we only have cookie available.</p>\n\n<p dir=\"ltr\">To be able to get all nodes on the front page, make a new display for the Frontpage view. The type of display should be REST export. In the Serialization settings set the Accepted request format to json. Give this new display a path of /node/rest</p>\n\n<p>Let’s test out our GET service using curl before we move any further.</p>\n\n<pre>\n<code class=\"language-bash\">curl http://localhost/node/1?_format=json</code></pre>\n\n<p dir=\"ltr\">This should return a JSON result of the node with the nid 1.<br />\nBefore making a POST request, we will need to create a JSON file with some data to create a new node and obtain a X-CSRF-Token. To obtain the Drupal provided cookie, open up Chrome Dev Tools, select the Network tab, pick one of the loaded resources, select the Headers tab, and copy the cookie value under the Request Headers. Make a file called node.json and add the following JSON to the file.</p>\n\n<pre>\n<code class=\"language-json\">{\"type\":[{\"target_id\":\"article\",\"target_type\":\"node_type\"}],\"title\":[{\"value\":\"Test Node     1\"}],\"body\":[{\"value\":\"Test Line 1\\nTest Line 2.\\n\\n\"}]}</code></pre>\n\n<p dir=\"ltr\">For the X-CSRF-Token simply navigate to /rest/session/token and copy and save the string on that page. Now create your POST request as such:</p>\n\n<pre>\n<code class=\"language-bash\">curl -v -X POST -H 'X-CSRF-Token: &lt;token&gt;' -H 'Content-Type: application/json' -H ‘Cookie: &lt;cookie&gt;’ --data @/tmp/node.json  http://localhost/entity/node?_format=json</code></pre>\n\n<p dir=\"ltr\">Note that the path <u>/entity/node is used for 8.2.x</u>. For 8.3.x /node can be used.</p>\n\n<p dir=\"ltr\">Now let’s get to the fun stuff!<br />\nOn your server navigate to sites/&lt;site name&gt;/files and create a file called headless.html. Here is some boilerplate code to get us started.</p>\n\n<pre>\n<code class=\"language-xml\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;head&gt;\n   &lt;meta charset=\"UTF-8\" /&gt;\n   &lt;title&gt;Hello Drupal!&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n   &lt;div id=\"root\"&gt;\n       &lt;h1&gt;Hello Headless Drupal!&lt;/h1&gt;\n   &lt;/div&gt;\n &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p dir=\"ltr\">Navigate to<a href=\"http://localhost/sites/default/files/headless.html\"> http://localhost/sites/default/files/headless.html</a> and you should be greeted with a “Hello Headless Drupal!” message.<br />\nNow  include React, React-DOM, and Babel from a CDN in the head.</p>\n\n<pre>\n<code class=\"language-xml\">&lt;script src=\"https://unpkg.com/react@latest/dist/react.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/react-dom@latest/dist/react-dom.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>And inside of a script tag with type=”text/babel”, we can add some basic React to make sure everything is in working order.</p>\n\n<pre>\n<code class=\"language-javascript\">&lt;script type=”text/babel”\n   ReactDOM.render(\n   &lt;h1&gt;Hello Drupal from React!&lt;/h1&gt;,\n   document.getElementById('root')\n   );\n&lt;/script&gt;</code></pre>\n\n<p dir=\"ltr\">Now you should see the message “Hello Drupal from React!”</p>\n\n<p>To start making calls to Drupal’s RESTful services we will need to include a HTTP client. I am using axios in this tutorial. Include the below script in the head of your HTML.</p>\n\n<pre>\n<code class=\"language-xml\">&lt;script src=\"https://unpkg.com/axios/dist/axios.min.js\"&gt;&lt;/script&gt;</code></pre>\n\n<p>Above the Hello Drupal from React message, add the following lines to perform an axios get request for the X-CSRF-Token. This code will confirm that axios is working properly and can be commented out until it is need later.</p>\n\n<pre>\n<code class=\"language-javascript\">axios.get('/rest/session/token')\n     .then(function (response){\n       console.log(response);\n       const csrf_token = response.data;\n     })\n     .catch(function (error){\n       console.log(error);\n     });</code></pre>\n\n<p dir=\"ltr\">With all this working we can get started with building the React components.</p>\n\n<p dir=\"ltr\">We begin with an App component which will be the starting point for the entire application.</p>\n\n<p dir=\"ltr\">This will initialize the state with an empty array of nodes. We then populate the array in the componentWillMount() lifecycle method by making a get request for the nodes provided by the view at /node/rest created earlier.</p>\n\n<p dir=\"ltr\">In the render function we’re going to call the NodeList component which simply maps out each of the Nodes provided from App’s state.</p>\n\n<pre>\n<code class=\"language-javascript\">//App Component\nclass App extends React.Component{\n       constructor(props){\n         super(props);\n         this.state = {\n           nodes: []\n         }\n       }\n       componentWillMount(){\n         let self = this; //Once inside the axios request, this will not be the same this.\n         axios.get('/node/rest?_format=json')\n         .then(function (response){\n           let nodes = response.data;\n           self.setState({\n             nodes: nodes\n           })\n         })\n         .catch(function(error){\n           console.log(error);\n         })\n       }\n       render (){\n         return (\n           &lt;div&gt;\n       \t&lt;NodeList nodes={this.state.nodes} /&gt;\n           &lt;/div&gt;\n         )\n       }\n     }\n</code></pre>\n\n<p dir=\"ltr\">A simple NodeList component to map out each of the Nodes.</p>\n\n<pre>\n<code class=\"language-javascript\"> // Node List Component\n     let NodeList = ({ nodes }) =&gt; {\n       return (\n         &lt;div&gt;\n           {nodes.map(n =&gt;\n             &lt;Node node={n} key={Math.random()}/&gt;\n           )}\n         &lt;/div&gt;\n       )\n     }\n</code></pre>\n\n<p>The Node component is used as an instance of a node, which is being used above.</p>\n\n<pre>\n<code class=\"language-javascript\">// Node Component\n     let Node = ({ node }) =&gt;{\n       return (\n         &lt;div&gt;\n           &lt;h4&gt;&lt;a href={\"/node/\" + node.nid[0].value}&gt;{node.title[0].value}&lt;/a&gt;&lt;/h4&gt;\n           &lt;div&gt;{node.body[0].value}&lt;/div&gt;\n         &lt;/div&gt;\n       )\n     }</code></pre>\n\n<p>At the bottom of the file remember to render out the App component.</p>\n\n<pre>\n<code class=\"language-javascript\">ReactDOM.render(\n       &lt;App /&gt;,\n       document.getElementById('root')\n     );</code></pre>\n\n<p>Now you should be able to visit<a href=\"http://localhost/sites/default/files/headless.html\"> http://localhost/sites/default/files/headless.html</a> and you will see a list of node content. All that’s left now is to create a form component which will allow us to create a new Article node.</p>\n\n<pre>\n<code class=\"language-javascript\">// Form Component\n     class NewNodeForm extends React.Component{\n       constructor(props){\n         super(props);\n         this.state = {\n           title: '',\n           body: '',\n           csrfToken: ''\n         }\n         //Binds the handler functions for the change of the title,body, and submit handler.\n         this.handleSubmit = this.handleSubmit.bind(this);\n         this.handleTitleChange = this.handleTitleChange.bind(this);\n         this.handleBodyChange = this.handleBodyChange.bind(this);\n       }\n//When the NewFormNode mounts to the DOM, make a request for the CSRF Token and saves the token to the Form’s state\n       componentWillMount(){\n         let self= this;          \n         axios.get('/rest/session/token')\n         .then(function (response){\n           const csrf_token = response.data;\n           self.setState({'csrfToken': csrf_token});\n         })\n         .catch(function (error){\n           console.log(error);\n         });\n       }\n       render(){\n         return(\n           &lt;form onSubmit={this.handleSubmit}&gt;\n             &lt;div&gt;\n               &lt;label htmlFor=\"title\"&gt;Title: &lt;/label&gt;\n               &lt;input name=\"title\" onChange={this.handleTitleChange} /&gt;\n             &lt;/div&gt;\n             &lt;div&gt;\n               &lt;label htmlFor=\"body\"&gt;Body: &lt;/label&gt;\n               &lt;textarea name=\"body\" onChange={this.handleBodyChange} /&gt;\n             &lt;/div&gt;\n               &lt;button&gt; Submit &lt;/button&gt;\n           &lt;/form&gt;\n         )\n       }\n// update the state’s title property with the new text of the title\n       handleTitleChange(e) {\n         this.setState({title:e.target.value});\n       }\n// update the state’s body property with the new text of the body\n       handleBodyChange(e) {\n         this.setState({body:e.target.value});\n       }\n       handleSubmit(e) {\n         e.preventDefault(); // to prevent the refresh of the page.\n         let self = this.state;\n        // create the object of the data. At the moment this is hard coded to make a content type of article\n         let node = {\n           \"type\":[{\"target_id\":\"article\",\"target_type\":\"node_type\"}],\n           \"title\":[{\"value\": self.title}],\n           \"body\":[{\"value\": self.body}]\n         }\n        // setting up the headers with the csrfToken in the state.\n         let config = {\n           headers: {'X-CSRF-Token': self.csrfToken}\n         }\n         axios.post('/entity/node?_format=json',node,config)\n         .then(function(success){\n           console.log(success);\n         })\n         .catch(function(error){\n           console.log(error)\n         });\n       }\n     }\n</code></pre>\n\n<p dir=\"ltr\">There you have it! A simple approach to decoupling Drupal with React.</p>\n\n<p>The full code for this tutorial is available <a href=\"https://bitbucket.org/troy_kearney/headless-drupal-with-react\">here</a></p>\n",
      "changed": "2019-03-11T19:16:07+00:00",
      "created": "2017-03-28T19:43:40+00:00",
      "summary": "For this tutorial I will go over how to setup a Drupal 8 site with RESTful services as well as setting up a simple React application which will retrieve a list of Articles and allow for the creation of articles for logged in users with the proper credentials.\r\nBefore working with React we will need to configure Drupal to provide us with some RESTful services.",
      "field_tags": [
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "13f72094-1461-430d-a915-5b8d2362e2ba",
          "tid": 95,
          "name": "react",
          "alias": "/term/react"
        },
        {
          "id": "e03e2095-b9e9-4a87-ab5e-e7b979d7f6a5",
          "tid": 47,
          "name": "javascript",
          "alias": "/term/javascript"
        }
      ],
      "field_image": [],
      "uid": {
        "id": "afd53424-4dd4-4b18-bd3a-c2332d3d27bc",
        "display_name": "Troy Kearney"
      }
    },
    {
      "title": "Presentation: Rich Web Applications with ReactJS and Drupal 8",
      "nid": 150,
      "alias": "/article/presentation-rich-web-applications-reactjs-and-drupal-8",
      "slug": "presentation-rich-web-applications-reactjs-and-drupal-8",
      "body": "<p>I gave a presentation on how to use Drupal 8 with ReactJS at <a href=\"https://www.drupalgovcon.org/program/sessions/rich-web-applications-reactjs-and-drupal-8\">Drupal GovCon in Washington, DC</a>.</p>\n\n<p>The slides can be found <a href=\"https://docs.google.com/presentation/d/1-XsgAjBjDs-ITNMBXVt23wzU6ByN68IbpVUAahFwjEs/edit?usp=sharing\">HERE</a>.</p>\n\n<p>Source code for the demo project can be found <a href=\"https://bitbucket.org/spinspire/d8-react/\">HERE</a>!</p>\n",
      "changed": "2017-08-03T13:38:15+00:00",
      "created": "2017-06-10T20:13:16+00:00",
      "summary": "<p>I gave a presentation on how to use Drupal 8 with ReactJS at <a href=\"https://www.drupalgovcon.org/program/sessions/rich-web-applications-reactjs-and-drupal-8\">Drupal GovCon in Washington, DC</a>.</p>\n\n<p>The slides can be found <a href=\"https://docs.google.com/presentation/d/1-XsgAjBjDs-ITNMBXVt23wzU6ByN68IbpVUAahFwjEs/edit?usp=sharing\">HERE</a>.</p>\n\n<p>Source code for the demo project can be found <a href=\"https://bitbucket.org/spinspire/d8-react/\">HERE</a>!</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "e64af43a-45e0-40c5-9ba0-fc702a4383ae",
          "alt": "ReactJS logo with Drupal 8 logo",
          "title": "ReactJS logo with Drupal 8 logo",
          "url": "/sites/default/files/2017-06/react-d8.png",
          "fid": 267
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Creating an Express.js Environment with Webpack, React, and Babel Configurations",
      "nid": 148,
      "alias": "/article/creating-expressjs-environment-webpack-react-and-babel-configurations",
      "slug": "creating-expressjs-environment-webpack-react-and-babel-configurations",
      "body": "<h3>Overview</h3>\n\n<ul>\n\t<li><a href=\"#introduction\">Introduction</a></li>\n\t<li><a href=\"#prerequisites\">Prerequisites</a></li>\n\t<li><a href=\"#setexpress\">Setting up Express</a></li>\n\t<li><a href=\"#addbabel\">Adding Babel to the mix</a></li>\n\t<li><a href=\"#addwebpack\">Adding Webpack configurations</a></li>\n\t<li><a href=\"#react\">Bringing in React</a></li>\n</ul>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"#react\">There are a two main different ways one could set up an environment for a React project; using </a><a href=\"https://facebook.github.io/react/docs/installation.html\">create-react-app</a> (which takes care of just about everything for you), or creating your own Express.js file server with your own Webpack and Babel configurations. The former is great for when one is just beginning to learn and play with React, but there’s going to be a point where you need to make some changes to a webpack.config.js file and it’s going to seem foreign and scary. But really it isn’t and it gets easier.</p>\n\n<p>The other minor issue I have with create-react-app and similar tools is that there is a lot of \"black magic\" going on, and I would like to know at least the basics of what’s going on under the hood.</p>\n\n<p>Today I’m going to walk through creating a very basic file server using Express.js with some Webpack and Babel configurations and implement a very basic React application to get you started.</p>\n\n<h3 id=\"prerequisites\">Prerequisites</h3>\n\n<ul>\n\t<li>Node js and npm (https://nodejs.org/en/)</li>\n\t<li>A basic understanding of Javascript</li>\n</ul>\n\n<h3 id=\"setexpress\">Setting up Express</h3>\n\n<p>From the terminal of your choosing make a new directory and change to that directory</p>\n\n<pre>\n<code class=\"language-bash\">mkdir simple-server\ncd simple-server</code></pre>\n\n<p>From that directory run</p>\n\n<pre>\n<code class=\"language-bash\">npm init</code></pre>\n\n<p>To initialize npm in this directory and you can use the defaults for all of the options that come up. This will create and populate a package.json with the default values.</p>\n\n<p>Now it’s time to add some initial packages.</p>\n\n<pre>\n<code class=\"language-bash\">npm install path express --save</code></pre>\n\n<p>This is bringing in the express and the path package.</p>\n\n<p>Express works with Node.js to bring Javascript to the backend. Express is a Node.js framework that brings an additional layer of structure and function to build a full site. For this project, Express will be used for listening on a specific port and serve out an html file when requested. It will also take in the webpack configurations for module bundling. (To read more about Express at a high level read this <a href=\"https://evanhahn.com/understanding-express-3/\">article</a>).</p>\n\n<p>The path library is actually a direct copy of the Node path module. It simply provides the utilities for working with directory and file paths, making it easier for us to serve up files for our Express server. </p>\n\n<p>Now create a new directory called buildScripts inside simple-server. Open up the simple-server directory in an IDE of your choosing. Create a server.js file inside buildScripts and add path and express to the file.</p>\n\n<p>buildScripts/server.js</p>\n\n<pre>\n<code class=\"language-javascript\">var express = require('express')\nvar path = require('path')</code></pre>\n\n<p>A port number is required and express will need to be initialized.</p>\n\n<pre>\n<code class=\"language-javascript\">const port = 3000;\nconst app = express();</code></pre>\n\n<p>Now we can listen on port 3000 and report if there are any errors in doing so.</p>\n\n<pre>\n<code class=\"language-javascript\">app.listen(port, function (error) {\n    if(error) {\n        console.log(error);\n    }\n});</code></pre>\n\n<p>While we’re here let’s have the instantiated Express application serve a file when you visit localhost:3000/</p>\n\n<pre>\n<code class=\"language-javascript\"> app.get('/', function (req, res) {\n    res.sendFile(path.join(__dirname, '../src/index.html'));\n});</code></pre>\n\n<p>This is when the path library comes in handy. The resulting sent file will be from the directory of the current module (__dirname) and this path will be joined with the path ../src/index.html. Speaking of which, let’s create that file now. <br />\n/src/index.html</p>\n\n<pre>\n<code class=\"language-xml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Sample Project&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;h1&gt;Hello World!&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Now we need to switch to the package.json and create a new script. This will be the start script which will start up the Express file server. You can remove your ‘test’ script if you wish. Add the following script in it’s place like so</p>\n\n<pre>\n<code class=\"language-json\">  \"scripts\": {\n    \"start\": \"node buildScripts/server.js\"\n  },</code></pre>\n\n<p>The node command dictates that node.js should run the buildScripts/server.js file.<br />\nNow you can run npm start from the terminal, and visit localhost:3000 to see a ‘Hello World’ message. <br />\nSubsequent scripts can be added before or after the start script as long as there is a comma before the next script. The last script in the list cannot have a comma at the end.</p>\n\n<p>Note: start is special script term to npm. Other custom scripts would need to be run as npm run myScript. Read more about other special scripts for npm here (https://docs.npmjs.com/misc/scripts).<br />\nJust to make life a little easier, I like to have my applications automatically open the browser up to localhost:3000/ while testing. To do so add the open library using</p>\n\n<pre>\n<code class=\"language-bash\">npm install open --save-dev\n</code></pre>\n\n<p>In server.js change the app.listen function to have the following else statement.</p>\n\n<pre>\n<code class=\"language-javascript\"> app.listen(port, function (error) {\n    if(error) {\n        console.log(error);\n    } else {\n        open(`http://localhost:${port}`)\n    }\n});</code></pre>\n\n<p>If express is successfully able to listen on port 3000 the application will try to open up your default browser and navigate to http://localhost:3000<br />\nWhen adding the open library we used --save-dev instead of --save and this was done because we only really want open to be used for development purposes and not to be used for production. Go <a href=\"http://imcodebased.com/npm-save-or-save-dev-which-one-to-use/\">here</a> for more on --save vs --save-dev </p>\n\n<h3 id=\"addbabel\">Adding Babel to the mix</h3>\n\n<p>Babel is a transpiler that can convert ES6 code to standard Javascript (ES5) which all browsers can understand. ES6 or ECMAScript2015 is an update to the Javascript language that has brought in a lot of new features. Read more about these new features <a href=\"https://github.com/lukehoban/es6features\">here</a>. ES6 at the time of writing is still underway of being standardized so when used it needs to be converted by a transpiler. Any modern React application should be written in ES6.</p>\n\n<p>To begin adding Babel to our project we need to install a few more packages.</p>\n\n<pre>\n<code class=\"language-bash\">npm install babel-cli babel-core babel-preset-es2015 --save-dev</code></pre>\n\n<p>These will introduce code for invoking scripts using babel, the babel core itself and the presets to use es2015 (aka ES6).</p>\n\n<p>In package.json change the start script to </p>\n\n<pre>\n<code class=\"language-json\">\"start\": \"babel-node buildScripts/server.js\"</code></pre>\n\n<p>Babel-node comes from the babel-cli package.</p>\n\n<p>Now add the following babel preset after the devDependancies</p>\n\n<pre>\n<code class=\"language-json\">  \"babel\": {\n    \"presets\": [\n      \"es2015\"\n    ]\n  }</code></pre>\n\n<p>We can test that Babel is being used by introducing some ES6 code to our code. In buildScripts/server.js change the require statements to import statements. Import being the replacement for require.</p>\n\n<pre>\n<code class=\"language-javascript\">import express from 'express';\nimport path from 'path';\nimport open from 'open';</code></pre>\n\n<p>And in the terminal run</p>\n\n<pre>\n<code class=\"language-bash\">npm start</code></pre>\n\n<p>and “Hello World” will show up as expected.<br />\nNow we can move on to setting up Webpack in ES6</p>\n\n<h3 id=\"addwebpack\">Adding Webpack configurations</h3>\n\n<p>First of all what is Webpack and why is it needed. Webpack is a module bundler that gathers up all the modules with dependencies and creates static assets to represent those modules. This allows for splitting up the codebase of an application up into chunks and Webpack can bundle up the libraries and modules that were required for that chunk. Those chunks can then be loaded on demand which leads to a reduction in the loading time of an application. Another feature that is important for a React application is for compiling to Javascript, so we can use JSX and ES6 to write code and Webpack + Babel will compile the code to Javascript. Read more about Babel <a href=\"http://www.programwitherik.com/understanding-the-babel-compiler-2016/\">here</a>.</p>\n\n<p>JSX is a special syntax for writing React components and the code is written as a fusion of HTML and Javascript. Read more about JSX <a href=\"https://facebook.github.io/react/docs/introducing-jsx.html\">here</a></p>\n\n<p>The first thing to do is add webpack to the project</p>\n\n<pre>\n<code class=\"language-bash\">npm install webpack webpack-dev-middleware --save-dev</code></pre>\n\n<p>The webpack-dev-middleware is being used in conjunction with webpack to compile assets in-memory and sever them.</p>\n\n<p><br />\nCreate a new file called webpack.config.dev.js in the root directory (simple-server/) and add the following.</p>\n\n<pre>\n<code class=\"language-javascript\">import webpack from 'webpack'\nimport path from 'path'\n\nexport default {\n  devtool: 'inline-source-map',\n\n  entry: [\n    path.resolve(__dirname, 'src/index.js') \n  ],\n\n  output: {\n    path: path.resolve(__dirname, 'src'),\n    publicPath: '/',\n    filename: 'bundle.js'\n  }\n}</code></pre>\n\n<p>The first two lines shouldn’t be anything surprising, just adding webpack and path.<br />\nNow we’re exporting using ES6 syntax. The devtool: ‘inline-source-map’; will provide a path for a file that has an error or warning in the browser’s console. Then </p>\n\n<pre>\n<code class=\"language-javascript\">entry: [\n    path.resolve(__dirname, 'src/index.js') \n  ],</code></pre>\n\n<p>Is adding the point of origin for all of our application code. So any Javascript code and React components that are added here will be bundled to an output file by </p>\n\n<pre>\n<code class=\"language-javascript\"> output: {\n    path: path.resolve(__dirname, 'src'),\n    publicPath: '/',\n    filename: 'bundle.js'\n  }</code></pre>\n\n<p>In src/ create a file called index.js and add a simple console.log(\"hello from index.js (bundle.js)\");<br />\nAnd in index.html add &lt;script src='bundle.js'&gt;&lt;/script&gt; to bring in the file that will be bundled at run time by webpack-dev-middleware.<br />\nLast thing we need to do is add </p>\n\n<pre>\n<code class=\"language-javascript\">import webpack from 'webpack';\nimport config from '../webpack.config.dev';\n\nconst compiler = webpack(config);</code></pre>\n\n<p>And </p>\n\n<pre>\n<code class=\"language-javascript\">app.use(require('webpack-dev-middleware')(compiler, {\n    noInfo: true,\n    publicPath: config.output.publicPath\n}));</code></pre>\n\n<p>This will use the webpack-dev-middleware to bundle the index.js file to bundle.js at the time the server starts. So when index.html is called upon bundle.js is ready to be used.<br />\nTo buildScripts/server.js.</p>\n\n<h3 id=\"react\">Bringing in React</h3>\n\n<p>Finally we are ready to bring in React.</p>\n\n<pre>\n<code class=\"language-bash\">npm install react react-dom --save\nnpm install babel-preset-react-hmre babel-preset-react --save-dev</code></pre>\n\n<p>The babel-preset-react-hmre and babel-preset-react libraries will allow us to set up the presets for using babel when React is being used.<br />\nIn package.json add the following lines under babel</p>\n\n<pre>\n<code class=\"language-json\">  \"babel\": {\n    \"presets\": [\n      \"es2015\",\n      \"react\"\n    ],\n    \"env\": {\n      \"presets\":[\n        \"react-hmre\"\n      ]\n    }\n  }</code></pre>\n\n<p>In index.js we can add React and add a simple React component to be rendered to the screen.</p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass App extends React.Component {\n    render(){\n        return(\n            &lt;div&gt;\n                &lt;h1&gt;Howdy from React!&lt;/h1&gt;\n            &lt;/div&gt;\n        )\n    }\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));</code></pre>\n\n<p>Now with npm start localhost:3000 should read “Howdy from React!” above “Hello World!”</p>\n\n<p>Hopefully this has demystified Express, Webpack, React, and Babel configurations.<br />\nThe code for this article can be found <a href=\"https://bitbucket.org/troy_kearney/simple-server\">here</a>.</p>\n",
      "changed": "2017-04-12T12:15:27+00:00",
      "created": "2017-03-31T19:02:22+00:00",
      "summary": "<h3>Overview</h3>\n\n<ul>\n\t<li><a href=\"#introduction\">Introduction</a></li>\n\t<li><a href=\"#prerequisites\">Prerequisites</a></li>\n\t<li><a href=\"#setexpress\">Setting up Express</a></li>\n\t<li><a href=\"#addbabel\">Adding Babel to the mix</a></li>\n\t<li><a href=\"#addwebpack\">Adding Webpack configurations</a></li>\n\t<li><a href=\"#react\">Bringing in React</a></li>\n</ul>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"#react\">There are a two main different ways one could set up an environment for a React project; using </a><a href=\"https://facebook.github.io/react/docs/installation.html\">create-react-app</a> (which takes care of just about everything for you), or creating your own Express.js file server with your own Webpack and Babel configurations. The former is great for when one is just beginning to learn and play with React, but there’s going to be a point where you need to make some changes to a webpack.config.js file and it’s going to seem foreign and scary. But really it isn’t and it gets easier.</p>\n\n<p>The other minor issue I have with create-react-app and similar tools is that there is a lot of \"black magic\" going on, and I would like to know at least the basics of what’s going on under the hood.</p>\n\n<p>Today I’m going to walk through creating a very basic file server using Express.js with some Webpack and Babel configurations and implement a very basic React application to get you started.</p>\n\n<h3 id=\"prerequisites\">Prerequisites</h3>\n\n<ul>\n\t<li>Node js and npm (https://nodejs.org/en/)</li>\n\t<li>A basic understanding of Javascript</li>\n</ul>\n\n<h3 id=\"setexpress\">Setting up Express</h3>\n\n<p>From the terminal of your choosing make a new directory and change to that directory</p>\n\n<pre>\n<code class=\"language-bash\">mkdir simple-server\ncd simple-server</code></pre>\n\n<p>From that directory run</p>\n\n<pre>\n<code class=\"language-bash\">npm init</code></pre>\n\n<p>To initialize npm in this directory and you can use the defaults for all of the options that come up. This will create and populate a package.json with the default values.</p>\n\n<p>Now it’s time to add some initial packages.</p>\n\n<pre>\n<code class=\"language-bash\">npm install path express --save</code></pre>\n\n<p>This is bringing in the express and the path package.</p>\n\n<p>Express works with Node.js to bring Javascript to the backend. Express is a Node.js framework that brings an additional layer of structure and function to build a full site. For this project, Express will be used for listening on a specific port and serve out an html file when requested. It will also take in the webpack configurations for module bundling. (To read more about Express at a high level read this <a href=\"https://evanhahn.com/understanding-express-3/\">article</a>).</p>\n\n<p>The path library is actually a direct copy of the Node path module. It simply provides the utilities for working with directory and file paths, making it easier for us to serve up files for our Express server. </p>\n\n<p>Now create a new directory called buildScripts inside simple-server. Open up the simple-server directory in an IDE of your choosing. Create a server.js file inside buildScripts and add path and express to the file.</p>\n\n<p>buildScripts/server.js</p>\n\n<pre>\n<code class=\"language-javascript\">var express = require('express')\nvar path = require('path')</code></pre>\n\n<p>A port number is required and express will need to be initialized.</p>\n\n<pre>\n<code class=\"language-javascript\">const port = 3000;\nconst app = express();</code></pre>\n\n<p>Now we can listen on port 3000 and report if there are any errors in doing so.</p>\n\n<pre>\n<code class=\"language-javascript\">app.listen(port, function (error) {\n    if(error) {\n        console.log(error);\n    }\n});</code></pre>\n\n<p>While we’re here let’s have the instantiated Express application serve a file when you visit localhost:3000/</p>\n\n<pre>\n<code class=\"language-javascript\"> app.get('/', function (req, res) {\n    res.sendFile(path.join(__dirname, '../src/index.html'));\n});</code></pre>\n\n<p>This is when the path library comes in handy. The resulting sent file will be from the directory of the current module (__dirname) and this path will be joined with the path ../src/index.html. Speaking of which, let’s create that file now. <br />\n/src/index.html</p>\n\n<pre>\n<code class=\"language-xml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Sample Project&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;h1&gt;Hello World!&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Now we need to switch to the package.json and create a new script. This will be the start script which will start up the Express file server. You can remove your ‘test’ script if you wish. Add the following script in it’s place like so</p>\n\n<pre>\n<code class=\"language-json\">  \"scripts\": {\n    \"start\": \"node buildScripts/server.js\"\n  },</code></pre>\n\n<p>The node command dictates that node.js should run the buildScripts/server.js file.<br />\nNow you can run npm start from the terminal, and visit localhost:3000 to see a ‘Hello World’ message. <br />\nSubsequent scripts can be added before or after the start script as long as there is a comma before the next script. The last script in the list cannot have a comma at the end.</p>\n\n<p>Note: start is special script term to npm. Other custom scripts would need to be run as npm run myScript. Read more about other special scripts for npm here (https://docs.npmjs.com/misc/scripts).<br />\nJust to make life a little easier, I like to have my applications automatically open the browser up to localhost:3000/ while testing. To do so add the open library using</p>\n\n<pre>\n<code class=\"language-bash\">npm install open --save-dev\n</code></pre>\n\n<p>In server.js change the app.listen function to have the following else statement.</p>\n\n<pre>\n<code class=\"language-javascript\"> app.listen(port, function (error) {\n    if(error) {\n        console.log(error);\n    } else {\n        open(`http://localhost:${port}`)\n    }\n});</code></pre>\n\n<p>If express is successfully able to listen on port 3000 the application will try to open up your default browser and navigate to http://localhost:3000<br />\nWhen adding the open library we used --save-dev instead of --save and this was done because we only really want open to be used for development purposes and not to be used for production. Go <a href=\"http://imcodebased.com/npm-save-or-save-dev-which-one-to-use/\">here</a> for more on --save vs --save-dev </p>\n\n<h3 id=\"addbabel\">Adding Babel to the mix</h3>\n\n<p>Babel is a transpiler that can convert ES6 code to standard Javascript (ES5) which all browsers can understand. ES6 or ECMAScript2015 is an update to the Javascript language that has brought in a lot of new features. Read more about these new features <a href=\"https://github.com/lukehoban/es6features\">here</a>. ES6 at the time of writing is still underway of being standardized so when used it needs to be converted by a transpiler. Any modern React application should be written in ES6.</p>\n\n<p>To begin adding Babel to our project we need to install a few more packages.</p>\n\n<pre>\n<code class=\"language-bash\">npm install babel-cli babel-core babel-preset-es2015 --save-dev</code></pre>\n\n<p>These will introduce code for invoking scripts using babel, the babel core itself and the presets to use es2015 (aka ES6).</p>\n\n<p>In package.json change the start script to </p>\n\n<pre>\n<code class=\"language-json\">\"start\": \"babel-node buildScripts/server.js\"</code></pre>\n\n<p>Babel-node comes from the babel-cli package.</p>\n\n<p>Now add the following babel preset after the devDependancies</p>\n\n<pre>\n<code class=\"language-json\">  \"babel\": {\n    \"presets\": [\n      \"es2015\"\n    ]\n  }</code></pre>\n\n<p>We can test that Babel is being used by introducing some ES6 code to our code. In buildScripts/server.js change the require statements to import statements. Import being the replacement for require.</p>\n\n<pre>\n<code class=\"language-javascript\">import express from 'express';\nimport path from 'path';\nimport open from 'open';</code></pre>\n\n<p>And in the terminal run</p>\n\n<pre>\n<code class=\"language-bash\">npm start</code></pre>\n\n<p>and “Hello World” will show up as expected.<br />\nNow we can move on to setting up Webpack in ES6</p>\n\n<h3 id=\"addwebpack\">Adding Webpack configurations</h3>\n\n<p>First of all what is Webpack and why is it needed. Webpack is a module bundler that gathers up all the modules with dependencies and creates static assets to represent those modules. This allows for splitting up the codebase of an application up into chunks and Webpack can bundle up the libraries and modules that were required for that chunk. Those chunks can then be loaded on demand which leads to a reduction in the loading time of an application. Another feature that is important for a React application is for compiling to Javascript, so we can use JSX and ES6 to write code and Webpack + Babel will compile the code to Javascript. Read more about Babel <a href=\"http://www.programwitherik.com/understanding-the-babel-compiler-2016/\">here</a>.</p>\n\n<p>JSX is a special syntax for writing React components and the code is written as a fusion of HTML and Javascript. Read more about JSX <a href=\"https://facebook.github.io/react/docs/introducing-jsx.html\">here</a></p>\n\n<p>The first thing to do is add webpack to the project</p>\n\n<pre>\n<code class=\"language-bash\">npm install webpack webpack-dev-middleware --save-dev</code></pre>\n\n<p>The webpack-dev-middleware is being used in conjunction with webpack to compile assets in-memory and sever them.</p>\n\n<p><br />\nCreate a new file called webpack.config.dev.js in the root directory (simple-server/) and add the following.</p>\n\n<pre>\n<code class=\"language-javascript\">import webpack from 'webpack'\nimport path from 'path'\n\nexport default {\n  devtool: 'inline-source-map',\n\n  entry: [\n    path.resolve(__dirname, 'src/index.js') \n  ],\n\n  output: {\n    path: path.resolve(__dirname, 'src'),\n    publicPath: '/',\n    filename: 'bundle.js'\n  }\n}</code></pre>\n\n<p>The first two lines shouldn’t be anything surprising, just adding webpack and path.<br />\nNow we’re exporting using ES6 syntax. The devtool: ‘inline-source-map’; will provide a path for a file that has an error or warning in the browser’s console. Then </p>\n\n<pre>\n<code class=\"language-javascript\">entry: [\n    path.resolve(__dirname, 'src/index.js') \n  ],</code></pre>\n\n<p>Is adding the point of origin for all of our application code. So any Javascript code and React components that are added here will be bundled to an output file by </p>\n\n<pre>\n<code class=\"language-javascript\"> output: {\n    path: path.resolve(__dirname, 'src'),\n    publicPath: '/',\n    filename: 'bundle.js'\n  }</code></pre>\n\n<p>In src/ create a file called index.js and add a simple console.log(\"hello from index.js (bundle.js)\");<br />\nAnd in index.html add &lt;script src='bundle.js'&gt;&lt;/script&gt; to bring in the file that will be bundled at run time by webpack-dev-middleware.<br />\nLast thing we need to do is add </p>\n\n<pre>\n<code class=\"language-javascript\">import webpack from 'webpack';\nimport config from '../webpack.config.dev';\n\nconst compiler = webpack(config);</code></pre>\n\n<p>And </p>\n\n<pre>\n<code class=\"language-javascript\">app.use(require('webpack-dev-middleware')(compiler, {\n    noInfo: true,\n    publicPath: config.output.publicPath\n}));</code></pre>\n\n<p>This will use the webpack-dev-middleware to bundle the index.js file to bundle.js at the time the server starts. So when index.html is called upon bundle.js is ready to be used.<br />\nTo buildScripts/server.js.</p>\n\n<h3 id=\"react\">Bringing in React</h3>\n\n<p>Finally we are ready to bring in React.</p>\n\n<pre>\n<code class=\"language-bash\">npm install react react-dom --save\nnpm install babel-preset-react-hmre babel-preset-react --save-dev</code></pre>\n\n<p>The babel-preset-react-hmre and babel-preset-react libraries will allow us to set up the presets for using babel when React is being used.<br />\nIn package.json add the following lines under babel</p>\n\n<pre>\n<code class=\"language-json\">  \"babel\": {\n    \"presets\": [\n      \"es2015\",\n      \"react\"\n    ],\n    \"env\": {\n      \"presets\":[\n        \"react-hmre\"\n      ]\n    }\n  }</code></pre>\n\n<p>In index.js we can add React and add a simple React component to be rendered to the screen.</p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass App extends React.Component {\n    render(){\n        return(\n            &lt;div&gt;\n                &lt;h1&gt;Howdy from React!&lt;/h1&gt;\n            &lt;/div&gt;\n        )\n    }\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));</code></pre>\n\n<p>Now with npm start localhost:3000 should read “Howdy from React!” above “Hello World!”</p>\n\n<p>Hopefully this has demystified Express, Webpack, React, and Babel configurations.<br />\nThe code for this article can be found <a href=\"https://bitbucket.org/troy_kearney/simple-server\">here</a>.</p>\n",
      "field_tags": [
        {
          "id": "e03e2095-b9e9-4a87-ab5e-e7b979d7f6a5",
          "tid": 47,
          "name": "javascript",
          "alias": "/term/javascript"
        },
        {
          "id": "13f72094-1461-430d-a915-5b8d2362e2ba",
          "tid": 95,
          "name": "react",
          "alias": "/term/react"
        }
      ],
      "field_image": [],
      "uid": {
        "id": "afd53424-4dd4-4b18-bd3a-c2332d3d27bc",
        "display_name": "Troy Kearney"
      }
    },
    {
      "title": "Building a Non-Trivial React App",
      "nid": 149,
      "alias": "/article/building-non-trivial-react-app",
      "slug": "building-non-trivial-react-app",
      "body": "<h3 dir=\"ltr\">Overview:</h3>\n\n<ul dir=\"ltr\">\n\t<li>Why React?</li>\n\t<li>Setting up a React project environment</li>\n\t<li>Basics of React</li>\n\t<li>Building and nesting components</li>\n\t<li>API and AJAX requests</li>\n\t<li>Adding Twitter Bootstrap for styling</li>\n</ul>\n\n<p><strong>Why React?</strong></p>\n\n<p dir=\"ltr\">For this tutorial we are going to build a simple React application that will allow us to search for an artist on Spotify and return the top result for the search and a list of related artists, along with images, genres, and a link. In a follow up article I will introduce Redux into our React application.</p>\n\n<p dir=\"ltr\">React has been getting a lot of positive attention for the past few years, and for good reason. Facebook’s Javascript framework has been picked up by several other big companies, including Netflix, Tesla, Yahoo!, and Airbnb.</p>\n\n<p dir=\"ltr\">React operates very differently than other Javascript frameworks like Angular and Vue.js. Instead of writing your Javascript and HTML in separate files and having to referencing elements using id selectors or Angulars’ ng- syntax, you will write them both together in one harmonious file. This makes it easier for writing and debugging code. It also leads to more predictable outcomes in our applications.</p>\n\n<p dir=\"ltr\">The following in an example of a React Component being created and displayed on screen.</p>\n\n<pre>\n<code class=\"language-javascript\">class HelloWorld extends React.Component {\n  render () {\n    return(&lt;div&gt; Hello World &amp; {this.props.name}&lt;/div&gt;);\n  }\n}\n\nReactDOM.render(\n &lt;HelloWorld name=\"Troy\" /&gt;,\n  document.getElementById('root')\n)\n</code></pre>\n\n<p>The XML-style syntax used above is called JSX. It is optional for React, but it makes life easier when you get used to it. JSX does need to be compiled by <a href=\"https://babeljs.io/docs/plugins/transform-react-jsx\">Babel </a>before it can be used by the browser. </p>\n\n<p>React’s speed comes from its usage of a virtual DOM. Rather than manipulating the existing DOM, which is slow, React creates a copy of the DOM called a virtual DOM and manipulates that instead. Then React compares the virtual DOM to the real DOM and only swaps out only the changed sections. </p>\n\n<p>Unlike Angular and Ember, which are full frameworks, React is only the View layer in the MVC framework. React’s is only concerned with creating reusable UI components. So for your complete application you’re going to need to learn more about the ecosystem around React and plugging React into either an existing application or setting up a backend for your application.</p>\n\n<p>Before you can get started with React, you will need to have <a href=\"https://nodejs.org/en/\">Node and npm</a> installed.  I’m using version 7.5.0.</p>\n\n<p><strong>Setting up a React Environment </strong></p>\n\n<p>When it comes to setting up a React environment there are a few different options and it’s up to you to decide which is the most comfortable.<br />\nOne option is to use Facebook’s Create React App command line tool to build React apps with zero build configuration. This will give us access to React, Webpack, Babel, and ESLint.This is great for beginners as it makes setting up an environment super easy. </p>\n\n<p>The other option is to set up an Express+Webpack+Babel environment which you would have full control over. This is a good option if you want to know what’s going on under the hood. If you’d like a sample of this kind of environment here’s an environment I enjoy using. For the purposes of this project I’ll be using this method. If you’d like learn about building an environment, here’s a tutorial I wrote just for that purpose.</p>\n\n<p>Note: if you wish to use the react-create-app simply follow the below instructions.<br />\nIn the console enter the following commands</p>\n\n<pre>\n<code class=\"language-bash\">npm install -g create-react-app\ncreate-react-app react-artist-search</code></pre>\n\n<p>Run npm start in the console and your browser will automatically open on http://localhost:3000</p>\n\n<p>Delete all the files from inside the src/ directory except for index.js.</p>\n\n<p>If you already have an environment ready, the only libraries needed will be react, react-dom, and the libraries for Babel </p>\n\n<p><strong>The Basics of React</strong></p>\n\n<p>As mentioned earlier, React allows you to create reusable UI components. The individual components should be self containing, meaning they contain all of the HTML and JS that is needed for the component. The component will also manage its own state or the props (properties) passed to the children. The state of the component is the data that is being managed by or for that component. The state should only be set inside of the component. props are set by the parent and passed to the children components and are fixed throughout the lifetime of the component. We will see how state and props work as we build our application.</p>\n\n<p>Since we’re thinking in terms of components, let’s break down our application in its different components.</p>\n\n<p>App - This is the holder for all of the rest of our components. It will also be the one that holds the state and provides the props to be passed to the children components. App for now will be index.js<br />\nSearch - This will be our search bar component that will allow us to search for an artist.<br />\nArtist - The Artist component will be used in two different ways. It will be used to both show the number one search result and it will be used to display the individual related artists.<br />\nRelatedArtist - This will be the list component that will list out all of the related artists using the artist component.</p>\n\n<p>Let’s set up the index.html file so that we can plug in our application. <br />\n </p>\n\n<pre>\n<code class=\"language-xml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;React Artist Search&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script src=\"bundle.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The bundle.js is being created webpack. The div with id=”root” is where our application will live.</p>\n\n<p>Inside src/index.js we’ll create our App component.<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass App extends React.Component {\n    render() {\n        return(\n            &lt;div&gt;\n                &lt;p&gt;Hello World!&lt;/p&gt;\n            &lt;/div&gt;\n\n        );\n    }\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));\n</code></pre>\n\n<p>After running npm start, you will see a friendly Hello World! Message.<br />\nThe above code might look a little different than what you’re used to for JavaScript, that’s because it is written in ECMAScript 2015 or ES6. The import statements are like require statements. The two libraries we need right now are React and ReactDOM.</p>\n\n<p>The App component is being declared by the class keyword, similar to creating classes in Java. It is also extending from React’s component. It isn’t a requirement to write out class like this, the class constructor is just syntactictical sugar for creating JavaScript classes.</p>\n\n<p>Inside of the React class is our render function. render() is required for all React components. The code inside of the render function is written in JSX as mentioned earlier, this is optional but it does make writing React code much easier. As you might have noticed the className. This is one of the many differences in attribute naming, class is not used because it is a reserved word in JavaScript. Check out the list of attribute name differences <a href=\"https://facebook.github.io/react/docs/dom-elements.html\">here </a><br />\nAlso note that there is only one root element inside of the render function. React can only return that one root element and if there were more than one there would be an error.</p>\n\n<p>The last bit of code is what will render our component to the screen to the div with the id=”root”.</p>\n\n<p><strong>Building and nesting components</strong></p>\n\n<p>Now we can create a new component for searching for an artist. <br />\nCreate a components directory under src and in this new directory create a file called Search.js</p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\n\nclass Search extends React.Component {\n    render() {\n        return(\n            &lt;div className=\"search\"&gt;\n                &lt;span&gt;Search&lt;/span&gt;\n                &lt;input /&gt;\n            &lt;/div&gt;\n\n        );\n    }\n}\n\nexport default Search\n</code></pre>\n\n<p>The only real difference from our App component is the export default Search. This is similar to module.export functionality of ES5. This makes our Search component available to be imported by the rest of our application.</p>\n\n<p>Now back in src/index.js we can import the Search component and place it inside of our root div.</p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Search from './components/Search'\n\nclass App extends React.Component {\n    render() {\n        return(\n            &lt;div className=\"greeting\"&gt;\n                &lt;p&gt;Hello World!&lt;/p&gt;\n                &lt;Search /&gt;\n            &lt;/div&gt;\n\n        );\n    }\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));\n</code></pre>\n\n<p>Now you’ll see the Hello World message and the Search component.</p>\n\n<p>But this is a pretty useless search box, so let’s make it at least a little bit interactive and we’ll work on that actual Spotify search functionality in a little bit. So to start let’s have the state start keeping track of what’s being entered into the input box and when the text changes the state will update with the value in the textbox.</p>\n\n<p><br />\nIn index.js we added a handler for when the Search component changes and passed that callback to the Search component. This is a time where the parent is passing a property to a child. This makes handleSearchSubmit available to the child element and the data can be passed up from the child to the parent.<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Search from './components/Search'\n\nclass App extends React.Component {\n\n    handleSearchSubmit(term){\n        console.log(term)\n    }\n\n    render() {\n        return(\n            &lt;div className=\"artist-search\"&gt;\n                &lt;Search onSearchSubmit={ this.handleSearchSubmit }/&gt;\n            &lt;/div&gt;\n\n        );\n    }\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));\n</code></pre>\n\n<p>In component/Search.js we added a constructor that takes in props initializes the state with a term that is an empty string. Then we added a handler for onTermChange which will be called on change of the input box. Inside of the onChange property we are calling the onTermChange and passing in the value of this input box via event.target.value. The syntax in which the function in between the curly braces is called a fat arrow function, which is a new way of writing functions in ES6. There is also now similar function for when the form is submitted called onTermSubmission. onTermSubmission takes just the event and preventDefault is applied to the event so that the page doesn’t reload. Then we set a let variable to this.state.term and then call onSearchSubmit with the term value. The reason I didn’t just call onSearchSubmit with this.state.term is because when calling that function this.state is not the this.state that we are expecting. <br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            term: ''\n        }\n    }\n    onTermChange(term) {\n        this.setState({term})\n    }\n    onTermSubmission(event) {\n        event.preventDefault();\n        let term = this.state.term\n        this.props.onSearchSubmit(term)\n    }\n    render() {\n        return(\n            &lt;div className=\"search\"&gt;\n                &lt;form onSubmit={event =&gt; this.onTermSubmission(event)}&gt;\n                    &lt;span&gt;Search: &lt;/span&gt;\n                    &lt;input onChange={event =&gt; this.onTermChange(event.target.value)} /&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n\n        );\n    }\n}\n\nexport default Search\n</code></pre>\n\n<p>*A quick word about the state. The state of our application is meant to be immutable. Meaning the state should be changed using the setState method and not via this.state directly. The only time one should use this.state is in the constructor initializing the state.</p>\n\n<p>The passing of the property of onSearchSubmit with the handleSearchSubmit method as an argument is tricky at first and the key to this is remembering that now from Search we can call the onSearchSubmit method and that will trigger the parent’s (App) handleSearchSubmit method.</p>\n\n<p>Now when you submit the form you should get a console log message with the value that was submitted.</p>\n\n<p>It’s time for us to start building our Artist and RelatedArtist components. The RelatedArtist component will map out the array of the related Artist to our searched artist. To start, we’re just going to use some fake data rather than worrying about making a call to the Spotify API. Inside of src/index.js we are going to initialize a state with a fake searched artist and an array of related artists.<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">constructor(props) {\n        super(props)\n        this.state = {\n            searchedArtist: {\n                    name: 'My Band 1',\n                    genres: ['genre 1','genre 2','genre 3'],\n                    image: 'http://fakeimg.pl/250x100/'\n            },\n            relatedArtists: [\n                {\n                    name: 'Fake Band 1',\n                    genres: ['genre 1','genre 2','genre 3'],\n                    image: 'http://fakeimg.pl/250x100/'\n                },\n                {\n                    name: 'Fake Band 2',\n                    genres: ['genre 1','genre 2','genre 3'],\n                    image: 'http://fakeimg.pl/250x100/'\n                },\n                {\n                    name: 'Fake Band 3',\n                    genres: ['genre 1','genre 2','genre 3'],\n                    image: 'http://fakeimg.pl/250x100/'\n                }\n            ]\n        }\n    }\n</code></pre>\n\n<p>Now we can create our individual artist component which will be used to represent the searched artist and as the individuals in the RelatedArtists component.</p>\n\n<p>In src/components/ create a new file called Artist.js<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\n\nlet Artist = ({ artist }) =&gt; {\n    return(\n        &lt;div&gt;\n            &lt;a href={ artist.href }&gt; &lt;h2&gt;{ artist.name }&lt;/h2&gt;&lt;/a&gt;\n                &lt;img src={ artist.image } /&gt;}\n                &lt;ul&gt;\n                    {artist.genres.map(g =&gt;\n                        &lt;li key={Math.random()}&gt;{g}&lt;/li&gt;\n                    )}\n                &lt;/ul&gt;\n\n        &lt;/div&gt;\n    )\n}\n\nexport default Artist</code></pre>\n\n<p>This looks somewhat like our other components, but what is going on with const Artist = ({ artist }) =&gt; { ?!? In React this is called a stateless functional component. These types of components have no need to know about the current state of our application and all they need to do is display the data that has been passed to them. They are also referred to as presentational components. To read more about stateless functional components I recommend this <a href=\"http://frontendinsights.com/stateless-functional-components/\">article </a></p>\n\n<p>The Math.random() being used above is to prevent React from warning about an item in a mapped array not having a key. Generally you should try to use an actual id property for your element rather than a random key value</p>\n\n<p>In src/components/ create a new file called RelatedArtists.js</p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\nimport Artist from './Artist'\n\nconst RelatedArtists = ({ relatedArtists }) =&gt; {\n        return(\n            &lt;div&gt;\n                &lt;div&gt;\n                    {relatedArtists.map( artist =&gt;\n                        &lt;Artist key={Math.random()} artist={ artist } /&gt;)\n                    }\n                &lt;/div&gt;\n            &lt;/div&gt;\n        )\n}\n\nexport default RelatedArtists;\n</code></pre>\n\n<p>RelatedArtists is simply taking in the related artists passed in from index.js and mapping them to instances of Artist.</p>\n\n<p>Now when we visit http://localhost:3000/ we should see the following the list of Fake artists.</p>\n\n<p>Let’s start to get some real data into our application using the Spotify API.<br />\n </p>\n\n<p><meta charset=\"utf-8\" /><b id=\"docs-internal-guid-90b1267c-6012-84df-2089-57942bccdf25\">APIs and AJAX requests</b></p>\n\n<p>First thing we’ll need is a library for making AJAX request. There are quite a few out there including isomorphic-fetch, axios, superagent and more. For this project we’re going to use axios.<br />\nInstall axios with <br />\n </p>\n\n<pre>\n<code class=\"language-bash\">npm install axios --save</code></pre>\n\n<p>Then import fetch in index.js</p>\n\n<pre>\n<code class=\"language-javascript\">import axios from ‘axios’</code></pre>\n\n<p>We’re going to need to make two separate calls to the Spotify API, one for getting the <a href=\"https://developer.spotify.com/web-api/console/get-search-item/\">artist’s id </a>and a second to search for the related artist </p>\n\n<p>We can clear out the fake data we entered in the App component’s state, but after doing so we’ll get an error about trying to map an unknown property. To remedy this issue I added a new property to the state called ready and initialized it to false. This make the this.state in the constructor look like this:<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">this.state = {\n            ready: false,\n            searchedArtist: '',\n            relatedArtists: []\n        }</code></pre>\n\n<p>Now we can use this property and a little bit of logic to prevent React from trying to render the searchedArtist and the RelatedArtists. Alternatively you could check if relatedArtists and searchedArtists were empty.<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">  {!this.state.ready ? &lt;span&gt;Search for something&lt;/span&gt; :\n                 &lt;div&gt;\n                    &lt;div &gt;\n                        &lt;Artist artist={this.state.searchedArtist}/&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"row\"&gt;\n                        &lt;div&gt;\n                            &lt;RelatedArtists relatedArtists={this.state.relatedArtists} /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                }\n</code></pre>\n\n<p>The handleSearchSubmit is going to change quite a bit now. So I’m going to go over the changes piece by piece.</p>\n\n<pre>\n<code class=\"language-javascript\">handleSearchSubmit(term){\n       axios.get(`https://api.spotify.com/v1/search?q=${term}&amp;type=artist`)\n       .then((result) =&gt; {\n            const searchedArtist = result.data.artists.items[0]\n            this.setState({'searchedArtist': searchedArtist})\n       })\n</code></pre>\n\n<p>In this section we are making our first axios.get request to get the artist name related to the term that was submitted in the Search component. Axios is a <a href=\"https://davidwalsh.name/promises\">promise </a>  based HTTP client which means we can write asynchronous . In this case, when the promise is resolved we will set the state with the top result of the searched term. After that has be another result for the related artists.</p>\n\n<pre>\n<code class=\"language-javascript\">.then((result) =&gt; {\n            axios.get(`https://api.spotify.com/v1/artists/${ this.state.searchedArtist.id }/related-artists`)\n            .then((results) =&gt; {\n            const relatedArtists = results.data.artists\n            this.setState({'relatedArtists': relatedArtists})\n        })\n</code></pre>\n\n<p>So then after the first request has completed we can fire the next get request for the related artists based on the searched artist’s id. Then when that has been resolved we can use the results of that request to set the state’s related artists. Now we just need to signal to the application we are ready to render.</p>\n\n<pre>\n<code class=\"language-javascript\">.then(() =&gt; {\n            this.setState({'ready': true})\n        })</code></pre>\n\n<p>And it’s as simple as that. The fat arrow function being used () =&gt; is keeping the context of this so that we may use the correct this.state. This was also being used in the above two then statements as well.</p>\n\n<p>Now that we have our results, we can add a last small piece to the Artist component, the top image if they have one at all. We’ll do another conditional check on the array of images, and if the artist has any we’ll present the top one, otherwise show some text. The image will also have some inline style to resize it.</p>\n\n<pre>\n<code class=\"language-javascript\">const Artist = ({ artist }) =&gt; {\n    return(\n        &lt;div&gt;\n            &lt;a href={ artist.href }&gt; &lt;h2&gt;{ artist.name }&lt;/h2&gt;&lt;/a&gt;\n                {!artist.images.length ? &lt;p&gt;No Image Available&lt;/p&gt; : &lt;img src={ artist.images[0].url } style={{ \n                    height: 100, width: 100\n                }} /&gt;}\n                &lt;ul&gt;\n                    {artist.genres.map(g =&gt;\n                        &lt;li key={Math.random()}&gt;{g}&lt;/li&gt;\n                    )}\n                &lt;/ul&gt;\n\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n\n<p> </p>\n\n<p><meta charset=\"utf-8\" /><b id=\"docs-internal-guid-90b1267c-6016-56ac-4733-3d43eecefce7\">Adding Twitter Bootstrap for styling</b></p>\n\n<p>First thing we need to do is download all the remaining libraries.</p>\n\n<pre>\n<code class=\"language-bash\">npm install bootstrap react-bootstrap --save\nnpm install css-loader style-loader file-loader url-loader --save-dev\n</code></pre>\n\n<p>Then in webpack.config.dev add the following in the module section<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">module: {\n    // loaders allow for preprocessing of files\n    loaders: [\n      { test: /\\.js$/, exclude: /node_modules/, loaders: ['babel-loader'] }, // preprocessing the .js files with babel-loader\n       // Used for Bootstrap Less Source Files\n      { test: /\\.less/, loader: 'style-loader!css!less-loader' },\n      // Used for Bootstrap Less Source Files\n      { test: /\\.css/, loader: 'style-loader!css-loader' },\n      // Used for Bootstrap Glyphicon Fonts\n      { test: /\\.(woff2|woff|ttf|svg|eot)$/, loader: 'file-loader' }\n    ]\n  }\n</code></pre>\n\n<p>Then in src/index.js add the following</p>\n\n<pre>\n<code class=\"language-javascript\">import Bootstrap from 'bootstrap/dist/css/bootstrap.css' </code></pre>\n\n<p>and you are ready to use Bootstrap classes.</p>\n\n<p>Now in the App component’s render method we can start adding some Bootstrap classes to the divs around the components. I’d like for the Search bar and SearchedArtist components centered and the RelatedArtists to be in a row of three.</p>\n\n<pre>\n<code class=\"language-javascript\">&lt;div className=\"react-artist-search container\"&gt;\n                &lt;div className=\"row\"&gt;\n                    &lt;Search onSearchSubmit={ this.handleSearchSubmit.bind(this) }/&gt;\n                &lt;/div&gt;\n                {!this.state.ready ? &lt;div className=\"row\"&gt;&lt;span className=\"col-lg-6 col-lg-push-3\"&gt;Search for something&lt;/span&gt;&lt;/div&gt; :\n                 &lt;div&gt;\n                    &lt;div className=\"row\"&gt;\n                        &lt;div className=\"col-lg-6 col-lg-push-3\"&gt;\n                            &lt;h3&gt;Searched Artist&lt;/h3&gt;\n                            &lt;Artist artist={this.state.searchedArtist} /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"row\"&gt;\n                        &lt;h4&gt;Related Artist&lt;/h4&gt;\n                        &lt;RelatedArtists relatedArtists={this.state.relatedArtists} /&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                }\n            &lt;/div&gt;\n</code></pre>\n\n<p>The tricky part will be for the RelatedArtists to be split into rows of three. The reason being is that we need to chunk the array of Artist results into groups of threes but the current RelatedArtists component renders all the results as one set. To accomplish this chunking method we can use the lodash ‘_’ library, which conveniently has a function called chunk. Fortunately it is possible to provide the map() function with the parameter of a function which can make the decision on how to render the mapped item, or in this case a set of items.</p>\n\n<pre>\n<code class=\"language-bash\">npm install lodash --save</code></pre>\n\n<p>Add </p>\n\n<pre>\n<code class=\"language-javascript\">import _ from ‘lodash’</code></pre>\n\n<p>to RelatedArtists.js.</p>\n\n<p>We start by adding</p>\n\n<pre>\n<code class=\"language-javascript\">let groups = _.chunk(relatedArtists, 4);</code></pre>\n\n<p>To chunk the array of objects into fours. Now with groups each mapped into another function which will wrap the group into a row.</p>\n\n<pre>\n<code class=\"language-javascript\"> return(\n        &lt;div&gt;\n            {groups.map(renderRow)}\n        &lt;/div&gt;\n    )\n</code></pre>\n\n<p>And the renderRow function will look like this: </p>\n\n<pre>\n<code class=\"language-javascript\">function renderRow(row) {\n        return(\n            &lt;div className=\"row\"&gt;\n                { row.map(renderItem) } \n            &lt;/div&gt;\n        )\n    }\n</code></pre>\n\n<p>And of course each of the items are Artist components which are wrapped with a col-sm-3. The renderItem function looks like this.<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">function renderItem(item) {\n        return(\n            &lt;div className=\"col-sm-3\"&gt;\n                &lt;Artist artist={item} /&gt;\n            &lt;/div&gt;\n        )\n    }\n</code></pre>\n\n<p>Now the app is somewhat presentable!</p>\n\n<p>The above code is located <a href=\"https://bitbucket.org/troy_kearney/react-artist-search\">here</a>. Use the ‘react-only’ branch for this tutorial.</p>\n",
      "changed": "2017-04-12T03:02:44+00:00",
      "created": "2017-04-12T02:32:47+00:00",
      "summary": "<h3 dir=\"ltr\">Overview:</h3>\n\n<ul dir=\"ltr\">\n\t<li>Why React?</li>\n\t<li>Setting up a React project environment</li>\n\t<li>Basics of React</li>\n\t<li>Building and nesting components</li>\n\t<li>API and AJAX requests</li>\n\t<li>Adding Twitter Bootstrap for styling</li>\n</ul>\n\n<p><strong>Why React?</strong></p>\n\n<p dir=\"ltr\">For this tutorial we are going to build a simple React application that will allow us to search for an artist on Spotify and return the top result for the search and a list of related artists, along with images, genres, and a link. In a follow up article I will introduce Redux into our React application.</p>\n\n<p dir=\"ltr\">React has been getting a lot of positive attention for the past few years, and for good reason. Facebook’s Javascript framework has been picked up by several other big companies, including Netflix, Tesla, Yahoo!, and Airbnb.</p>\n\n<p dir=\"ltr\">React operates very differently than other Javascript frameworks like Angular and Vue.js. Instead of writing your Javascript and HTML in separate files and having to referencing elements using id selectors or Angulars’ ng- syntax, you will write them both together in one harmonious file. This makes it easier for writing and debugging code. It also leads to more predictable outcomes in our applications.</p>\n\n<p dir=\"ltr\">The following in an example of a React Component being created and displayed on screen.</p>\n\n<pre>\n<code class=\"language-javascript\">class HelloWorld extends React.Component {\n  render () {\n    return(&lt;div&gt; Hello World &amp; {this.props.name}&lt;/div&gt;);\n  }\n}\n\nReactDOM.render(\n &lt;HelloWorld name=\"Troy\" /&gt;,\n  document.getElementById('root')\n)\n</code></pre>\n\n<p>The XML-style syntax used above is called JSX. It is optional for React, but it makes life easier when you get used to it. JSX does need to be compiled by <a href=\"https://babeljs.io/docs/plugins/transform-react-jsx\">Babel </a>before it can be used by the browser. </p>\n\n<p>React’s speed comes from its usage of a virtual DOM. Rather than manipulating the existing DOM, which is slow, React creates a copy of the DOM called a virtual DOM and manipulates that instead. Then React compares the virtual DOM to the real DOM and only swaps out only the changed sections. </p>\n\n<p>Unlike Angular and Ember, which are full frameworks, React is only the View layer in the MVC framework. React’s is only concerned with creating reusable UI components. So for your complete application you’re going to need to learn more about the ecosystem around React and plugging React into either an existing application or setting up a backend for your application.</p>\n\n<p>Before you can get started with React, you will need to have <a href=\"https://nodejs.org/en/\">Node and npm</a> installed.  I’m using version 7.5.0.</p>\n\n<p><strong>Setting up a React Environment </strong></p>\n\n<p>When it comes to setting up a React environment there are a few different options and it’s up to you to decide which is the most comfortable.<br />\nOne option is to use Facebook’s Create React App command line tool to build React apps with zero build configuration. This will give us access to React, Webpack, Babel, and ESLint.This is great for beginners as it makes setting up an environment super easy. </p>\n\n<p>The other option is to set up an Express+Webpack+Babel environment which you would have full control over. This is a good option if you want to know what’s going on under the hood. If you’d like a sample of this kind of environment here’s an environment I enjoy using. For the purposes of this project I’ll be using this method. If you’d like learn about building an environment, here’s a tutorial I wrote just for that purpose.</p>\n\n<p>Note: if you wish to use the react-create-app simply follow the below instructions.<br />\nIn the console enter the following commands</p>\n\n<pre>\n<code class=\"language-bash\">npm install -g create-react-app\ncreate-react-app react-artist-search</code></pre>\n\n<p>Run npm start in the console and your browser will automatically open on http://localhost:3000</p>\n\n<p>Delete all the files from inside the src/ directory except for index.js.</p>\n\n<p>If you already have an environment ready, the only libraries needed will be react, react-dom, and the libraries for Babel </p>\n\n<p><strong>The Basics of React</strong></p>\n\n<p>As mentioned earlier, React allows you to create reusable UI components. The individual components should be self containing, meaning they contain all of the HTML and JS that is needed for the component. The component will also manage its own state or the props (properties) passed to the children. The state of the component is the data that is being managed by or for that component. The state should only be set inside of the component. props are set by the parent and passed to the children components and are fixed throughout the lifetime of the component. We will see how state and props work as we build our application.</p>\n\n<p>Since we’re thinking in terms of components, let’s break down our application in its different components.</p>\n\n<p>App - This is the holder for all of the rest of our components. It will also be the one that holds the state and provides the props to be passed to the children components. App for now will be index.js<br />\nSearch - This will be our search bar component that will allow us to search for an artist.<br />\nArtist - The Artist component will be used in two different ways. It will be used to both show the number one search result and it will be used to display the individual related artists.<br />\nRelatedArtist - This will be the list component that will list out all of the related artists using the artist component.</p>\n\n<p>Let’s set up the index.html file so that we can plug in our application. <br />\n </p>\n\n<pre>\n<code class=\"language-xml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;React Artist Search&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script src=\"bundle.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The bundle.js is being created webpack. The div with id=”root” is where our application will live.</p>\n\n<p>Inside src/index.js we’ll create our App component.<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass App extends React.Component {\n    render() {\n        return(\n            &lt;div&gt;\n                &lt;p&gt;Hello World!&lt;/p&gt;\n            &lt;/div&gt;\n\n        );\n    }\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));\n</code></pre>\n\n<p>After running npm start, you will see a friendly Hello World! Message.<br />\nThe above code might look a little different than what you’re used to for JavaScript, that’s because it is written in ECMAScript 2015 or ES6. The import statements are like require statements. The two libraries we need right now are React and ReactDOM.</p>\n\n<p>The App component is being declared by the class keyword, similar to creating classes in Java. It is also extending from React’s component. It isn’t a requirement to write out class like this, the class constructor is just syntactictical sugar for creating JavaScript classes.</p>\n\n<p>Inside of the React class is our render function. render() is required for all React components. The code inside of the render function is written in JSX as mentioned earlier, this is optional but it does make writing React code much easier. As you might have noticed the className. This is one of the many differences in attribute naming, class is not used because it is a reserved word in JavaScript. Check out the list of attribute name differences <a href=\"https://facebook.github.io/react/docs/dom-elements.html\">here </a><br />\nAlso note that there is only one root element inside of the render function. React can only return that one root element and if there were more than one there would be an error.</p>\n\n<p>The last bit of code is what will render our component to the screen to the div with the id=”root”.</p>\n\n<p><strong>Building and nesting components</strong></p>\n\n<p>Now we can create a new component for searching for an artist. <br />\nCreate a components directory under src and in this new directory create a file called Search.js</p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\n\nclass Search extends React.Component {\n    render() {\n        return(\n            &lt;div className=\"search\"&gt;\n                &lt;span&gt;Search&lt;/span&gt;\n                &lt;input /&gt;\n            &lt;/div&gt;\n\n        );\n    }\n}\n\nexport default Search\n</code></pre>\n\n<p>The only real difference from our App component is the export default Search. This is similar to module.export functionality of ES5. This makes our Search component available to be imported by the rest of our application.</p>\n\n<p>Now back in src/index.js we can import the Search component and place it inside of our root div.</p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Search from './components/Search'\n\nclass App extends React.Component {\n    render() {\n        return(\n            &lt;div className=\"greeting\"&gt;\n                &lt;p&gt;Hello World!&lt;/p&gt;\n                &lt;Search /&gt;\n            &lt;/div&gt;\n\n        );\n    }\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));\n</code></pre>\n\n<p>Now you’ll see the Hello World message and the Search component.</p>\n\n<p>But this is a pretty useless search box, so let’s make it at least a little bit interactive and we’ll work on that actual Spotify search functionality in a little bit. So to start let’s have the state start keeping track of what’s being entered into the input box and when the text changes the state will update with the value in the textbox.</p>\n\n<p><br />\nIn index.js we added a handler for when the Search component changes and passed that callback to the Search component. This is a time where the parent is passing a property to a child. This makes handleSearchSubmit available to the child element and the data can be passed up from the child to the parent.<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Search from './components/Search'\n\nclass App extends React.Component {\n\n    handleSearchSubmit(term){\n        console.log(term)\n    }\n\n    render() {\n        return(\n            &lt;div className=\"artist-search\"&gt;\n                &lt;Search onSearchSubmit={ this.handleSearchSubmit }/&gt;\n            &lt;/div&gt;\n\n        );\n    }\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));\n</code></pre>\n\n<p>In component/Search.js we added a constructor that takes in props initializes the state with a term that is an empty string. Then we added a handler for onTermChange which will be called on change of the input box. Inside of the onChange property we are calling the onTermChange and passing in the value of this input box via event.target.value. The syntax in which the function in between the curly braces is called a fat arrow function, which is a new way of writing functions in ES6. There is also now similar function for when the form is submitted called onTermSubmission. onTermSubmission takes just the event and preventDefault is applied to the event so that the page doesn’t reload. Then we set a let variable to this.state.term and then call onSearchSubmit with the term value. The reason I didn’t just call onSearchSubmit with this.state.term is because when calling that function this.state is not the this.state that we are expecting. <br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            term: ''\n        }\n    }\n    onTermChange(term) {\n        this.setState({term})\n    }\n    onTermSubmission(event) {\n        event.preventDefault();\n        let term = this.state.term\n        this.props.onSearchSubmit(term)\n    }\n    render() {\n        return(\n            &lt;div className=\"search\"&gt;\n                &lt;form onSubmit={event =&gt; this.onTermSubmission(event)}&gt;\n                    &lt;span&gt;Search: &lt;/span&gt;\n                    &lt;input onChange={event =&gt; this.onTermChange(event.target.value)} /&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n\n        );\n    }\n}\n\nexport default Search\n</code></pre>\n\n<p>*A quick word about the state. The state of our application is meant to be immutable. Meaning the state should be changed using the setState method and not via this.state directly. The only time one should use this.state is in the constructor initializing the state.</p>\n\n<p>The passing of the property of onSearchSubmit with the handleSearchSubmit method as an argument is tricky at first and the key to this is remembering that now from Search we can call the onSearchSubmit method and that will trigger the parent’s (App) handleSearchSubmit method.</p>\n\n<p>Now when you submit the form you should get a console log message with the value that was submitted.</p>\n\n<p>It’s time for us to start building our Artist and RelatedArtist components. The RelatedArtist component will map out the array of the related Artist to our searched artist. To start, we’re just going to use some fake data rather than worrying about making a call to the Spotify API. Inside of src/index.js we are going to initialize a state with a fake searched artist and an array of related artists.<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">constructor(props) {\n        super(props)\n        this.state = {\n            searchedArtist: {\n                    name: 'My Band 1',\n                    genres: ['genre 1','genre 2','genre 3'],\n                    image: 'http://fakeimg.pl/250x100/'\n            },\n            relatedArtists: [\n                {\n                    name: 'Fake Band 1',\n                    genres: ['genre 1','genre 2','genre 3'],\n                    image: 'http://fakeimg.pl/250x100/'\n                },\n                {\n                    name: 'Fake Band 2',\n                    genres: ['genre 1','genre 2','genre 3'],\n                    image: 'http://fakeimg.pl/250x100/'\n                },\n                {\n                    name: 'Fake Band 3',\n                    genres: ['genre 1','genre 2','genre 3'],\n                    image: 'http://fakeimg.pl/250x100/'\n                }\n            ]\n        }\n    }\n</code></pre>\n\n<p>Now we can create our individual artist component which will be used to represent the searched artist and as the individuals in the RelatedArtists component.</p>\n\n<p>In src/components/ create a new file called Artist.js<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\n\nlet Artist = ({ artist }) =&gt; {\n    return(\n        &lt;div&gt;\n            &lt;a href={ artist.href }&gt; &lt;h2&gt;{ artist.name }&lt;/h2&gt;&lt;/a&gt;\n                &lt;img src={ artist.image } /&gt;}\n                &lt;ul&gt;\n                    {artist.genres.map(g =&gt;\n                        &lt;li key={Math.random()}&gt;{g}&lt;/li&gt;\n                    )}\n                &lt;/ul&gt;\n\n        &lt;/div&gt;\n    )\n}\n\nexport default Artist</code></pre>\n\n<p>This looks somewhat like our other components, but what is going on with const Artist = ({ artist }) =&gt; { ?!? In React this is called a stateless functional component. These types of components have no need to know about the current state of our application and all they need to do is display the data that has been passed to them. They are also referred to as presentational components. To read more about stateless functional components I recommend this <a href=\"http://frontendinsights.com/stateless-functional-components/\">article </a></p>\n\n<p>The Math.random() being used above is to prevent React from warning about an item in a mapped array not having a key. Generally you should try to use an actual id property for your element rather than a random key value</p>\n\n<p>In src/components/ create a new file called RelatedArtists.js</p>\n\n<pre>\n<code class=\"language-javascript\">import React from 'react'\nimport Artist from './Artist'\n\nconst RelatedArtists = ({ relatedArtists }) =&gt; {\n        return(\n            &lt;div&gt;\n                &lt;div&gt;\n                    {relatedArtists.map( artist =&gt;\n                        &lt;Artist key={Math.random()} artist={ artist } /&gt;)\n                    }\n                &lt;/div&gt;\n            &lt;/div&gt;\n        )\n}\n\nexport default RelatedArtists;\n</code></pre>\n\n<p>RelatedArtists is simply taking in the related artists passed in from index.js and mapping them to instances of Artist.</p>\n\n<p>Now when we visit http://localhost:3000/ we should see the following the list of Fake artists.</p>\n\n<p>Let’s start to get some real data into our application using the Spotify API.<br />\n </p>\n\n<p><meta charset=\"utf-8\" /><b id=\"docs-internal-guid-90b1267c-6012-84df-2089-57942bccdf25\">APIs and AJAX requests</b></p>\n\n<p>First thing we’ll need is a library for making AJAX request. There are quite a few out there including isomorphic-fetch, axios, superagent and more. For this project we’re going to use axios.<br />\nInstall axios with <br />\n </p>\n\n<pre>\n<code class=\"language-bash\">npm install axios --save</code></pre>\n\n<p>Then import fetch in index.js</p>\n\n<pre>\n<code class=\"language-javascript\">import axios from ‘axios’</code></pre>\n\n<p>We’re going to need to make two separate calls to the Spotify API, one for getting the <a href=\"https://developer.spotify.com/web-api/console/get-search-item/\">artist’s id </a>and a second to search for the related artist </p>\n\n<p>We can clear out the fake data we entered in the App component’s state, but after doing so we’ll get an error about trying to map an unknown property. To remedy this issue I added a new property to the state called ready and initialized it to false. This make the this.state in the constructor look like this:<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">this.state = {\n            ready: false,\n            searchedArtist: '',\n            relatedArtists: []\n        }</code></pre>\n\n<p>Now we can use this property and a little bit of logic to prevent React from trying to render the searchedArtist and the RelatedArtists. Alternatively you could check if relatedArtists and searchedArtists were empty.<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">  {!this.state.ready ? &lt;span&gt;Search for something&lt;/span&gt; :\n                 &lt;div&gt;\n                    &lt;div &gt;\n                        &lt;Artist artist={this.state.searchedArtist}/&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"row\"&gt;\n                        &lt;div&gt;\n                            &lt;RelatedArtists relatedArtists={this.state.relatedArtists} /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                }\n</code></pre>\n\n<p>The handleSearchSubmit is going to change quite a bit now. So I’m going to go over the changes piece by piece.</p>\n\n<pre>\n<code class=\"language-javascript\">handleSearchSubmit(term){\n       axios.get(`https://api.spotify.com/v1/search?q=${term}&amp;type=artist`)\n       .then((result) =&gt; {\n            const searchedArtist = result.data.artists.items[0]\n            this.setState({'searchedArtist': searchedArtist})\n       })\n</code></pre>\n\n<p>In this section we are making our first axios.get request to get the artist name related to the term that was submitted in the Search component. Axios is a <a href=\"https://davidwalsh.name/promises\">promise </a>  based HTTP client which means we can write asynchronous . In this case, when the promise is resolved we will set the state with the top result of the searched term. After that has be another result for the related artists.</p>\n\n<pre>\n<code class=\"language-javascript\">.then((result) =&gt; {\n            axios.get(`https://api.spotify.com/v1/artists/${ this.state.searchedArtist.id }/related-artists`)\n            .then((results) =&gt; {\n            const relatedArtists = results.data.artists\n            this.setState({'relatedArtists': relatedArtists})\n        })\n</code></pre>\n\n<p>So then after the first request has completed we can fire the next get request for the related artists based on the searched artist’s id. Then when that has been resolved we can use the results of that request to set the state’s related artists. Now we just need to signal to the application we are ready to render.</p>\n\n<pre>\n<code class=\"language-javascript\">.then(() =&gt; {\n            this.setState({'ready': true})\n        })</code></pre>\n\n<p>And it’s as simple as that. The fat arrow function being used () =&gt; is keeping the context of this so that we may use the correct this.state. This was also being used in the above two then statements as well.</p>\n\n<p>Now that we have our results, we can add a last small piece to the Artist component, the top image if they have one at all. We’ll do another conditional check on the array of images, and if the artist has any we’ll present the top one, otherwise show some text. The image will also have some inline style to resize it.</p>\n\n<pre>\n<code class=\"language-javascript\">const Artist = ({ artist }) =&gt; {\n    return(\n        &lt;div&gt;\n            &lt;a href={ artist.href }&gt; &lt;h2&gt;{ artist.name }&lt;/h2&gt;&lt;/a&gt;\n                {!artist.images.length ? &lt;p&gt;No Image Available&lt;/p&gt; : &lt;img src={ artist.images[0].url } style={{ \n                    height: 100, width: 100\n                }} /&gt;}\n                &lt;ul&gt;\n                    {artist.genres.map(g =&gt;\n                        &lt;li key={Math.random()}&gt;{g}&lt;/li&gt;\n                    )}\n                &lt;/ul&gt;\n\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n\n<p> </p>\n\n<p><meta charset=\"utf-8\" /><b id=\"docs-internal-guid-90b1267c-6016-56ac-4733-3d43eecefce7\">Adding Twitter Bootstrap for styling</b></p>\n\n<p>First thing we need to do is download all the remaining libraries.</p>\n\n<pre>\n<code class=\"language-bash\">npm install bootstrap react-bootstrap --save\nnpm install css-loader style-loader file-loader url-loader --save-dev\n</code></pre>\n\n<p>Then in webpack.config.dev add the following in the module section<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">module: {\n    // loaders allow for preprocessing of files\n    loaders: [\n      { test: /\\.js$/, exclude: /node_modules/, loaders: ['babel-loader'] }, // preprocessing the .js files with babel-loader\n       // Used for Bootstrap Less Source Files\n      { test: /\\.less/, loader: 'style-loader!css!less-loader' },\n      // Used for Bootstrap Less Source Files\n      { test: /\\.css/, loader: 'style-loader!css-loader' },\n      // Used for Bootstrap Glyphicon Fonts\n      { test: /\\.(woff2|woff|ttf|svg|eot)$/, loader: 'file-loader' }\n    ]\n  }\n</code></pre>\n\n<p>Then in src/index.js add the following</p>\n\n<pre>\n<code class=\"language-javascript\">import Bootstrap from 'bootstrap/dist/css/bootstrap.css' </code></pre>\n\n<p>and you are ready to use Bootstrap classes.</p>\n\n<p>Now in the App component’s render method we can start adding some Bootstrap classes to the divs around the components. I’d like for the Search bar and SearchedArtist components centered and the RelatedArtists to be in a row of three.</p>\n\n<pre>\n<code class=\"language-javascript\">&lt;div className=\"react-artist-search container\"&gt;\n                &lt;div className=\"row\"&gt;\n                    &lt;Search onSearchSubmit={ this.handleSearchSubmit.bind(this) }/&gt;\n                &lt;/div&gt;\n                {!this.state.ready ? &lt;div className=\"row\"&gt;&lt;span className=\"col-lg-6 col-lg-push-3\"&gt;Search for something&lt;/span&gt;&lt;/div&gt; :\n                 &lt;div&gt;\n                    &lt;div className=\"row\"&gt;\n                        &lt;div className=\"col-lg-6 col-lg-push-3\"&gt;\n                            &lt;h3&gt;Searched Artist&lt;/h3&gt;\n                            &lt;Artist artist={this.state.searchedArtist} /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"row\"&gt;\n                        &lt;h4&gt;Related Artist&lt;/h4&gt;\n                        &lt;RelatedArtists relatedArtists={this.state.relatedArtists} /&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                }\n            &lt;/div&gt;\n</code></pre>\n\n<p>The tricky part will be for the RelatedArtists to be split into rows of three. The reason being is that we need to chunk the array of Artist results into groups of threes but the current RelatedArtists component renders all the results as one set. To accomplish this chunking method we can use the lodash ‘_’ library, which conveniently has a function called chunk. Fortunately it is possible to provide the map() function with the parameter of a function which can make the decision on how to render the mapped item, or in this case a set of items.</p>\n\n<pre>\n<code class=\"language-bash\">npm install lodash --save</code></pre>\n\n<p>Add </p>\n\n<pre>\n<code class=\"language-javascript\">import _ from ‘lodash’</code></pre>\n\n<p>to RelatedArtists.js.</p>\n\n<p>We start by adding</p>\n\n<pre>\n<code class=\"language-javascript\">let groups = _.chunk(relatedArtists, 4);</code></pre>\n\n<p>To chunk the array of objects into fours. Now with groups each mapped into another function which will wrap the group into a row.</p>\n\n<pre>\n<code class=\"language-javascript\"> return(\n        &lt;div&gt;\n            {groups.map(renderRow)}\n        &lt;/div&gt;\n    )\n</code></pre>\n\n<p>And the renderRow function will look like this: </p>\n\n<pre>\n<code class=\"language-javascript\">function renderRow(row) {\n        return(\n            &lt;div className=\"row\"&gt;\n                { row.map(renderItem) } \n            &lt;/div&gt;\n        )\n    }\n</code></pre>\n\n<p>And of course each of the items are Artist components which are wrapped with a col-sm-3. The renderItem function looks like this.<br />\n </p>\n\n<pre>\n<code class=\"language-javascript\">function renderItem(item) {\n        return(\n            &lt;div className=\"col-sm-3\"&gt;\n                &lt;Artist artist={item} /&gt;\n            &lt;/div&gt;\n        )\n    }\n</code></pre>\n\n<p>Now the app is somewhat presentable!</p>\n\n<p>The above code is located <a href=\"https://bitbucket.org/troy_kearney/react-artist-search\">here</a>. Use the ‘react-only’ branch for this tutorial.</p>\n",
      "field_tags": [],
      "field_image": [],
      "uid": {
        "id": "afd53424-4dd4-4b18-bd3a-c2332d3d27bc",
        "display_name": "Troy Kearney"
      }
    },
    {
      "title": "Drupal pre-reqs: What you need to know before you start learning Drupal",
      "nid": 144,
      "alias": "/article/drupal-pre-reqs-what-you-need-know-you-start-learning-drupal",
      "slug": "drupal-pre-reqs-what-you-need-know-you-start-learning-drupal",
      "body": "<p>I gave a presentation on <a href=\"http://drupalcampatlanta.com/2016/sessions/drupal-pre-reqs-what-you-need-know-you-start-learning-drupal\"><em>Drupal pre-reqs: What you need to know before you start learning Drupal</em> at <strong>DrupalCamp Atlanta</strong></a> on October 22nd, 2016. See below for the abstract of the presentation, and all the resources, including the slides and screencast videos.</p>\n\n<p><strong>Abstract</strong></p>\n\n<p>Our business (SpinSpire) depends on training students and beginners on Drupal, and turning them into productive Drupal developers. Over the years, we have gone through this process dozens of times, and have identified the key skills that make the difference between success and failure in learning Drupal.</p>\n\n<p>The topics include:</p>\n\n<ul>\n\t<li>Motivation: Why you should learn Drupal?</li>\n\t<li>Philosophical background: How to think like a developer?</li>\n\t<li>What to expect as a Drupal developer, themer or site-builder?</li>\n\t<li>How to be productive in Linux: command line, editors, grep/find, etc.</li>\n\t<li>SSH: ssh-keys, scp/sftp, rsync, port forwarding/tunneling</li>\n\t<li>HTML, CSS, LESS/SASS</li>\n\t<li>JavaScript: jQuery</li>\n\t<li>Development Tools: Chrome, NetBeans, HeidiSQL, Git</li>\n\t<li>Next steps: Where to start learning Drupal development.</li>\n</ul>\n\n<p><strong>Resources</strong></p>\n\n<ol>\n\t<li>View the <a href=\"https://docs.google.com/presentation/d/1P6-vWPLPI9R4IMwgD1N1tGWdGtUQ9ArYLKmKCLdn65Y/edit?usp=sharing\" target=\"_blank\">presentation slides here</a>.</li>\n\t<li>If you need a cloud VM, you can use our affiliate link to <a href=\"http://www.vultr.com/?ref=6831416\" target=\"_blank\">Vultr</a> :-)</li>\n\t<li><a href=\"https://www.youtube.com/playlist?list=PLKUl5gVuvLjiZ79rfYwpM_Tz9muxKOkJw\">Drupal 7 crash course: screencasts</a></li>\n\t<li><a href=\"https://www.youtube.com/playlist?list=PLKUl5gVuvLjg3W_eSwiBpsYSTF4_iF5Cr\">Drupal 8 for Drupal devs: screencasts</a></li>\n\t<li>Subscribe to our <a href=\"https://www.youtube.com/spinspire\">YouTube channel</a>.</li>\n</ol>\n\n<p>We love to hear from you. Use the contact form to ask any questions you have.</p>\n",
      "changed": "2016-10-31T20:18:36+00:00",
      "created": "2016-10-22T13:43:57+00:00",
      "summary": "<p>I gave a presentation on <a href=\"http://drupalcampatlanta.com/2016/sessions/drupal-pre-reqs-what-you-need-know-you-start-learning-drupal\"><em>Drupal pre-reqs: What you need to know before you start learning Drupal</em> at <strong>DrupalCamp Atlanta</strong></a> on October 22nd, 2016. See below for the abstract of the presentation, and all the resources, including the slides and screencast videos.</p>\n\n<p><strong>Abstract</strong></p>\n\n<p>Our business (SpinSpire) depends on training students and beginners on Drupal, and turning them into productive Drupal developers. Over the years, we have gone through this process dozens of times, and have identified the key skills that make the difference between success and failure in learning Drupal.</p>\n\n<p>The topics include:</p>\n\n<ul>\n\t<li>Motivation: Why you should learn Drupal?</li>\n\t<li>Philosophical background: How to think like a developer?</li>\n\t<li>What to expect as a Drupal developer, themer or site-builder?</li>\n\t<li>How to be productive in Linux: command line, editors, grep/find, etc.</li>\n\t<li>SSH: ssh-keys, scp/sftp, rsync, port forwarding/tunneling</li>\n\t<li>HTML, CSS, LESS/SASS</li>\n\t<li>JavaScript: jQuery</li>\n\t<li>Development Tools: Chrome, NetBeans, HeidiSQL, Git</li>\n\t<li>Next steps: Where to start learning Drupal development.</li>\n</ul>\n\n<p><strong>Resources</strong></p>\n\n<ol>\n\t<li>View the <a href=\"https://docs.google.com/presentation/d/1P6-vWPLPI9R4IMwgD1N1tGWdGtUQ9ArYLKmKCLdn65Y/edit?usp=sharing\" target=\"_blank\">presentation slides here</a>.</li>\n\t<li>If you need a cloud VM, you can use our affiliate link to <a href=\"http://www.vultr.com/?ref=6831416\" target=\"_blank\">Vultr</a> :-)</li>\n\t<li><a href=\"https://www.youtube.com/playlist?list=PLKUl5gVuvLjiZ79rfYwpM_Tz9muxKOkJw\">Drupal 7 crash course: screencasts</a></li>\n\t<li><a href=\"https://www.youtube.com/playlist?list=PLKUl5gVuvLjg3W_eSwiBpsYSTF4_iF5Cr\">Drupal 8 for Drupal devs: screencasts</a></li>\n\t<li>Subscribe to our <a href=\"https://www.youtube.com/spinspire\">YouTube channel</a>.</li>\n</ol>\n\n<p>We love to hear from you. Use the contact form to ask any questions you have.</p>\n",
      "field_tags": [
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "6714d957-bb22-447a-8395-02c16f2f5daa",
          "tid": 5,
          "name": "training",
          "alias": "/term/training"
        }
      ],
      "field_image": [
        {
          "id": "556c8901-e3bd-4748-9146-56f1988e11cc",
          "alt": "DrupalCamp Atlanta front page screenshot",
          "title": "DrupalCamp Atlanta front page screenshot",
          "url": "/sites/default/files/2016-10/dcatl-frontpage-screenshot.png",
          "fid": 248
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Florida DrupalCamp 2016 Presentation: Drupal 8 development for Drupal 7 developers",
      "nid": 117,
      "alias": "/article/florida-drupalcamp-2016-presentation-drupal-8-development-drupal-7-developers",
      "slug": "florida-drupalcamp-2016-presentation-drupal-8-development-drupal-7-developers",
      "body": "<p>On March 5th, 2016, SpinSpire team presented \"<a href=\"https://www.fldrupal.camp/sessions/approved/florida-drupalcamp-2016/development-performance/drupal-8-development-drupal-7\" target=\"_blank\">Drupal 8 development for Drupal 7 developers</a>\" at <a href=\"https://www.fldrupal.camp/\" target=\"_blank\">Florida DrupalCamp</a>.</p>\n\n<ul>\n\t<li>Presentation slides are <a href=\"https://docs.google.com/presentation/d/18mc9tT81U656Hef27PX4F1vy4oMXIb4vHkyhHmUeuQY/edit?usp=sharing\" target=\"_blank\">available on Google Docs</a>.</li>\n\t<li>All sample code is available on <a href=\"https://bitbucket.org/spinspire/d8-foo-module.git\" target=\"_blank\">BitBucket</a></li>\n\t<li>Screencast videos of the coding sessions are available on the <a href=\"http://youtube.com/spinspire\" target=\"_blank\">SpinSpire YouTube Channel</a><span>.</span></li>\n</ul>\n",
      "changed": "2016-10-03T17:10:57+00:00",
      "created": "2016-03-06T18:22:02+00:00",
      "summary": "<p>On March 5th, 2016, SpinSpire team presented \"<a href=\"https://www.fldrupal.camp/sessions/approved/florida-drupalcamp-2016/development-performance/drupal-8-development-drupal-7\" target=\"_blank\">Drupal 8 development for Drupal 7 developers</a>\" at <a href=\"https://www.fldrupal.camp/\" target=\"_blank\">Florida DrupalCamp</a>.</p>\n\n<ul>\n\t<li>Presentation slides are <a href=\"https://docs.google.com/presentation/d/18mc9tT81U656Hef27PX4F1vy4oMXIb4vHkyhHmUeuQY/edit?usp=sharing\" target=\"_blank\">available on Google Docs</a>.</li>\n\t<li>All sample code is available on <a href=\"https://bitbucket.org/spinspire/d8-foo-module.git\" target=\"_blank\">BitBucket</a></li>\n\t<li>Screencast videos of the coding sessions are available on the <a href=\"http://youtube.com/spinspire\" target=\"_blank\">SpinSpire YouTube Channel</a><span>.</span></li>\n</ul>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "1a4d9760-6a87-4de7-814c-ab747978f8b8",
          "alt": "fldrupalcamp-logo.png",
          "title": "fldrupalcamp-logo.png",
          "url": "/sites/default/files/field/image/fldrupalcamp-logo.png",
          "fid": 227
        }
      ],
      "uid": {
        "id": "98695740-449a-40fb-85f1-4ad13e3633c6",
        "uid": 33,
        "display_name": "Christian Crawford",
        "name": "Christian Crawford",
        "bio": "<ul>\n\t<li>Drupal 7 &amp; 8 site building, module development, theming</li>\n\t<li>Java and C</li>\n\t<li>SQL (MySQL and Oracle), NoSQL (MongoDB)</li>\n\t<li>HTML, CSS, SASS/LESS</li>\n\t<li>ReactJS, AngularJS, jQuery, NodeJS, ES6</li>\n\t<li>Nginx and Apache Stacks</li>\n</ul>",
        "alias": "/user/christian-crawford"
      }
    },
    {
      "title": "Event Sourcing as replacement for CRUD",
      "nid": 143,
      "alias": "/article/event-sourcing-replacement-crud",
      "slug": "event-sourcing-replacement-crud",
      "body": "<p>Most developers are familiar with <a href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">CRUD</a> (create-read-update-delete) model of data storage in business applications. It is a simple model that has served us well so far. But the problem with <strong>CRUD</strong> is that it allows users (or developers) to modify history (change past). That might be okay for some applications (a discussion board, say), but not for all, such as financial accounting. In this article is a very gentle introduction to an alternative model, <strong>Event Sourcing</strong>. There are more detailed introductions <a href=\"http://adaptechsolutions.net/eventsourcing-why-are-people-into-that/\">elsewhere</a>, but they may not be as gentle (Subjective, I know).</p>\n\n<p>For example, one of SpinSpire's financial clients has an application that currently uses CRUD model for accounting financial transactions. The problem is that the application allows users to go back and adjust (modify) financial transactions that have already happened, reconciled and reported to the relevant authorities (regulators). So, in effect, you're changing the past. Now, you may say, that \"Hey, we need to be able to update the data as new and more accurate information becomes available!\". True. But the right way would be if the database had two entries - one entered originally, and another one entered later that adds the adjustment amount. And both the entries have separate timestamps on them. So if you queried the database with an \"as-of\" time, you'll get one answer <em>before</em> the second entry, and a different answer <em>after</em> it.</p>\n\n<p>The above is what Event Sourcing (ES) accomplishes. In CRUD, the database simply stores that transaction amounts as they stand <em>now</em>. But in ES, the database is a journal of transaction entries with a timestamp that can be sequenced up to any \"as-of\" time to reflect the situation as it was at that time. Implementing this (ES) is not easy. But for mission-critical systems where historical accuracy is paramount, there's much of an alternative.</p>\n\n<p>In a later update, I'll try to go into the details of ES and how to implement it. In the meanwhile, checkout some of the resources below ...</p>\n\n<ul>\n\t<li><a href=\"http://geteventstore.com/\">EventStore</a>, the event sourcing database</li>\n\t<li><a href=\"http://docs.geteventstore.com/introduction/3.9.0/event-sourcing-basics/\">ES Basics for developers</a></li>\n\t<li><a href=\"https://news.ycombinator.com/item?id=12627944\">ES Discussion on HN</a></li>\n</ul>",
      "changed": "2016-10-03T16:58:50+00:00",
      "created": "2016-10-03T16:25:58+00:00",
      "summary": "Most developers are familiar with CRUD (create-read-update-delete) model of data storage in business applications. It is a simple model that has served us well so far. But the problem with CRUD is that it allows users (or developers) to modify history (change past). That might be okay for some applications (a discussion board, say), but not for all, such as financial accounting. In this article is a very gentle introduction to an alternative model, Event Sourcing.",
      "field_tags": [],
      "field_image": [],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Java: From Basics to RESTful Services",
      "nid": 108,
      "alias": "/article/java-basics-restful-services",
      "slug": "java-basics-restful-services",
      "body": "<p><span>Why Java? Hundreds of reasons can be found with a single google search, but we all know Java language is not perfect, and so for every reason for Java, we can find an opposite. But the following two reasons are enough to convince anyone: leading development platform (brings business) and JVM. The Java platform will not go anywhere in the near future, and languages like Groovy will make certain of that. \"Groovy is like a super version of Java. It can leverage Java's enterprise capabilities but also has cool productivity features like closures, builders and dynamic typing. If you are a developer, tester or script guru, you have to love Groovy.\"</span></p>\n\n<p>So now that you know you can not escape Java, let’s get started! For this tutorial I will be using NetBeans IDE, I will also show you how to manually compile Java code and make JAR files with shell commands. On the way I will also explain some general OOP concepts and Java specific concepts.</p>\n\n<p>Fire up NetBeans and follow the below steps to create a simple Java project:</p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p>File &gt; New Project,</p>\n\t</li>\n\t<li>\n\t<p>Choose Java from categories, click next</p>\n\t</li>\n\t<li>\n\t<p>Give a project name, i.e. “hello”</p>\n\t</li>\n\t<li>\n\t<p>Click finish</p>\n\t</li>\n</ul>\n\n<p>Delete the comments for now. This is how your code should look like:</p>\n\n<pre>\n<code class=\"language-java\">package hello;\n\npublic class Hello {\n  public static void main(String[] args) {\n  }\n}</code></pre>\n\n<p>The first line means that the below class is under the package “hello”. One package will most likely contain many classes. You will discover later why and how packages are used to restrict/allow access to other methods, (known as functions in conventional programming languages) classes, modularity etc.</p>\n\n<p>Public class means that the class basically has no access restrictions, (as opposed to, for example, a private class) it is visible to all other classes that might exist even in different packages. Now what is a class to begin with? You can guess from the word itself, classes are used to group things (objects) of same type. Think of examples such as a class names Animals, for example, will contain various animals, a Car class will contain various brands and models and so on.</p>\n\n<p>Inside our class we have a public static void method. Void means this method will return nothing, so anything that happens in it, happens now and will not be later used by some other methods (for example some sort of a computational result returned). For now the most important thing you might want to know about a static method is that it can be called without an instance of an object (the class). Meaning, all the lines of code inside the class do not have to be run in order to be able to use the static method in other classes. So if you think you want to use the method elsewhere without the instance of the object itself, use the static keyword which will result in better performance of your code. In this case, the reason the main method is static is because it is the method that runs first before thousands of classes in a big application. This means that you do not have an instance of an object yet, so it must be static. Note that many of these keywords apply to classes, methods and even variables interchangeably, providing similar meaning in each of the cases.</p>\n\n<p>To print out “Hello” call the System.out.println() method inside your main with the hello string passed in as a parameter:</p>\n\n<pre>\n<code class=\"language-java\">package hello;\n\npublic class Hello {\n  public static void main(String[] args) {\n    System.out.println(\"Hello\");\n  }\n}</code></pre>\n\n<p>Click on the green run project button and you should have a successful output “Hello”.</p>\n\n<p>Consider an alternative where we call a static method inside the class</p>\n\n<pre>\n<code class=\"language-java\">package hello;\n\npublic class Hello {\n  public static void main(String[] args) {\n    helloMethod(); // calling the method declared below\n  }\n\n  static void helloMethod() {\n    System.out.println(\"Hello\");\n  }\n}</code></pre>\n\n<p>Now that we learned a bit of Java, let’s discover some of the command line tools to do simple manual compilation. Jar files talk about the structure of Java projects and develop an idea how you might end up using the command line versus the IDE and just for the sake of understanding things better. Most of the IDE’s come with a built in command line tool for a reason. If you do not have the java path variable set up (windows machines) follow <a href=\"https://www.java.com/en/download/help/path.xml\">these</a> steps to proceed. Also, if on windows, consider using a cmd tool such as <a href=\"http://git-scm.com/downloads\"><span>Git Bash</span></a><span> or other unix type cmd’s for windows.</span></p>\n\n<p>Open the shell and change directory to your Java project. To do that quickly, right click on the project in your IDE, go to properties, sources to see the full path.</p>\n\n<p>Here is how it might look:</p>\n\n<pre class=\"true; codetag\">\ncd \"C:\\Users\\USERNAME\\Documents\\NetBeansProjects\\Hello\"\n</pre>\n\n<p>You should see the .java file in this directory. To compile run the following command</p>\n\n<pre class=\"true; codetag\">\njavac Hello.java</pre>\n\n<p>Let’s create a jar file from the class file we have. Jars are are basically archived java projects. Run the following command:</p>\n\n<pre class=\"true; codetag\">\njar -cf hello.jar Hello.class</pre>\n\n<p>This will make a jar file in the current directory. The options -cf stand for create and specify file name. Run jar -h to see all available options.</p>\n\n<p>To have a better touch and feel what can be done with the command line, let’s change our code and pass in some arguments. We’ll write a simple loop to iterate through our array of arguments that will be printed after “Hello”:</p>\n\n<pre>\n<code class=\"language-java\">package hello;\n\npublic class Hello {\n  public static void main(String[] args) {\n    System.out.println(\"Hello\");\n    for(int i=0; i&lt;args.length; i++) {\n      System.out.println(args[i]);\n    }\n  }\n}</code></pre>\n\n<p>Compile the program and run</p>\n\n<pre class=\"true; codetag\">\njava Hello arg1 arg2 arg3</pre>\n\n<p>Make sure you are in the directory where your class file is. If you are not use the -cp (classpath option):</p>\n\n<pre class=\"true; codetag\">\njava -cp &lt;path&gt; Hello &lt;args&gt;\n</pre>\n\n<p>Enough of the basics. Dive in headfirst and create your first RESTful Services. Follow the articles written here: <a href=\"https://spinspire.com/article/creating-restful-service-java-and-jersey-netbeans\">Creating a RESTful service with Java and Jersey with Netbeans</a>, <a href=\"https://spinspire.com/article/jpa-using-netbeans-and-mysql\">JPA Using NetBeans and MySQL</a>, and to solidify the knowledge and use both read <a href=\"https://spinspire.com/article/combining-jpa-and-jax-rs-create-restful-service\">Combining JPA and JAX-RS to create RESTful service</a>.</p>\n",
      "changed": "2016-07-08T15:52:20+00:00",
      "created": "2015-01-12T19:34:41+00:00",
      "summary": "<p><span>Why Java? Hundreds of reasons can be found with a single google search, but we all know Java language is not perfect, and so for every reason for Java, we can find an opposite. But the following two reasons are enough to convince anyone: leading development platform (brings business) and JVM. The Java platform will not go anywhere in the near future, and languages like Groovy will make certain of that. \"Groovy is like a super version of Java. It can leverage Java's enterprise capabilities but also has cool productivity features like closures, builders and dynamic typing. If you are a developer, tester or script guru, you have to love Groovy.\"</span></p>\n\n<p>So now that you know you can not escape Java, let’s get started! For this tutorial I will be using NetBeans IDE, I will also show you how to manually compile Java code and make JAR files with shell commands. On the way I will also explain some general OOP concepts and Java specific concepts.</p>\n\n<p>Fire up NetBeans and follow the below steps to create a simple Java project:</p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p>File &gt; New Project,</p>\n\t</li>\n\t<li>\n\t<p>Choose Java from categories, click next</p>\n\t</li>\n\t<li>\n\t<p>Give a project name, i.e. “hello”</p>\n\t</li>\n\t<li>\n\t<p>Click finish</p>\n\t</li>\n</ul>\n\n<p>Delete the comments for now. This is how your code should look like:</p>\n\n<pre>\n<code class=\"language-java\">package hello;\n\npublic class Hello {\n  public static void main(String[] args) {\n  }\n}</code></pre>\n\n<p>The first line means that the below class is under the package “hello”. One package will most likely contain many classes. You will discover later why and how packages are used to restrict/allow access to other methods, (known as functions in conventional programming languages) classes, modularity etc.</p>\n\n<p>Public class means that the class basically has no access restrictions, (as opposed to, for example, a private class) it is visible to all other classes that might exist even in different packages. Now what is a class to begin with? You can guess from the word itself, classes are used to group things (objects) of same type. Think of examples such as a class names Animals, for example, will contain various animals, a Car class will contain various brands and models and so on.</p>\n\n<p>Inside our class we have a public static void method. Void means this method will return nothing, so anything that happens in it, happens now and will not be later used by some other methods (for example some sort of a computational result returned). For now the most important thing you might want to know about a static method is that it can be called without an instance of an object (the class). Meaning, all the lines of code inside the class do not have to be run in order to be able to use the static method in other classes. So if you think you want to use the method elsewhere without the instance of the object itself, use the static keyword which will result in better performance of your code. In this case, the reason the main method is static is because it is the method that runs first before thousands of classes in a big application. This means that you do not have an instance of an object yet, so it must be static. Note that many of these keywords apply to classes, methods and even variables interchangeably, providing similar meaning in each of the cases.</p>\n\n<p>To print out “Hello” call the System.out.println() method inside your main with the hello string passed in as a parameter:</p>\n\n<pre>\n<code class=\"language-java\">package hello;\n\npublic class Hello {\n  public static void main(String[] args) {\n    System.out.println(\"Hello\");\n  }\n}</code></pre>\n\n<p>Click on the green run project button and you should have a successful output “Hello”.</p>\n\n<p>Consider an alternative where we call a static method inside the class</p>\n\n<pre>\n<code class=\"language-java\">package hello;\n\npublic class Hello {\n  public static void main(String[] args) {\n    helloMethod(); // calling the method declared below\n  }\n\n  static void helloMethod() {\n    System.out.println(\"Hello\");\n  }\n}</code></pre>\n\n<p>Now that we learned a bit of Java, let’s discover some of the command line tools to do simple manual compilation. Jar files talk about the structure of Java projects and develop an idea how you might end up using the command line versus the IDE and just for the sake of understanding things better. Most of the IDE’s come with a built in command line tool for a reason. If you do not have the java path variable set up (windows machines) follow <a href=\"https://www.java.com/en/download/help/path.xml\">these</a> steps to proceed. Also, if on windows, consider using a cmd tool such as <a href=\"http://git-scm.com/downloads\"><span>Git Bash</span></a><span> or other unix type cmd’s for windows.</span></p>\n\n<p>Open the shell and change directory to your Java project. To do that quickly, right click on the project in your IDE, go to properties, sources to see the full path.</p>\n\n<p>Here is how it might look:</p>\n\n<pre class=\"true; codetag\">\ncd \"C:\\Users\\USERNAME\\Documents\\NetBeansProjects\\Hello\"\n</pre>\n\n<p>You should see the .java file in this directory. To compile run the following command</p>\n\n<pre class=\"true; codetag\">\njavac Hello.java</pre>\n\n<p>Let’s create a jar file from the class file we have. Jars are are basically archived java projects. Run the following command:</p>\n\n<pre class=\"true; codetag\">\njar -cf hello.jar Hello.class</pre>\n\n<p>This will make a jar file in the current directory. The options -cf stand for create and specify file name. Run jar -h to see all available options.</p>\n\n<p>To have a better touch and feel what can be done with the command line, let’s change our code and pass in some arguments. We’ll write a simple loop to iterate through our array of arguments that will be printed after “Hello”:</p>\n\n<pre>\n<code class=\"language-java\">package hello;\n\npublic class Hello {\n  public static void main(String[] args) {\n    System.out.println(\"Hello\");\n    for(int i=0; i&lt;args.length; i++) {\n      System.out.println(args[i]);\n    }\n  }\n}</code></pre>\n\n<p>Compile the program and run</p>\n\n<pre class=\"true; codetag\">\njava Hello arg1 arg2 arg3</pre>\n\n<p>Make sure you are in the directory where your class file is. If you are not use the -cp (classpath option):</p>\n\n<pre class=\"true; codetag\">\njava -cp &lt;path&gt; Hello &lt;args&gt;\n</pre>\n\n<p>Enough of the basics. Dive in headfirst and create your first RESTful Services. Follow the articles written here: <a href=\"https://spinspire.com/article/creating-restful-service-java-and-jersey-netbeans\">Creating a RESTful service with Java and Jersey with Netbeans</a>, <a href=\"https://spinspire.com/article/jpa-using-netbeans-and-mysql\">JPA Using NetBeans and MySQL</a>, and to solidify the knowledge and use both read <a href=\"https://spinspire.com/article/combining-jpa-and-jax-rs-create-restful-service\">Combining JPA and JAX-RS to create RESTful service</a>.</p>\n",
      "field_tags": [
        {
          "id": "4caa765e-3487-413c-80e5-c818ee9ef164",
          "tid": 89,
          "name": "java basics",
          "alias": "/term/java-basics"
        },
        {
          "id": "65e24887-606d-40f3-88f3-d6b97b10dc10",
          "tid": 54,
          "name": "java",
          "alias": "/term/java"
        },
        {
          "id": "d46fbfc9-77bd-4728-96b4-adbb7d3aa544",
          "tid": 90,
          "name": "RESTful services",
          "alias": "/term/restful-services"
        }
      ],
      "field_image": [
        {
          "id": "894b04de-011b-4e18-94ef-d084d8861590",
          "alt": "Java logo",
          "title": "Java logo",
          "url": "/sites/default/files/field/image/java_most_basics_you_must_know-300x190.png",
          "fid": 175
        }
      ],
      "uid": {
        "id": "791ffe43-66bd-4375-815d-da7aac195cdd",
        "display_name": "Dmitry Boychev"
      }
    },
    {
      "title": "Getting started with Jython",
      "nid": 109,
      "alias": "/article/getting-started-jython",
      "slug": "getting-started-jython",
      "body": "<p><span>As you can guess from the name Jython is an amalgamation of the Python and Java programming languages. It is one of three implementations of the Python language, the other two being CPython and IronPython (.Net). Jython is one of the most mature JVM languages that is available on the Java platform. The language was created in 1997 to replace the C language with Java for performance-intensive code accessed by python programs. The language provides many benefits from both of the languages including java byte code utilization, reusability of java classes and interfaces, Python’s simplified syntax, and many more. Since it is a JVM language it can maintain Java’s “Compile once, run anywhere” slogan and also has access to thousands of Java’s API libraries. The language can be written as standalone python files or they can be integrated into java classes themselves, with a bit of work. Knowledge of the Python language is not necessary to understand this article, as long as you are familiar with some programming language since the basic concept are pretty universal.</span></p>\n\n<p>In order to use the language you need to go download Jython. You can download the latest release from <a href=\"http://www.jython.org/\">jython.org</a>. Once you’ve downloaded the jar you can navigate to where you downloaded it and double-click it. An installation wizard will then guide you through the process. After you have finished installing you should add the jython.sh to your PATH variable.</p>\n\n<p><span>Now we can begin writing our code. We’ll begin our introduction with the most basic of all programs, a Hello World. You can create a file called hello.py and add the following line to the program</span></p>\n\n<pre class=\"true; codetag\">\nprint “Hello World!”</pre>\n\n<p><span>Save the file and open your terminal shell. Navigate to where you’ve saved the file and run jython hello.py</span></p>\n\n<p><span>If you’ve done everything right so far you should see “Hello World!” on the screen.</span></p>\n\n<p><span>Next we will show a simple bill calculator example which uses variables, functions, and formatted strings:</span></p>\n\n<pre>\n<code class=\"language-python\">def calc_bill(amount): \n  tax = amount * 0.07\n  tip = (tax + amount) * 0.15\n  total = amount + tax + tip \n  print “Tax: %f Tip: %f” % (tax, tip) \n  print “Total after tax and tip %f” % total\n\ncalc_bill(24.83)</code></pre>\n\n<p><span>All functions in python (and therefore Jython) begin with “def” followed by name, the parameters, and a colon. Variables in Python are typeless so you don’t need to provide one. Formatted strings look similar to they do any many other languages (d for integer, f for float, s for string, etc).  Whitespace is extremely important in the language. While there is no standard number of spaces, you must maintain the same spacing conventions for the entire block otherwise the interpreter will throw errors.</span></p>\n\n<p>One important data structure in Jython is the list. Lists are just like arrays in any language. They are index addressed and can be appended to or sliced apart. The following code shows a method that takes in some number and returns the squared values</p>\n\n<pre>\n<code class=\"language-python\">num_list = [2,3,4,5,6,7,8,9]\n\ndef squareNum(num_list):\n  squares = []\n  for num in num_list:\n    squares.append(num ** 2)\n  return squares\n\nprint squareNum(num_list)</code></pre>\n\n<p>As you can see the list is created with some values and then later on the square function is called with the list as the parameter. To add an item to a list you use the append method. Raising a number to a given power is denoted by double asterisk (number ** exponent). Along with lists there are structures called dictionaries in Python. These are addressed with key, value pairs as opposed to number indexes and are denoted with curly brackets.</p>\n\n<p><span>Now that we’ve got a basic foundation in the language we can move onto a more real world example, connecting to a database and accessing the records. When it comes to connecting to your database there are several options available, two of which will be covered today. The first is Jython’s DBI implementation zxJDBC, which is good for simple one-off scripts where portability is not a huge concern. The other option covered is using Java’s JDBC. As you will see there is a considerably less code needed to perform the same operations between the pure java implementations and the Jython versions:</span></p>\n\n<p>Java:</p>\n\n<pre>\n<code class=\"language-java\">import java.sql.*;\nimport java.util.*;\n\npublic class JDBCExample {\n public static void main(String[] args) throws Exception {\n   Class.forName(\"com.mysql.jdbc.Driver\");\n   Connection db = DriverManager.getConnection(\"jdbc:mysql://localhost/(dbName)/\", \"dbUserName\", \"dbPassword\");\n   Statement c = db.createStatement();\n   ResultSet rs = c.executeQuery(\"select * from events\");\n   while (rs.next()) {\n     List row = new ArrayList();\n     ResultSetMetaData meta = rs.getMetaData();\n     for(int i=0;i&lt;meta.getColumnCount();i++) {\n       int col = i+1;\n       int datatype = meta.getColumnType(col);\n       if (datatype == Types.INTEGER) {\n         row.add(new Integer(rs.getInt(col)));\n       } else {\n         row.add(rs.getString(col));\n       }\n     }\n     System.out.println(row);\n   }\n   rs.close();\n   c.close();\n   db.close();\n }</code></pre>\n\n<p>If you are familiar with Java this code should look quite familiar. The code connects to the database, makes a select query, and prints out the data</p>\n\n<p><br />\nJython (JDBC):</p>\n\n<pre>\n<code class=\"language-python\">from java.lang import Class\nfrom java.sql import DriverManager, SQLException\n\n DriverManager.registerDriver(Class.forName(com.mysql.jdbc.Driver).newInstance())\n conn=DriverManager.getConnection(“jdbc:mysql://localhost/dbName”, “username”, “password”)\n stmt=conn.createStatement()\n sql=\"select title from tix_section\"\n results=stmt.executeQuery(sql)\n _types = {Types.INTEGER:rs:getInt, Types.FLOAT:rs.getFloat}\n\n while results.next():\n   row = []\n   meta = results.getMetaData()\n   for i in range(meta.getColumnCount()):\n     col += 1\n     datatype = meta.getColumnType(col)\n     value = _types(datatype, results.getString)(col)\n     row.append.value\n     print tuple(row)\n\n statement.close()\n conn.close()</code></pre>\n\n<p>The code looks fairly similar to the plain Java. In Jython the keyword \"range\" provides a way to iterate the loops until it reaches the range.</p>\n\n<p><br />\nJython (zxJDBC):</p>\n\n<pre>\n<code class=\"language-python\">from com.ziclix.python.sql import zxJDBC\n\ndb = zxJDBC.connect(\"jdbc:mysql://localhost/dbName/\", \"userName\", “passowrd”, \"com.mysql.jdbc.Driver\")\nc = db.cursor()\nc.execute(\"select * from events\")\nfor row in c:\n print row\nc.close()\ndb.close()</code></pre>\n\n<p><br />\nThe first line connects to the database with the given parameters.</p>\n\n<p>The next line creates a cursor. Cursors wrap JDBC statements and resultsSet objects and make it easy for store and manipulate the resulting data in the pythonic way. There are two kinds of cursors, static and dynamic. Static cursors, the default, perform an iteration over the entire resultSet, whereas dynamic cursors iterate through on an as-needed basis.</p>\n\n<p>We will conclude by showing how to use your java code in your Jython program and vise versa.</p>\n\n<p>Beach.java</p>\n\n<pre>\n<code class=\"language-java\">public class Beach {\n\n    private String name;\n    private String city;\n\n\n    public Beach(String name, String city){\n        this.name = name;\n        this.city = city;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n}</code></pre>\n\n<p><br />\npythBeach.py</p>\n\n<pre>\n<code class=\"language-python\">import Beach\nbeach = Beach(\"South Beach\", \"Miami\")\nprint beach.getName() +\", \" + beach.getCity()</code></pre>\n\n<p>When you launch the program (\"jython beach.py\") you should see the values that you assigned to the name and city.</p>\n\n<p><br />\nUsing Jython modules (classes) in you Java programs involves a bit more work since the Python object must be coerced into a Java object. The most common way to doing this is to create object factories which convert them into something that Java can easily use. There are two main ways of going about the factory process, one involves making a factory for each object, and other other involves a more loosely coupled factory that can generically handle all of the objects.</p>\n\n<p>Creating a factory for each object has the advantage of being able to maintain complete awareness of the Jython object, meaning that you can pass in arguments directly into the constructor method and makes it very clear what is going on in the program for anyone to see. A disadvantage of this method is that it creates a lot of boilerplate code and this can become an issue if you start to have large numbers of Jython objects that need to be converted. The steps involved include creating the Jython object file with just some getter methods, a java interface to implement those getters, the java factory, which passes the Python object through the interpreter and converts it into a java object</p>\n\n<p>The loosely coupled factory can be generalized enough that it can be used with any Jython object, thus eliminating the large boilerplate coding portions from the one-to-one factory and also allows you to separate out the factory logic to do with it as you please. The coding process is similar to how it was for the previous implementation except for a few changes. In the python file you now need to add setters as well as getters, the interface file is still the same, and the factory once again passes the Jython object to the interpreter for coercion. Examples of these can be found <a href=\"http://www.jython.org/jythonbook/en/1.0/JythonAndJavaIntegration.html#using-jython-within-java-applications\">here</a>.</p>\n\n<p>If you would like to see more about J/Python basics or see more examples you can read through the free \"Definitive Guide to Jython\" found <a href=\"http://www.jython.org/jythonbook/en/1.0/LangSyntax.html\">here</a>. The books covers everything from the basics of the language to creating Swing UI driven application to web applications using servlets like Tomcat and Glassfish.</p>\n",
      "changed": "2016-07-08T15:46:03+00:00",
      "created": "2015-01-12T20:54:58+00:00",
      "summary": "<p><span>As you can guess from the name Jython is an amalgamation of the Python and Java programming languages. It is one of three implementations of the Python language, the other two being CPython and IronPython (.Net). Jython is one of the most mature JVM languages that is available on the Java platform. The language was created in 1997 to replace the C language with Java for performance-intensive code accessed by python programs. The language provides many benefits from both of the languages including java byte code utilization, reusability of java classes and interfaces, Python’s simplified syntax, and many more. Since it is a JVM language it can maintain Java’s “Compile once, run anywhere” slogan and also has access to thousands of Java’s API libraries. The language can be written as standalone python files or they can be integrated into java classes themselves, with a bit of work. Knowledge of the Python language is not necessary to understand this article, as long as you are familiar with some programming language since the basic concept are pretty universal.</span></p>\n\n<p>In order to use the language you need to go download Jython. You can download the latest release from <a href=\"http://www.jython.org/\">jython.org</a>. Once you’ve downloaded the jar you can navigate to where you downloaded it and double-click it. An installation wizard will then guide you through the process. After you have finished installing you should add the jython.sh to your PATH variable.</p>\n\n<p><span>Now we can begin writing our code. We’ll begin our introduction with the most basic of all programs, a Hello World. You can create a file called hello.py and add the following line to the program</span></p>\n\n<pre class=\"true; codetag\">\nprint “Hello World!”</pre>\n\n<p><span>Save the file and open your terminal shell. Navigate to where you’ve saved the file and run jython hello.py</span></p>\n\n<p><span>If you’ve done everything right so far you should see “Hello World!” on the screen.</span></p>\n\n<p><span>Next we will show a simple bill calculator example which uses variables, functions, and formatted strings:</span></p>\n\n<pre>\n<code class=\"language-python\">def calc_bill(amount): \n  tax = amount * 0.07\n  tip = (tax + amount) * 0.15\n  total = amount + tax + tip \n  print “Tax: %f Tip: %f” % (tax, tip) \n  print “Total after tax and tip %f” % total\n\ncalc_bill(24.83)</code></pre>\n\n<p><span>All functions in python (and therefore Jython) begin with “def” followed by name, the parameters, and a colon. Variables in Python are typeless so you don’t need to provide one. Formatted strings look similar to they do any many other languages (d for integer, f for float, s for string, etc).  Whitespace is extremely important in the language. While there is no standard number of spaces, you must maintain the same spacing conventions for the entire block otherwise the interpreter will throw errors.</span></p>\n\n<p>One important data structure in Jython is the list. Lists are just like arrays in any language. They are index addressed and can be appended to or sliced apart. The following code shows a method that takes in some number and returns the squared values</p>\n\n<pre>\n<code class=\"language-python\">num_list = [2,3,4,5,6,7,8,9]\n\ndef squareNum(num_list):\n  squares = []\n  for num in num_list:\n    squares.append(num ** 2)\n  return squares\n\nprint squareNum(num_list)</code></pre>\n\n<p>As you can see the list is created with some values and then later on the square function is called with the list as the parameter. To add an item to a list you use the append method. Raising a number to a given power is denoted by double asterisk (number ** exponent). Along with lists there are structures called dictionaries in Python. These are addressed with key, value pairs as opposed to number indexes and are denoted with curly brackets.</p>\n\n<p><span>Now that we’ve got a basic foundation in the language we can move onto a more real world example, connecting to a database and accessing the records. When it comes to connecting to your database there are several options available, two of which will be covered today. The first is Jython’s DBI implementation zxJDBC, which is good for simple one-off scripts where portability is not a huge concern. The other option covered is using Java’s JDBC. As you will see there is a considerably less code needed to perform the same operations between the pure java implementations and the Jython versions:</span></p>\n\n<p>Java:</p>\n\n<pre>\n<code class=\"language-java\">import java.sql.*;\nimport java.util.*;\n\npublic class JDBCExample {\n public static void main(String[] args) throws Exception {\n   Class.forName(\"com.mysql.jdbc.Driver\");\n   Connection db = DriverManager.getConnection(\"jdbc:mysql://localhost/(dbName)/\", \"dbUserName\", \"dbPassword\");\n   Statement c = db.createStatement();\n   ResultSet rs = c.executeQuery(\"select * from events\");\n   while (rs.next()) {\n     List row = new ArrayList();\n     ResultSetMetaData meta = rs.getMetaData();\n     for(int i=0;i&lt;meta.getColumnCount();i++) {\n       int col = i+1;\n       int datatype = meta.getColumnType(col);\n       if (datatype == Types.INTEGER) {\n         row.add(new Integer(rs.getInt(col)));\n       } else {\n         row.add(rs.getString(col));\n       }\n     }\n     System.out.println(row);\n   }\n   rs.close();\n   c.close();\n   db.close();\n }</code></pre>\n\n<p>If you are familiar with Java this code should look quite familiar. The code connects to the database, makes a select query, and prints out the data</p>\n\n<p><br />\nJython (JDBC):</p>\n\n<pre>\n<code class=\"language-python\">from java.lang import Class\nfrom java.sql import DriverManager, SQLException\n\n DriverManager.registerDriver(Class.forName(com.mysql.jdbc.Driver).newInstance())\n conn=DriverManager.getConnection(“jdbc:mysql://localhost/dbName”, “username”, “password”)\n stmt=conn.createStatement()\n sql=\"select title from tix_section\"\n results=stmt.executeQuery(sql)\n _types = {Types.INTEGER:rs:getInt, Types.FLOAT:rs.getFloat}\n\n while results.next():\n   row = []\n   meta = results.getMetaData()\n   for i in range(meta.getColumnCount()):\n     col += 1\n     datatype = meta.getColumnType(col)\n     value = _types(datatype, results.getString)(col)\n     row.append.value\n     print tuple(row)\n\n statement.close()\n conn.close()</code></pre>\n\n<p>The code looks fairly similar to the plain Java. In Jython the keyword \"range\" provides a way to iterate the loops until it reaches the range.</p>\n\n<p><br />\nJython (zxJDBC):</p>\n\n<pre>\n<code class=\"language-python\">from com.ziclix.python.sql import zxJDBC\n\ndb = zxJDBC.connect(\"jdbc:mysql://localhost/dbName/\", \"userName\", “passowrd”, \"com.mysql.jdbc.Driver\")\nc = db.cursor()\nc.execute(\"select * from events\")\nfor row in c:\n print row\nc.close()\ndb.close()</code></pre>\n\n<p><br />\nThe first line connects to the database with the given parameters.</p>\n\n<p>The next line creates a cursor. Cursors wrap JDBC statements and resultsSet objects and make it easy for store and manipulate the resulting data in the pythonic way. There are two kinds of cursors, static and dynamic. Static cursors, the default, perform an iteration over the entire resultSet, whereas dynamic cursors iterate through on an as-needed basis.</p>\n\n<p>We will conclude by showing how to use your java code in your Jython program and vise versa.</p>\n\n<p>Beach.java</p>\n\n<pre>\n<code class=\"language-java\">public class Beach {\n\n    private String name;\n    private String city;\n\n\n    public Beach(String name, String city){\n        this.name = name;\n        this.city = city;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n}</code></pre>\n\n<p><br />\npythBeach.py</p>\n\n<pre>\n<code class=\"language-python\">import Beach\nbeach = Beach(\"South Beach\", \"Miami\")\nprint beach.getName() +\", \" + beach.getCity()</code></pre>\n\n<p>When you launch the program (\"jython beach.py\") you should see the values that you assigned to the name and city.</p>\n\n<p><br />\nUsing Jython modules (classes) in you Java programs involves a bit more work since the Python object must be coerced into a Java object. The most common way to doing this is to create object factories which convert them into something that Java can easily use. There are two main ways of going about the factory process, one involves making a factory for each object, and other other involves a more loosely coupled factory that can generically handle all of the objects.</p>\n\n<p>Creating a factory for each object has the advantage of being able to maintain complete awareness of the Jython object, meaning that you can pass in arguments directly into the constructor method and makes it very clear what is going on in the program for anyone to see. A disadvantage of this method is that it creates a lot of boilerplate code and this can become an issue if you start to have large numbers of Jython objects that need to be converted. The steps involved include creating the Jython object file with just some getter methods, a java interface to implement those getters, the java factory, which passes the Python object through the interpreter and converts it into a java object</p>\n\n<p>The loosely coupled factory can be generalized enough that it can be used with any Jython object, thus eliminating the large boilerplate coding portions from the one-to-one factory and also allows you to separate out the factory logic to do with it as you please. The coding process is similar to how it was for the previous implementation except for a few changes. In the python file you now need to add setters as well as getters, the interface file is still the same, and the factory once again passes the Jython object to the interpreter for coercion. Examples of these can be found <a href=\"http://www.jython.org/jythonbook/en/1.0/JythonAndJavaIntegration.html#using-jython-within-java-applications\">here</a>.</p>\n\n<p>If you would like to see more about J/Python basics or see more examples you can read through the free \"Definitive Guide to Jython\" found <a href=\"http://www.jython.org/jythonbook/en/1.0/LangSyntax.html\">here</a>. The books covers everything from the basics of the language to creating Swing UI driven application to web applications using servlets like Tomcat and Glassfish.</p>\n",
      "field_tags": [
        {
          "id": "8dc28879-92f3-47ee-b92c-65d3fa89ee45",
          "tid": 91,
          "name": "jython",
          "alias": "/term/jython"
        },
        {
          "id": "65e24887-606d-40f3-88f3-d6b97b10dc10",
          "tid": 54,
          "name": "java",
          "alias": "/term/java"
        },
        {
          "id": "6d343160-8747-4e79-97a5-8f6dd57c4352",
          "tid": 92,
          "name": "python",
          "alias": "/term/python"
        },
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "1f70bb90-dd70-4be1-9a10-23b561453253",
          "alt": "jython logo",
          "title": "jython logo",
          "url": "/sites/default/files/field/image/jython.png",
          "fid": 177
        }
      ],
      "uid": {
        "id": "98695740-449a-40fb-85f1-4ad13e3633c6",
        "uid": 33,
        "display_name": "Christian Crawford",
        "name": "Christian Crawford",
        "bio": "<ul>\n\t<li>Drupal 7 &amp; 8 site building, module development, theming</li>\n\t<li>Java and C</li>\n\t<li>SQL (MySQL and Oracle), NoSQL (MongoDB)</li>\n\t<li>HTML, CSS, SASS/LESS</li>\n\t<li>ReactJS, AngularJS, jQuery, NodeJS, ES6</li>\n\t<li>Nginx and Apache Stacks</li>\n</ul>",
        "alias": "/user/christian-crawford"
      }
    },
    {
      "title": "Tweaking MySQL settings for better optimization",
      "nid": 110,
      "alias": "/article/tweaking-mysql-settings-better-optimization",
      "slug": "tweaking-mysql-settings-better-optimization",
      "body": "<p>MySQL, as it comes out of the box on most Linux distributions, is reasonably optimized. But there are a few things you might have to tweak to get the most out of it. Here are my tweaks for Drupal, and most other applications that use MySQL.</p>\n\n<h2>Don't edit /etc/mysql/my.cnf</h2>\n\n<p>Nowadays, in most cases, you shouldn't be editng the config files that come with the distributions. Most major software comes with a <em>conf.d</em> directory where you can place a new file that will be picked up and appended to the default configuration. So in our case, we create a new file at <em>/etc/mysql/conf.d/custom.conf</em>. Obviously, you have to do this as <em>root</em> or with <em>sudo</em>.</p>\n\n<pre>\n<code>sudo vi /etc/mysql/conf.d/custom.conf</code></pre>\n\n<p>And now put the following into this new file.</p>\n\n<pre>\n<code>[mysqld]\ninnodb_file_per_table\nskip_name_resolve\ndefault_storage_engine=innodb\ninnodb=FORCE\ninnodb_flush_method=O_DIRECT\ntmp_table_size=32M\nmax_heap_table_size=32M\nkey_buffer_size=64M\nquery_cache_size=64M\nquery_cache_limit=4M\nquery_cache_min_res_unit=1K\ninnodb_buffer_pool_size=2048M\ntable_open_cache=4096\nthread_cache_size=16\nmax_allowed_packet=16M\nopen_files_limit=65534\n</code>\n</pre>\n\n<h2>Explanation</h2>\n\n<div>Now let's discuss what these settings do ...</div>\n\n<ol>\n\t<li>innodb_file_per_table - By default MySQL stores all data into one giant table. That's unmanageable. This settings tells MySQL to store each table's data into it's own file.</li>\n\t<li>skip_name_resolve - With this setting, MySQL doesn't bother to do reverse DNS look for each client machine that connects to it. Therefore, clients connect much faster with this setting.</li>\n\t<li>innodb related settings are to ensure that MySQL uses INNODB storage engine instead of the older MyISAM.</li>\n\t<li>The rest of the settings are various tweaks. You're encouraged to tweak them to what works for you.</li>\n</ol>\n\n<p>You can find more information on all MySQL varaiables you can tweak <a href=\"https://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html\">here</a>.</p>\n\n<h2>Slow Queries?</h2>\n\n<p>Still having slow performance in your apps? Try adding the following lines to the file above to find slow queries ...</p>\n\n<pre>\n<code>log_slow_queries = /var/log/mysql/mysql-slow.log #where to log\nlong_query_time = 2 #what to log</code>\n</pre>\n\n<p>There you have it. Hope the above helps you get best peformance out of MySQL.</p>\n\n<div> </div>\n",
      "changed": "2016-07-08T15:38:41+00:00",
      "created": "2015-03-29T02:06:50+00:00",
      "summary": "<p>MySQL, as it comes out of the box on most Linux distributions, is reasonably optimized. But there are a few things you might have to tweak to get the most out of it. Here are my tweaks for Drupal, and most other applications that use MySQL.</p>\n\n<h2>Don't edit /etc/mysql/my.cnf</h2>\n\n<p>Nowadays, in most cases, you shouldn't be editng the config files that come with the distributions. Most major software comes with a <em>conf.d</em> directory where you can place a new file that will be picked up and appended to the default configuration. So in our case, we create a new file at <em>/etc/mysql/conf.d/custom.conf</em>. Obviously, you have to do this as <em>root</em> or with <em>sudo</em>.</p>\n\n<pre>\n<code>sudo vi /etc/mysql/conf.d/custom.conf</code></pre>\n\n<p>And now put the following into this new file.</p>\n\n<pre>\n<code>[mysqld]\ninnodb_file_per_table\nskip_name_resolve\ndefault_storage_engine=innodb\ninnodb=FORCE\ninnodb_flush_method=O_DIRECT\ntmp_table_size=32M\nmax_heap_table_size=32M\nkey_buffer_size=64M\nquery_cache_size=64M\nquery_cache_limit=4M\nquery_cache_min_res_unit=1K\ninnodb_buffer_pool_size=2048M\ntable_open_cache=4096\nthread_cache_size=16\nmax_allowed_packet=16M\nopen_files_limit=65534\n</code>\n</pre>\n\n<h2>Explanation</h2>\n\n<div>Now let's discuss what these settings do ...</div>\n\n<ol>\n\t<li>innodb_file_per_table - By default MySQL stores all data into one giant table. That's unmanageable. This settings tells MySQL to store each table's data into it's own file.</li>\n\t<li>skip_name_resolve - With this setting, MySQL doesn't bother to do reverse DNS look for each client machine that connects to it. Therefore, clients connect much faster with this setting.</li>\n\t<li>innodb related settings are to ensure that MySQL uses INNODB storage engine instead of the older MyISAM.</li>\n\t<li>The rest of the settings are various tweaks. You're encouraged to tweak them to what works for you.</li>\n</ol>\n\n<p>You can find more information on all MySQL varaiables you can tweak <a href=\"https://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html\">here</a>.</p>\n\n<h2>Slow Queries?</h2>\n\n<p>Still having slow performance in your apps? Try adding the following lines to the file above to find slow queries ...</p>\n\n<pre>\n<code>log_slow_queries = /var/log/mysql/mysql-slow.log #where to log\nlong_query_time = 2 #what to log</code>\n</pre>\n\n<p>There you have it. Hope the above helps you get best peformance out of MySQL.</p>\n\n<div> </div>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "74ea9668-d414-47a3-9a56-2e7d21e5e693",
          "alt": "MySQL Double Dolphin Logo",
          "title": "MySQL Double Dolphin Logo",
          "url": "/sites/default/files/field/image/mysql-dolphin-logo.png",
          "fid": 180
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Best approaches to Drupal migration",
      "nid": 111,
      "alias": "/article/best-approaches-drupal-migration",
      "slug": "best-approaches-drupal-migration",
      "body": "<p><span id=\"docs-internal-guid-322222e0-7540-a011-7b8b-fdb7a7309e62\">Migrating content and its linkages between sites has always been one the more difficult tasks to master in the world of Drupal. In the past, site builders and developers would have to write lots of code to set up the migrations and field mappings. Migrating between Drupal sites is not quite as daunting of a task as migrating a site from another CMS, since many of the entities will be similar across sites, but is challenging none the less. The last time that I had looked at the migrate module, nearly a year ago, it took some time for me to understand how to properly create and set up all the required migration files and mappings. I recently needed to do some drupal-to-drupal (d2d) migration and was pleasantly surprised by how simple and powerful the migration UI has become thanks to some new features. </span></p>\n\n<p><br />\n<span id=\"docs-internal-guid-322222e0-7540-a011-7b8b-fdb7a7309e62\"><span>When you think of migrating content you likely think about the </span><a href=\"https://www.drupal.org/project/migrate\"><span>migrate</span></a><span> module (or </span><a href=\"https://www.drupal.org/project/migrate_d2d\"><span>migrate d2d</span></a><span> in this case). Without having to write a single line of code I was able to migrate the content and all of the linkages (images, files, author, tags, etc). If you are migrating from one drupal site to another it couldn’t be easier. You can now simply provide the database credentials for the source site and a wizard will step you through the entire process allowing you to choose which entities to migrate. Below is an example of the migrations that the module can generate for you. </span></span></p>\n\n<p><img alt=\"Migration UI\" data-entity-type=\"file\" data-entity-uuid=\"dec69f88-4a92-46b4-9415-68a2cd9e9339\" src=\"/sites/default/files/inline-images/migration_ui.png\" /></p>\n\n<p><span id=\"docs-internal-guid-322222e0-7542-4010-5db2-b56eb5230a0a\"><span>Initially I was getting error messages from the “File” migration which resulted in only being able to get the user’s profile pictures to map properly. It wasn’t until I found </span><a href=\"https://www.drupal.org/node/2275065\"><span>this</span></a><span> issue report that I discovered how to get the migration to </span></span><span><span>completely work. I could see that the files were being migrated over to the correct location in the destination site's files folder, but for some reason the fields were empty in the migrated nodes. As I later learned the issue occurred because their file id(fid) was not being mapped to the node’s fields. In order to set up the linkage you have to use one of the migrate file classes, in this case, </span><a href=\"https://www.drupal.org/node/1540106\"><span>MigrateFileFid</span></a><span>. By editing the generated migration and adding MigrateFileFid as the default value for the “Option: Implementation of MigrateFile to use” field in the “nodeevent” migration I was able to get the content to be 100% migrated and mapped.</span></span></p>\n\n<p><img alt=\"migration field mappings\" data-entity-type=\"file\" data-entity-uuid=\"6a95d194-967f-4762-a8fe-500abf16a0b2\" src=\"/sites/default/files/inline-images/migrate_mappings.png\" /></p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-322222e0-754c-7ade-fc37-2cd74e53c5eb\"><span>Although the migrate module is likely the module that most people are familiar with and use the most, there are several other modules that perform similar actions including, </span><a href=\"https://www.drupal.org/project/uuid_features\"><span>uuid_features</span></a><span>, and </span><a href=\"https://www.drupal.org/project/deploy\"><span>deploy</span></a><span> module.</span></span></p>\n\n<p><span id=\"docs-internal-guid-322222e0-754c-7ade-fc37-2cd74e53c5eb\"><span>The uuid_features module allows you to packages the selected nodes into a feature that you create. Once you've generated the feature you can enable it on the destination site and it will recreate the nodes from the source site. In my limited testing of the module I was able to easily package up the content, and when I enabled the feature it created the nodes, however no author was associated with that node. I can assume this is happening because no users are not “migrated” or packaged into a feature.</span></span></p>\n\n<p><img alt=\"uuid feature\" data-entity-type=\"file\" data-entity-uuid=\"b2a2f3e7-ed46-48bd-bbc3-5207efebebd8\" src=\"/sites/default/files/inline-images/uuid_feature.png\" /></p>\n\n<p><span>The final module to be discussed in this article is the deploy module. As the project page stats, “The Deploy module is designed to allow users to easily stage content from one Drupal site to another. Deploy automatically manages dependencies between entities.” The setup process involves creating a REST endpoint on the source site and then using the services module, to make calls to that endpoint on the destination site. You can read </span><a href=\"https://www.drupal.org/node/1406134\"><span>this</span></a><span> article, which guides you through the entire setup process step by step. </span></p>\n\n<p><span>In Summary each module has its own advantages and disadvantages. </span><span>If you need to migrate the entire site the migration module is going to be your best bet, however if you want to migrate only a select number of nodes then the uuid_features or deploy module should likely be chosen and these require no mappings to be set up ahead of time.</span></p>\n",
      "changed": "2016-07-08T15:28:41+00:00",
      "created": "2015-04-01T14:19:27+00:00",
      "summary": "<p><span id=\"docs-internal-guid-322222e0-7540-a011-7b8b-fdb7a7309e62\">Migrating content and its linkages between sites has always been one the more difficult tasks to master in the world of Drupal. In the past, site builders and developers would have to write lots of code to set up the migrations and field mappings. Migrating between Drupal sites is not quite as daunting of a task as migrating a site from another CMS, since many of the entities will be similar across sites, but is challenging none the less. The last time that I had looked at the migrate module, nearly a year ago, it took some time for me to understand how to properly create and set up all the required migration files and mappings. I recently needed to do some drupal-to-drupal (d2d) migration and was pleasantly surprised by how simple and powerful the migration UI has become thanks to some new features. </span></p>\n\n<p><br />\n<span id=\"docs-internal-guid-322222e0-7540-a011-7b8b-fdb7a7309e62\"><span>When you think of migrating content you likely think about the </span><a href=\"https://www.drupal.org/project/migrate\"><span>migrate</span></a><span> module (or </span><a href=\"https://www.drupal.org/project/migrate_d2d\"><span>migrate d2d</span></a><span> in this case). Without having to write a single line of code I was able to migrate the content and all of the linkages (images, files, author, tags, etc). If you are migrating from one drupal site to another it couldn’t be easier. You can now simply provide the database credentials for the source site and a wizard will step you through the entire process allowing you to choose which entities to migrate. Below is an example of the migrations that the module can generate for you. </span></span></p>\n\n<p><img alt=\"Migration UI\" data-entity-type=\"file\" data-entity-uuid=\"dec69f88-4a92-46b4-9415-68a2cd9e9339\" src=\"/sites/default/files/inline-images/migration_ui.png\" /></p>\n\n<p><span id=\"docs-internal-guid-322222e0-7542-4010-5db2-b56eb5230a0a\"><span>Initially I was getting error messages from the “File” migration which resulted in only being able to get the user’s profile pictures to map properly. It wasn’t until I found </span><a href=\"https://www.drupal.org/node/2275065\"><span>this</span></a><span> issue report that I discovered how to get the migration to </span></span><span><span>completely work. I could see that the files were being migrated over to the correct location in the destination site's files folder, but for some reason the fields were empty in the migrated nodes. As I later learned the issue occurred because their file id(fid) was not being mapped to the node’s fields. In order to set up the linkage you have to use one of the migrate file classes, in this case, </span><a href=\"https://www.drupal.org/node/1540106\"><span>MigrateFileFid</span></a><span>. By editing the generated migration and adding MigrateFileFid as the default value for the “Option: Implementation of MigrateFile to use” field in the “nodeevent” migration I was able to get the content to be 100% migrated and mapped.</span></span></p>\n\n<p><img alt=\"migration field mappings\" data-entity-type=\"file\" data-entity-uuid=\"6a95d194-967f-4762-a8fe-500abf16a0b2\" src=\"/sites/default/files/inline-images/migrate_mappings.png\" /></p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-322222e0-754c-7ade-fc37-2cd74e53c5eb\"><span>Although the migrate module is likely the module that most people are familiar with and use the most, there are several other modules that perform similar actions including, </span><a href=\"https://www.drupal.org/project/uuid_features\"><span>uuid_features</span></a><span>, and </span><a href=\"https://www.drupal.org/project/deploy\"><span>deploy</span></a><span> module.</span></span></p>\n\n<p><span id=\"docs-internal-guid-322222e0-754c-7ade-fc37-2cd74e53c5eb\"><span>The uuid_features module allows you to packages the selected nodes into a feature that you create. Once you've generated the feature you can enable it on the destination site and it will recreate the nodes from the source site. In my limited testing of the module I was able to easily package up the content, and when I enabled the feature it created the nodes, however no author was associated with that node. I can assume this is happening because no users are not “migrated” or packaged into a feature.</span></span></p>\n\n<p><img alt=\"uuid feature\" data-entity-type=\"file\" data-entity-uuid=\"b2a2f3e7-ed46-48bd-bbc3-5207efebebd8\" src=\"/sites/default/files/inline-images/uuid_feature.png\" /></p>\n\n<p><span>The final module to be discussed in this article is the deploy module. As the project page stats, “The Deploy module is designed to allow users to easily stage content from one Drupal site to another. Deploy automatically manages dependencies between entities.” The setup process involves creating a REST endpoint on the source site and then using the services module, to make calls to that endpoint on the destination site. You can read </span><a href=\"https://www.drupal.org/node/1406134\"><span>this</span></a><span> article, which guides you through the entire setup process step by step. </span></p>\n\n<p><span>In Summary each module has its own advantages and disadvantages. </span><span>If you need to migrate the entire site the migration module is going to be your best bet, however if you want to migrate only a select number of nodes then the uuid_features or deploy module should likely be chosen and these require no mappings to be set up ahead of time.</span></p>\n",
      "field_tags": [
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "33b327c1-cdc4-4b8f-8c88-cfbc30892b85",
          "tid": 65,
          "name": "Migration",
          "alias": "/term/migration"
        },
        {
          "id": "9e04eef2-f4da-4377-a79f-84066e20e168",
          "tid": 66,
          "name": "D2D migration",
          "alias": "/term/d2d-migration"
        },
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "813ae56a-c58b-4dbb-978c-6bf2b3fd0607",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/drupal-logo-primary.jpg",
          "fid": 187
        }
      ],
      "uid": {
        "id": "98695740-449a-40fb-85f1-4ad13e3633c6",
        "uid": 33,
        "display_name": "Christian Crawford",
        "name": "Christian Crawford",
        "bio": "<ul>\n\t<li>Drupal 7 &amp; 8 site building, module development, theming</li>\n\t<li>Java and C</li>\n\t<li>SQL (MySQL and Oracle), NoSQL (MongoDB)</li>\n\t<li>HTML, CSS, SASS/LESS</li>\n\t<li>ReactJS, AngularJS, jQuery, NodeJS, ES6</li>\n\t<li>Nginx and Apache Stacks</li>\n</ul>",
        "alias": "/user/christian-crawford"
      }
    },
    {
      "title": "Location finder with zero coding using Drupal location, gmap and views modules",
      "nid": 115,
      "alias": "/article/location-finder-zero-coding-using-drupal-location-gmap-and-views-modules",
      "slug": "location-finder-zero-coding-using-drupal-location-gmap-and-views-modules",
      "body": "<p><a href=\"https://drupal.org\">Drupal</a> is a such a powerful and mature platform that you can build a full featured location finder (e.g. Store Locator) with zero coding, with judicious configuration and some fantastic contrib modules.</p>\n\n<div class=\"flex-video\">\n<p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/dblS4a3d-68\" width=\"560\"></iframe></p>\n</div>\n\n<p>Here's a rundown of the features:</p>\n\n<ul>\n\t<li>A very flexible Store Location content type with any number and types of custom fields (such as service offered, store hours etc.)</li>\n\t<li>Import any number of store locations — along with custom fields — from a CSV file.</li>\n\t<li>Automatically geocode (assign latitude &amp; longitude) the locations based on the address entered.</li>\n\t<li>A search form and result listing (a Drupal <a href=\"https://drupal.org/project/views\">views</a> view with an exposed form) that shows matching locations.</li>\n\t<li>The user can enter their zip code and see the distance of the location from their zipcode. And also sort based on distance.</li>\n\t<li>Show all matching locations on an interactive map.</li>\n</ul>\n\n<p>So, let's get started.</p>\n\n<ol>\n\t<li>Install and configure the <a href=\"https://drupal.org/project/location\">location</a> module. It provides a special \"location\" field type that not only holds an address, but also holds geographical coordinates (latitude &amp; longitude). It also has capability to convert an address into lat/long. As of this writing, you must use the 7.x-3.x-dev version of the module, and not the recommended release, because of a <a href=\"https://www.drupal.org/node/2406483\">serious bug</a>.</li>\n\t<li>Create a content type for Store Location, including the custom fields relevant to your business.</li>\n\t<li>Download <a href=\"https://www.briandunning.com/sample-data/us-500.zip\">this CSV file</a> from <a href=\"https://www.briandunning.com/sample-data/\">here</a> and unzip it.</li>\n\t<li>Create a <a href=\"https://drupal.org/project/feeds\">feeds</a> importer to import the CSV file rows as Store Location nodes. Don't forget to add the <a href=\"http://drupal.org/project/location_feeds\">location_feeds</a> module.</li>\n\t<li>Create a view with \"page\" display, a \"gmap\" attachment display, and an exposed filter to enter the zipcode.</li>\n\t<li>Finally, package the whole setup as a feature.</li>\n</ol>\n",
      "changed": "2016-07-08T15:22:46+00:00",
      "created": "2015-06-13T16:36:59+00:00",
      "summary": "<p><a href=\"https://drupal.org\">Drupal</a> is a such a powerful and mature platform that you can build a full featured location finder (e.g. Store Locator) with zero coding, with judicious configuration and some fantastic contrib modules.</p>\n\n<div class=\"flex-video\">\n<p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/dblS4a3d-68\" width=\"560\"></iframe></p>\n</div>\n\n<p>Here's a rundown of the features:</p>\n\n<ul>\n\t<li>A very flexible Store Location content type with any number and types of custom fields (such as service offered, store hours etc.)</li>\n\t<li>Import any number of store locations — along with custom fields — from a CSV file.</li>\n\t<li>Automatically geocode (assign latitude &amp; longitude) the locations based on the address entered.</li>\n\t<li>A search form and result listing (a Drupal <a href=\"https://drupal.org/project/views\">views</a> view with an exposed form) that shows matching locations.</li>\n\t<li>The user can enter their zip code and see the distance of the location from their zipcode. And also sort based on distance.</li>\n\t<li>Show all matching locations on an interactive map.</li>\n</ul>\n\n<p>So, let's get started.</p>\n\n<ol>\n\t<li>Install and configure the <a href=\"https://drupal.org/project/location\">location</a> module. It provides a special \"location\" field type that not only holds an address, but also holds geographical coordinates (latitude &amp; longitude). It also has capability to convert an address into lat/long. As of this writing, you must use the 7.x-3.x-dev version of the module, and not the recommended release, because of a <a href=\"https://www.drupal.org/node/2406483\">serious bug</a>.</li>\n\t<li>Create a content type for Store Location, including the custom fields relevant to your business.</li>\n\t<li>Download <a href=\"https://www.briandunning.com/sample-data/us-500.zip\">this CSV file</a> from <a href=\"https://www.briandunning.com/sample-data/\">here</a> and unzip it.</li>\n\t<li>Create a <a href=\"https://drupal.org/project/feeds\">feeds</a> importer to import the CSV file rows as Store Location nodes. Don't forget to add the <a href=\"http://drupal.org/project/location_feeds\">location_feeds</a> module.</li>\n\t<li>Create a view with \"page\" display, a \"gmap\" attachment display, and an exposed filter to enter the zipcode.</li>\n\t<li>Finally, package the whole setup as a feature.</li>\n</ol>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "0fad5941-1c85-4455-88e1-a073691bde60",
          "alt": "Drupal Location Finder",
          "title": "Drupal Location Finder",
          "url": "/sites/default/files/field/image/Drupal%20Location%20Finder%20-%20map.png",
          "fid": 221
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Reduced Drupal bootstrap for better performance",
      "nid": 54,
      "alias": "/article/reduced-drupal-bootstrap-better-performance",
      "slug": "reduced-drupal-bootstrap-better-performance",
      "body": "<p>Did you know you can use Drupal in your custom PHP scripts, outside of modules? Possibly. But did you know that you can make your scripts <em> much </em> faster by reducing Drupal's bootstrap levein your scripts? Read on to see how.</p>\n\n<p>The following script reads the first 20 nids (node-ids) from your Drupal database.</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php \ndefine('DRUPAL_ROOT', $_SERVER['DOCUMENT_ROOT']); \nrequire_once DRUPAL_ROOT . '/includes/bootstrap.inc'; \ndrupal_bootstrap( DRUPAL_BOOTSTRAP_FULL ); \n$rows = db_select('node')\n  -&gt;fields('node', array('nid', 'title'))\n  -&gt;range(0, 20)\n  -&gt;execute()\n  -&gt;fetchAll();\n// Read a few records from the database and return them as JSON. \nheader('Content-Type: application/json'); \nprint json_encode($rows);</code></pre>\n\n<p>The above code is how normal index.php of Drupal bootstraps itself. But in our script since we are interested only in reading from the database and not running complete Drupal modules, we can get away with bootstrapping Drupal partially. So if you change the bootstrap level above from  <strong> DRUPAL_BOOTSTRAP_FULL </strong>  to  <strong> DRUPAL_BOOTSTRAP_DATABASE </strong> , the script will still function correctly. But the execution time of such a script will fall quite significantly.</p>\n\n<p>How significantly? I ran a simple benchmark of 50 requests using <em> ab </em> (Apache Benchmark tool) with the following command.</p>\n\n<p><code>ab -n 50 http://localhost/script.php</code></p>\n\n<p>And I got an average request time of <strong> 206ms </strong> when the bootstrap level was from  <strong> DRUPAL_BOOTSTRAP_FULL </strong> . Upon reducing the bootstrap level to  <strong> DRUPAL_BOOTSTRAP_DATABASE </strong> , the average request time fell to <strong> 27ms </strong> ! That's how significant.</p>\n\n<p>So the next time you need a high-performance PHP script that uses Drupal, consider lowering the bootstrap level for improved performance. You can read more about Drupal bootstrap levels <a href=\"http://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/drupal_bootstrap/7\" target=\"_blank\"> here </a> .</p>\n",
      "changed": "2016-07-08T15:16:34+00:00",
      "created": "2012-11-02T22:39:12+00:00",
      "summary": "<p>Did you know you can use Drupal in your custom PHP scripts, outside of modules? Possibly. But did you know that you can make your scripts <em> much </em> faster by reducing Drupal's bootstrap levein your scripts? Read on to see how.</p>\n\n<p>The following script reads the first 20 nids (node-ids) from your Drupal database.</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php \ndefine('DRUPAL_ROOT', $_SERVER['DOCUMENT_ROOT']); \nrequire_once DRUPAL_ROOT . '/includes/bootstrap.inc'; \ndrupal_bootstrap( DRUPAL_BOOTSTRAP_FULL ); \n$rows = db_select('node')\n  -&gt;fields('node', array('nid', 'title'))\n  -&gt;range(0, 20)\n  -&gt;execute()\n  -&gt;fetchAll();\n// Read a few records from the database and return them as JSON. \nheader('Content-Type: application/json'); \nprint json_encode($rows);</code></pre>\n\n<p>The above code is how normal index.php of Drupal bootstraps itself. But in our script since we are interested only in reading from the database and not running complete Drupal modules, we can get away with bootstrapping Drupal partially. So if you change the bootstrap level above from  <strong> DRUPAL_BOOTSTRAP_FULL </strong>  to  <strong> DRUPAL_BOOTSTRAP_DATABASE </strong> , the script will still function correctly. But the execution time of such a script will fall quite significantly.</p>\n\n<p>How significantly? I ran a simple benchmark of 50 requests using <em> ab </em> (Apache Benchmark tool) with the following command.</p>\n\n<p><code>ab -n 50 http://localhost/script.php</code></p>\n\n<p>And I got an average request time of <strong> 206ms </strong> when the bootstrap level was from  <strong> DRUPAL_BOOTSTRAP_FULL </strong> . Upon reducing the bootstrap level to  <strong> DRUPAL_BOOTSTRAP_DATABASE </strong> , the average request time fell to <strong> 27ms </strong> ! That's how significant.</p>\n\n<p>So the next time you need a high-performance PHP script that uses Drupal, consider lowering the bootstrap level for improved performance. You can read more about Drupal bootstrap levels <a href=\"http://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/drupal_bootstrap/7\" target=\"_blank\"> here </a> .</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "46535710-dd42-4980-9af2-b297d1970d3d",
          "tid": 35,
          "name": "ajax",
          "alias": "/term/ajax"
        },
        {
          "id": "904e2ce8-1785-4627-b09b-5f5413331ec6",
          "tid": 17,
          "name": "mobile",
          "alias": "/term/mobile"
        }
      ],
      "field_image": [
        {
          "id": "1abdc2ac-61ff-4c7a-baf1-1b33c13d56c4",
          "alt": "Bootstrap",
          "title": "Bootstrap",
          "url": "/sites/default/files/field/image/6800233385_8ae958eef7_b.jpg",
          "fid": 66
        },
        {
          "id": "c8b8ed90-ac29-42dd-a6b6-4a2c2b44f163",
          "alt": "PHP logo",
          "title": "PHP logo",
          "url": "/sites/default/files/field/image/images_20.jpg",
          "fid": 67
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Drupal jQuery behaviors",
      "nid": 13,
      "alias": "/article/drupal-jquery-behaviors",
      "slug": "drupal-jquery-behaviors",
      "body": "<p>In this article, I try to explain \"Drupal Behaviors\". Drupal provides a very clean way of attaching JavaScript code to HTML components. It includes jQuery library with it. So you have to do nothing to add jQuery to your app. But on top of it, you also don't have to attach onload event handlers in JavaScript. Instead you simply write \"Drupal JS behaviors\" which are JavaScript functions that get invoked when attached (document loaded) or detached (document unloaded).</p>\n\n<p>Let's take a look at an example:</p>\n\n<p>Let's assume you want to convert all the 'select' elements in a given page, or all pages, into <a href=\"http://www.erichynds.com/blog/jquery-ui-multiselect-widget\">jquery multiselect</a> widgets. I assuming you already know the basics of creating a module. The module in my example below is called 'wfdemo'.</p>\n\n<ol>\n\t<li>In your module, write the PHP code to inject JavaScript into the HTML page.\n\t<pre>\n<code class=\"language-php\">&lt;?php\ndrupal_add_library('system', 'ui.dialog'); // add dependency libraries to the page\n$form['#attached']['js'][] =  drupal_get_path('module', 'wfdemo') . '/jquery.multiselect.min.js'; // attach JS to form\n$form['#attached']['css'][] =  drupal_get_path('module', 'wfdemo') . '/jquery.multiselect.css'; // attach CSS to form\n$form['#attached']['js'][] =  drupal_get_path('module', 'wfdemo') . '/wfdemo.js';\n?&gt;</code></pre>\n\t</li>\n\t<li>Above, the jquery.multiselect.* file are third-party files. But the last one - wfdemo.js - is a custom one written by us. This file is the one where we place our own <strong>Drupal Behavior</strong>.</li>\n\t<li>A Drupal behavior is a JavaScript object created under Drupal.behaviors object. In the example below, we have named our behavior 'wfdemo_multiselect'. The name can be anything arbitrary, but has to be unique.\n\t<pre>\n<code class=\"language-javascript\">(function($) {\n  Drupal.behaviors.wfdemo_multiselect = {\n    attach: function(context, settings) {\n      $('select.multiselect', context).once('wfdemo-multiselect').multiselect({});\n    }\n  }\n})(jQuery);</code></pre>\n\t</li>\n\t<li>Our behavior must contain an 'attach' method, and can also optionally contain a 'detach' method. As you can imagine, 'attach' is called when the behavior is activated, while 'detach' is called when it is de-activated. In most cases, you don't have to implement the 'detach' method, unless you have some cleanup to do in JavaScript (which is rare).</li>\n\t<li>The two arguments to the behavior are - context and settings.\n\t<ol>\n\t\t<li>Context is the DOM object to which the behavior is attached. This could be the form, the form element or often the 'document' object. Typically, you would apply your JavaScript behavior to the 'context' object or its children.</li>\n\t\t<li>Settings can be special JavaScript object supplied at the time of attachment, but most of the times it is same as Drupal.settings.</li>\n\t</ol>\n\t</li>\n\t<li>So in the above example ...\n\t<ol>\n\t\t<li>we take the context (which is our form component)</li>\n\t\t<li>search for 'select.multiselect' (\"select\" element with class \"multiselect\") under it</li>\n\t\t<li>convert it into a multiselect by calling 'multiselect' jQuery plugin on it.</li>\n\t\t<li>but we want to do it only once (in case the behavior code gets executed multiple times), therefore we wrap the plugin call in 'once'</li>\n\t</ol>\n\t</li>\n\t<li>The whole code above is wrapped in an IIFE (<a href=\"http://stage.learn.jquery.com/javascript-101/functions/\">immediately invoked function expression</a>).</li>\n</ol>\n\n<p>I hope that explains Drupal behaviors and the right way to use them.</p>\n",
      "changed": "2016-07-08T15:11:18+00:00",
      "created": "2013-05-12T18:49:59+00:00",
      "summary": "<p>In this article, I try to explain \"Drupal Behaviors\". Drupal provides a very clean way of attaching JavaScript code to HTML components. It includes jQuery library with it. So you have to do nothing to add jQuery to your app. But on top of it, you also don't have to attach onload event handlers in JavaScript. Instead you simply write \"Drupal JS behaviors\" which are JavaScript functions that get invoked when attached (document loaded) or detached (document unloaded).</p>\n\n<p>Let's take a look at an example:</p>\n\n<p>Let's assume you want to convert all the 'select' elements in a given page, or all pages, into <a href=\"http://www.erichynds.com/blog/jquery-ui-multiselect-widget\">jquery multiselect</a> widgets. I assuming you already know the basics of creating a module. The module in my example below is called 'wfdemo'.</p>\n\n<ol>\n\t<li>In your module, write the PHP code to inject JavaScript into the HTML page.\n\t<pre>\n<code class=\"language-php\">&lt;?php\ndrupal_add_library('system', 'ui.dialog'); // add dependency libraries to the page\n$form['#attached']['js'][] =  drupal_get_path('module', 'wfdemo') . '/jquery.multiselect.min.js'; // attach JS to form\n$form['#attached']['css'][] =  drupal_get_path('module', 'wfdemo') . '/jquery.multiselect.css'; // attach CSS to form\n$form['#attached']['js'][] =  drupal_get_path('module', 'wfdemo') . '/wfdemo.js';\n?&gt;</code></pre>\n\t</li>\n\t<li>Above, the jquery.multiselect.* file are third-party files. But the last one - wfdemo.js - is a custom one written by us. This file is the one where we place our own <strong>Drupal Behavior</strong>.</li>\n\t<li>A Drupal behavior is a JavaScript object created under Drupal.behaviors object. In the example below, we have named our behavior 'wfdemo_multiselect'. The name can be anything arbitrary, but has to be unique.\n\t<pre>\n<code class=\"language-javascript\">(function($) {\n  Drupal.behaviors.wfdemo_multiselect = {\n    attach: function(context, settings) {\n      $('select.multiselect', context).once('wfdemo-multiselect').multiselect({});\n    }\n  }\n})(jQuery);</code></pre>\n\t</li>\n\t<li>Our behavior must contain an 'attach' method, and can also optionally contain a 'detach' method. As you can imagine, 'attach' is called when the behavior is activated, while 'detach' is called when it is de-activated. In most cases, you don't have to implement the 'detach' method, unless you have some cleanup to do in JavaScript (which is rare).</li>\n\t<li>The two arguments to the behavior are - context and settings.\n\t<ol>\n\t\t<li>Context is the DOM object to which the behavior is attached. This could be the form, the form element or often the 'document' object. Typically, you would apply your JavaScript behavior to the 'context' object or its children.</li>\n\t\t<li>Settings can be special JavaScript object supplied at the time of attachment, but most of the times it is same as Drupal.settings.</li>\n\t</ol>\n\t</li>\n\t<li>So in the above example ...\n\t<ol>\n\t\t<li>we take the context (which is our form component)</li>\n\t\t<li>search for 'select.multiselect' (\"select\" element with class \"multiselect\") under it</li>\n\t\t<li>convert it into a multiselect by calling 'multiselect' jQuery plugin on it.</li>\n\t\t<li>but we want to do it only once (in case the behavior code gets executed multiple times), therefore we wrap the plugin call in 'once'</li>\n\t</ol>\n\t</li>\n\t<li>The whole code above is wrapped in an IIFE (<a href=\"http://stage.learn.jquery.com/javascript-101/functions/\">immediately invoked function expression</a>).</li>\n</ol>\n\n<p>I hope that explains Drupal behaviors and the right way to use them.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "f75c77e8-4909-4db3-bd9e-a250f5d0c066",
          "tid": 94,
          "name": "jQuery",
          "alias": "/term/jquery"
        }
      ],
      "field_image": [
        {
          "id": "772c0d9c-c473-4b5d-a5b7-679df1cc4dfe",
          "alt": "Drupal jQuery Behaviors",
          "title": "Drupal jQuery Behaviors",
          "url": "/sites/default/files/field/image/Drupal%20jquery%20behaviors.png",
          "fid": 23
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Integrating Apache Solr with Drupal Autocomplete",
      "nid": 67,
      "alias": "/article/integrating-apache-solr-drupal-autocomplete",
      "slug": "integrating-apache-solr-drupal-autocomplete",
      "body": "<p>Although <a href=\"https://drupal.org/\">Drupal </a>has a good built-in search functionality that coumes out of the box, sometimes a client wants something more advanced and feature rich that scales well for a quickly growing website.  This is where Apache Solr comes into play.  <a href=\"http://lucene.apache.org/solr/\">Apache Solr</a> is an open source project that is used on many high traffic websites like Zappos.com and is well integrated into Drupal.  Solr can run as a standalone full-text search server on a separate server box to reduce server load on a server where MySQL and PHP are running. Solr is considered the \"gorilla\" of search by many and anyone who has used it can attest to that.</p>\n\n<p>To begin using Apache Solr 3.6.2 in a Drupal website the following files and modules will be needed to get started:</p>\n\n<p>1. <a href=\"https://drupal.org/project/apachesolr\" target=\"_blank\" title=\"Apache Solr Search Integration\">Apache Solr Search Integration</a> - Download and Enable</p>\n\n<p>2. <a href=\"https://drupal.org/project/apachesolr_autocomplete\" target=\"_blank\">Apache Solr Autocomplete</a> - Download and Enable</p>\n\n<p>3. <a href=\"http://www.apache.org/dyn/closer.cgi/lucene/solr/3.6.2\" target=\"_blank\">Apache Solr 3.6.2</a> - Download the .tgz to your server box. Make sure it is outside your drupal installation folder and is outside of your web root/folder.</p>\n\n<p>Once the above three steps are done, extract the contents of Apache Solr 3.6.2 to a directory like: <code>/home/Servers</code>. The next step is to copy the configuration files (all files) inside</p>\n\n<p><code>sites/all/modules/apachesolr/solr-conf/solr-3.x/</code>   to   <code>/home/Servers/apache-solr-.3.x/example/solr/conf</code></p>\n\n<p>Any files that have the same name can be renamed to (eg. schema.xml.bak) before copying them or then can be overriden, either way will work properly.  The first option is the preferred method in case anything goes wrong and you want to keep the original configuration files.</p>\n\n<p>At this time the Apache Solr server can be started by going to the directory where you extracted Solr files from the .tgz archive (in my case it is <code>/home/Servers/Apache-Solr-3.6.2/example</code>) and running this command:</p>\n\n<p><code>java -jar start.jar</code> </p>\n\n<p>Note: you need java installed on your server to run the above command.</p>\n\n<p>If you don't have java installed, run the following command to get the latest default JDK packages from the repository:</p>\n\n<p><code>sudo apt-get install default-jdk</code></p>\n\n<p>The last step is to go to admin/settings/apachesolr from the drupal toolbar, click on 'Advanced Configuration' and make Apache Solr as the default search</p>\n\n<p>To check if everything is running properly, got to the Apache Sorl admin interface by visiting: <code>http//localhost:8983/solr/admin</code>. If the admin interface is visible then everything is set.</p>\n\n<p>Apache Solr is a very large and complex project that has a lot of configuration that can be changed to improve your search, so go explore it and have fun with it.</p>\n",
      "changed": "2016-07-08T15:09:26+00:00",
      "created": "2013-06-07T21:00:03+00:00",
      "summary": "<p>Although <a href=\"https://drupal.org/\">Drupal </a>has a good built-in search functionality that coumes out of the box, sometimes a client wants something more advanced and feature rich that scales well for a quickly growing website.  This is where Apache Solr comes into play.  <a href=\"http://lucene.apache.org/solr/\">Apache Solr</a> is an open source project that is used on many high traffic websites like Zappos.com and is well integrated into Drupal.  Solr can run as a standalone full-text search server on a separate server box to reduce server load on a server where MySQL and PHP are running. Solr is considered the \"gorilla\" of search by many and anyone who has used it can attest to that.</p>\n\n<p>To begin using Apache Solr 3.6.2 in a Drupal website the following files and modules will be needed to get started:</p>\n\n<p>1. <a href=\"https://drupal.org/project/apachesolr\" target=\"_blank\" title=\"Apache Solr Search Integration\">Apache Solr Search Integration</a> - Download and Enable</p>\n\n<p>2. <a href=\"https://drupal.org/project/apachesolr_autocomplete\" target=\"_blank\">Apache Solr Autocomplete</a> - Download and Enable</p>\n\n<p>3. <a href=\"http://www.apache.org/dyn/closer.cgi/lucene/solr/3.6.2\" target=\"_blank\">Apache Solr 3.6.2</a> - Download the .tgz to your server box. Make sure it is outside your drupal installation folder and is outside of your web root/folder.</p>\n\n<p>Once the above three steps are done, extract the contents of Apache Solr 3.6.2 to a directory like: <code>/home/Servers</code>. The next step is to copy the configuration files (all files) inside</p>\n\n<p><code>sites/all/modules/apachesolr/solr-conf/solr-3.x/</code>   to   <code>/home/Servers/apache-solr-.3.x/example/solr/conf</code></p>\n\n<p>Any files that have the same name can be renamed to (eg. schema.xml.bak) before copying them or then can be overriden, either way will work properly.  The first option is the preferred method in case anything goes wrong and you want to keep the original configuration files.</p>\n\n<p>At this time the Apache Solr server can be started by going to the directory where you extracted Solr files from the .tgz archive (in my case it is <code>/home/Servers/Apache-Solr-3.6.2/example</code>) and running this command:</p>\n\n<p><code>java -jar start.jar</code> </p>\n\n<p>Note: you need java installed on your server to run the above command.</p>\n\n<p>If you don't have java installed, run the following command to get the latest default JDK packages from the repository:</p>\n\n<p><code>sudo apt-get install default-jdk</code></p>\n\n<p>The last step is to go to admin/settings/apachesolr from the drupal toolbar, click on 'Advanced Configuration' and make Apache Solr as the default search</p>\n\n<p>To check if everything is running properly, got to the Apache Sorl admin interface by visiting: <code>http//localhost:8983/solr/admin</code>. If the admin interface is visible then everything is set.</p>\n\n<p>Apache Solr is a very large and complex project that has a lot of configuration that can be changed to improve your search, so go explore it and have fun with it.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "cb39dff7-c4e9-4dfc-9f5b-9558104cb2e7",
          "tid": 41,
          "name": "apache",
          "alias": "/term/apache"
        },
        {
          "id": "4aabc1fa-eea8-4922-b100-2d8a189813b9",
          "tid": 42,
          "name": "solr",
          "alias": "/term/solr"
        },
        {
          "id": "d59f40ed-263f-4509-b302-5d4883c6578b",
          "tid": 44,
          "name": "search",
          "alias": "/term/search"
        }
      ],
      "field_image": [
        {
          "id": "90b7c548-0446-4272-a94a-197bfef8d0fc",
          "alt": "Apache Solr logo",
          "title": "Apache Solr logo",
          "url": "/sites/default/files/field/image/solr.png",
          "fid": 82
        }
      ],
      "uid": {
        "id": "d5610ded-b9d1-48e0-87b6-38a83b280363",
        "display_name": "Sergey Cheban"
      }
    },
    {
      "title": "Writing directly executable drush scripts",
      "nid": 69,
      "alias": "/article/writing-directly-executable-drush-scripts",
      "slug": "writing-directly-executable-drush-scripts",
      "body": "<p>Often we write \"drush\" scripts to do Drupal task automation. For example, if you want to do delete domain_conf variables on your website, you might write a script like this ...</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n​​​​​​​$variable_name = 'foo';\n$domains = domain_domains();\nforeach($domains as $domain_id =&gt; $domain) {\n  print(\"Deleting $variable_name from ${domain['machine_name']} ($domain_id)\");\n  domain_conf_variable_delete($domain_id, $variable_name);\n}</code></pre>\n\n<p><span data-mce-mark=\"1\"><span data-mce-mark=\"1\">Save the above in myscript.php, and then execute it as \"drush php-script myscript.php\".</span></span></p>\n\n<p>That works okay, but it is not optimal. The invocation is a bit cumbersome, and you can't pass the name of the variable as command line arg. Overall, it doesn't feel right in the spirit of UNIX scripts.</p>\n\n<p>So here's a better way. Rewrite the above script as follows ...</p>\n\n<pre>\n<code class=\"language-bash\">#!/usr/bin/drush\nwhile ($variable_name = drush_shift()) {\n  $domains = domain_domains();\n  foreach($domains as $domain_id =&gt; $domain) {\n    drush_print(\"Deleting $variable_name from ${domain['machine_name']} ($domain_id)\");\n    domain_conf_variable_delete($domain_id, $variable_name);\n  }\n}</code></pre>\n\n<p><span>Notice the following ...</span></p>\n\n<ol>\n\t<li>There is no \"&lt;?php\" tag.</li>\n\t<li>The first line follows UNIX convention for scripts by string with \"#!\" followed by the path of the interpreter that should run this script.</li>\n\t<li>The command-line args are extracted with \"drush_shift()\" and iterated over in a loop.</li>\n\t<li>Printing is done with drush_print()</li>\n</ol>\n\n<p>I hope this helps others write cleaner drush scripts and do better Drupal automation.</p>\n",
      "changed": "2016-07-08T15:08:34+00:00",
      "created": "2013-08-15T15:41:08+00:00",
      "summary": "<p>Often we write \"drush\" scripts to do Drupal task automation. For example, if you want to do delete domain_conf variables on your website, you might write a script like this ...</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n​​​​​​​$variable_name = 'foo';\n$domains = domain_domains();\nforeach($domains as $domain_id =&gt; $domain) {\n  print(\"Deleting $variable_name from ${domain['machine_name']} ($domain_id)\");\n  domain_conf_variable_delete($domain_id, $variable_name);\n}</code></pre>\n\n<p><span data-mce-mark=\"1\"><span data-mce-mark=\"1\">Save the above in myscript.php, and then execute it as \"drush php-script myscript.php\".</span></span></p>\n\n<p>That works okay, but it is not optimal. The invocation is a bit cumbersome, and you can't pass the name of the variable as command line arg. Overall, it doesn't feel right in the spirit of UNIX scripts.</p>\n\n<p>So here's a better way. Rewrite the above script as follows ...</p>\n\n<pre>\n<code class=\"language-bash\">#!/usr/bin/drush\nwhile ($variable_name = drush_shift()) {\n  $domains = domain_domains();\n  foreach($domains as $domain_id =&gt; $domain) {\n    drush_print(\"Deleting $variable_name from ${domain['machine_name']} ($domain_id)\");\n    domain_conf_variable_delete($domain_id, $variable_name);\n  }\n}</code></pre>\n\n<p><span>Notice the following ...</span></p>\n\n<ol>\n\t<li>There is no \"&lt;?php\" tag.</li>\n\t<li>The first line follows UNIX convention for scripts by string with \"#!\" followed by the path of the interpreter that should run this script.</li>\n\t<li>The command-line args are extracted with \"drush_shift()\" and iterated over in a loop.</li>\n\t<li>Printing is done with drush_print()</li>\n</ol>\n\n<p>I hope this helps others write cleaner drush scripts and do better Drupal automation.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "cf16a0df-8146-463b-9385-c337424ca956",
          "tid": 46,
          "name": "drush",
          "alias": "/term/drush"
        }
      ],
      "field_image": [
        {
          "id": "518533ea-7453-40c1-908f-e9206cea6e11",
          "alt": "Drupal Shell - Drush",
          "title": "Drupal Shell - Drush",
          "url": "/sites/default/files/field/image/drush.png",
          "fid": 85
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Creating the parallax effect using Javascript and CSS",
      "nid": 73,
      "alias": "/article/creating-parallax-effect-using-javascript-and-css",
      "slug": "creating-parallax-effect-using-javascript-and-css",
      "body": "<p>The parallax effect, or scrolling parallax effect, has become popular on modern websites. My favorite example of the parallax effect is implemented on <a href=\"http://boy-coy.com/\">http://boy-coy.com/</a>. You may be thinking to yourself that this looks difficult to implement, but actually it's incredibly easy. The most difficult part will be creating the images and deciding how to make them move and work together.</p>\n\n<p>Programming the movement itself is very easy. They simply run on one mechanic, event listeners bound to the mouse scroll. All the event listeners do is invert the mouse scroll direction and divide to make it move slower. Dividing by 4 means your parallax image will move four time slower than your mouse scroll speed. So, when you scroll down the image will scroll up the page at a set rate. You can get more advanced to make them move left or right and make them appear to interact with each other.</p>\n\n<p>Below is the simplest example I made. The implementation may be found at <a href=\"http://legacy.jordanmclemore.com/labs/1.html\">http://legacy.jordanmclemore.com/labs/1.html</a>. You'll notice each parallax images is positioned as a background at a location. Each images is controlled by it's own controller and function called by the controller.<br />\n </p>\n\n<p>CSS:</p>\n\n<pre>\n<code class=\"language-css\">body {\n  margin: 0px; \n  background: url(bg.jpg) fixed;\n}\n\n#prlx_lyr_1 {\n  position: fixed;\n  background: url(parallax_bg1.png) no-repeat 0px 500px;\n  width: 100%;\n  height: 1200px;\n}\n\n#prlx_lyr_2 {\n  position: fixed;\n  background: url(parallax_bg1.png) no-repeat 300px 200px;\n  width: 100%;\n  height: 1200px;\n}\n\n#prlx_lyr_3 {\n  position: fixed;\n  background: url(parallax_bg1.png) no-repeat 400px 700px;\n  width: 100%;\n  height: 1200px;\n}\n\n#content_layer {\n  position: absolute;\n}</code></pre>\n\n<p>JavaScript:  </p>\n\n<pre>\n<code class=\"language-javascript\">&lt;script&gt;\n\nfunction parallax() {\n  var prlx_lyr_1 = document.getElementById('prlx_lyr_1');\n  prlx_lyr_1.style.top = -(window.pageYOffset / 8)+'px';\n}\n\nfunction parallax2() {\n  var prlx_lyr_2 = document.getElementById('prlx_lyr_2');\n  prlx_lyr_2.style.top = -(window.pageYOffset / 5)+'px';\n}\n\nfunction parallax3() {\n  var prlx_lyr_3 = document.getElementById('prlx_lyr_3');\n  prlx_lyr_3.style.top = -(window.pageYOffset / 2)+'px';\n}\n\nwindow.addEventListener(\"scroll\", parallax, false);\nwindow.addEventListener(\"scroll\", parallax2, false);\nwindow.addEventListener(\"scroll\", parallax3, false);\n\n&lt;/script&gt;</code></pre>\n\n<p> </p>\n",
      "changed": "2016-07-08T15:06:55+00:00",
      "created": "2014-06-17T16:50:35+00:00",
      "summary": "<p>The parallax effect, or scrolling parallax effect, has become popular on modern websites. My favorite example of the parallax effect is implemented on <a href=\"http://boy-coy.com/\">http://boy-coy.com/</a>. You may be thinking to yourself that this looks difficult to implement, but actually it's incredibly easy. The most difficult part will be creating the images and deciding how to make them move and work together.</p>\n\n<p>Programming the movement itself is very easy. They simply run on one mechanic, event listeners bound to the mouse scroll. All the event listeners do is invert the mouse scroll direction and divide to make it move slower. Dividing by 4 means your parallax image will move four time slower than your mouse scroll speed. So, when you scroll down the image will scroll up the page at a set rate. You can get more advanced to make them move left or right and make them appear to interact with each other.</p>\n\n<p>Below is the simplest example I made. The implementation may be found at <a href=\"http://legacy.jordanmclemore.com/labs/1.html\">http://legacy.jordanmclemore.com/labs/1.html</a>. You'll notice each parallax images is positioned as a background at a location. Each images is controlled by it's own controller and function called by the controller.<br />\n </p>\n\n<p>CSS:</p>\n\n<pre>\n<code class=\"language-css\">body {\n  margin: 0px; \n  background: url(bg.jpg) fixed;\n}\n\n#prlx_lyr_1 {\n  position: fixed;\n  background: url(parallax_bg1.png) no-repeat 0px 500px;\n  width: 100%;\n  height: 1200px;\n}\n\n#prlx_lyr_2 {\n  position: fixed;\n  background: url(parallax_bg1.png) no-repeat 300px 200px;\n  width: 100%;\n  height: 1200px;\n}\n\n#prlx_lyr_3 {\n  position: fixed;\n  background: url(parallax_bg1.png) no-repeat 400px 700px;\n  width: 100%;\n  height: 1200px;\n}\n\n#content_layer {\n  position: absolute;\n}</code></pre>\n\n<p>JavaScript:  </p>\n\n<pre>\n<code class=\"language-javascript\">&lt;script&gt;\n\nfunction parallax() {\n  var prlx_lyr_1 = document.getElementById('prlx_lyr_1');\n  prlx_lyr_1.style.top = -(window.pageYOffset / 8)+'px';\n}\n\nfunction parallax2() {\n  var prlx_lyr_2 = document.getElementById('prlx_lyr_2');\n  prlx_lyr_2.style.top = -(window.pageYOffset / 5)+'px';\n}\n\nfunction parallax3() {\n  var prlx_lyr_3 = document.getElementById('prlx_lyr_3');\n  prlx_lyr_3.style.top = -(window.pageYOffset / 2)+'px';\n}\n\nwindow.addEventListener(\"scroll\", parallax, false);\nwindow.addEventListener(\"scroll\", parallax2, false);\nwindow.addEventListener(\"scroll\", parallax3, false);\n\n&lt;/script&gt;</code></pre>\n\n<p> </p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "e03e2095-b9e9-4a87-ab5e-e7b979d7f6a5",
          "tid": 47,
          "name": "javascript",
          "alias": "/term/javascript"
        },
        {
          "id": "cd5c3a9a-9773-4329-b1c5-26cbde0b69c1",
          "tid": 38,
          "name": "css",
          "alias": "/term/css"
        },
        {
          "id": "f6d213b4-d0d4-442d-b169-f167f4dcbc44",
          "tid": 51,
          "name": "web development",
          "alias": "/term/web-development"
        }
      ],
      "field_image": [
        {
          "id": "aad879e0-5288-48b3-8caa-ca28ccfa7a47",
          "alt": "javascript logo",
          "title": "javascript logo",
          "url": "/sites/default/files/field/image/javascript_logo_unofficial-300x300.png",
          "fid": 91
        }
      ],
      "uid": {
        "id": "eb8472b3-54ac-4875-a631-5b313a3653db",
        "display_name": "Jordan McLemore"
      }
    },
    {
      "title": "Choosing between PHP, Lua, Go",
      "nid": 88,
      "alias": "/article/choosing-between-php-lua-go",
      "slug": "choosing-between-php-lua-go",
      "body": "<p>I have recently spent quite a bit of time trying to come up with a better way to implement RESTful service that serve data in JSON. This is because most of our work these days involves writing client-side JavaScript apps that present a rich UI in the browser and then do all server-side interactions via AJAX. In pursuit of the best way to implement RESTful service on the backend, I have tried my hands at <a href=\"http://golang.org/\"><strong>Go programming language</strong></a>, <a href=\"http://dlang.org/\">D programming language</a>, <a href=\"http://www.lua.org/\"><strong>Lua</strong></a> and of course <strong>Java</strong> and <strong>PHP</strong>. I was assuming that the Go or Lua would be much faster than PHP. Well, it turns out that at least without special optimizations, that is not the case.</p>\n\n<p>I wrote the following programs to compare their performance:</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n\nheader('Content-Type: application/json');\n\n$db = new PDO('mysql:host=localhost;dbname=db;charset=utf8', 'user', 'pass');\n$stmt = $db-&gt;query(\"SELECT * FROM node\");\n$result = array();\n$result['list'] = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC);\necho json_encode($result);\n</code></pre>\n\n<p> </p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n\ndefine('DRUPAL_ROOT', getcwd());\n\nrequire_once DRUPAL_ROOT . '/includes/bootstrap.inc';\ndrupal_bootstrap(DRUPAL_BOOTSTRAP_DATABASE);\n// drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);\n\nheader('Content-Type: application/json');\n\n$stmt = db_query(\"SELECT * FROM node\");\n$result = array();\n$result['list'] = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC);\necho json_encode($result);</code></pre>\n\n<p> </p>\n\n<pre>\njson = require \"cjson\"\n\nfunction json_result(key, data)\n  local result = {}\n  result[key] = data\n  ngx.say(json.encode(result))\nend\n\nfunction json_error(...)\n  local result = {}\n  result[\"message\"] = string.format(...)\n  ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR\n  ngx.say(json.encode(result))\nend\n\nmysql = require \"resty.mysql\"\n\nlocal db, err = mysql:new()\nif not db then\n  json_error(\"failed to instantiate mysql: %s\", err)\n  return\nend\n\ndb:set_timeout(1000) -- 1 sec\n\nlocal ok, err, errno, sqlstate = db:connect{\n  host = \"127.0.0.1\",\n  port = 3306,\n  database = \"db\",\n  user = \"user\",\n  password = \"pass\",\n  max_packet_size = 1024 * 1024\n}\n\nif not ok then\n    json_error(\"failed to connect: %s: %d %d\", err, errno, sqlstate)\n    return\nend\n\nresult, err, errno, sqlstate = db:query(\"SELECT * FROM node\")\n\nif not result then\n  json_error(\"failed to query: %s: %d %d\", err, errno, sqlstate)\nend\n\njson_result(\"list\", result)\n</pre>\n\n<p> </p>\n\n<p>The above programs simply query a table and return all rows and columns from that table as a JSON array.</p>\n\n<p>And then I hit the above programs with a bit of load using 'ab' HTTP load testing command. Following are the results ...<!--break--></p>\n\n<table align=\"center\" border=\"0\">\n\t<caption>Performance Comparison</caption>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Language/API</td>\n\t\t\t<td>Average time/request</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>PHP <a href=\"http://php.net/manual/en/book.pdo.php\">PDO</a> API</td>\n\t\t\t<td>0.519 ms</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>PHP <a href=\"https://www.drupal.org/developing/api/database\">Drupal</a> API</td>\n\t\t\t<td>4.281 ms</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>LuaJIT <a href=\"http://openresty.org/\">OpenResty</a> API<br />\n\t\t\twith code cache ON</td>\n\t\t\t<td>0.877 ms</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>LuaJIT <a href=\"http://openresty.org/\">OpenResty</a> API<br />\n\t\t\twith code cache OFF</td>\n\t\t\t<td>2.191 ms</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Go lang with <a href=\"https://github.com/jinzhu/gorm\">GORM</a> and <a href=\"https://github.com/ant0ine/go-json-rest/\">Go-JSON-REST</a></td>\n\t\t\t<td>0.880 ms</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>So it turns out that pure PHP PDO API version is the fastest. LuaJIT with code cache ON is a close second. LuaJIT with code cache OFF is slower. And  PHP with Drupal API version is slowest because it incurs the overhead of bootstrapping Drupal. And the Go version is about same as LuaJIT (didn't include the source code for that one). I didn't bother writing one for Java, as I know that it will perform pretty well, but consume a boatload of resources.</p>\n\n<p>As you can see, that PHP is still the fastest, even without <a href=\"http://php.net/manual/en/book.apc.php\">APC</a>. But in reality, the raw performance of the program itself won't matter, because running from across the internet, the network latency will add about another 100ms. So I'm not sure why I'd switch away from PHP just yet. PHP is not my favorite language. But at this time, I can't justify changing my whole programming stack without real benefits of switching.</p>\n",
      "changed": "2016-07-08T14:55:10+00:00",
      "created": "2014-06-27T22:59:26+00:00",
      "summary": "<p>I have recently spent quite a bit of time trying to come up with a better way to implement RESTful service that serve data in JSON. This is because most of our work these days involves writing client-side JavaScript apps that present a rich UI in the browser and then do all server-side interactions via AJAX. In pursuit of the best way to implement RESTful service on the backend, I have tried my hands at <a href=\"http://golang.org/\"><strong>Go programming language</strong></a>, <a href=\"http://dlang.org/\">D programming language</a>, <a href=\"http://www.lua.org/\"><strong>Lua</strong></a> and of course <strong>Java</strong> and <strong>PHP</strong>. I was assuming that the Go or Lua would be much faster than PHP. Well, it turns out that at least without special optimizations, that is not the case.</p>\n\n<p>I wrote the following programs to compare their performance:</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n\nheader('Content-Type: application/json');\n\n$db = new PDO('mysql:host=localhost;dbname=db;charset=utf8', 'user', 'pass');\n$stmt = $db-&gt;query(\"SELECT * FROM node\");\n$result = array();\n$result['list'] = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC);\necho json_encode($result);\n</code></pre>\n\n<p> </p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n\ndefine('DRUPAL_ROOT', getcwd());\n\nrequire_once DRUPAL_ROOT . '/includes/bootstrap.inc';\ndrupal_bootstrap(DRUPAL_BOOTSTRAP_DATABASE);\n// drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);\n\nheader('Content-Type: application/json');\n\n$stmt = db_query(\"SELECT * FROM node\");\n$result = array();\n$result['list'] = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC);\necho json_encode($result);</code></pre>\n\n<p> </p>\n\n<pre>\njson = require \"cjson\"\n\nfunction json_result(key, data)\n  local result = {}\n  result[key] = data\n  ngx.say(json.encode(result))\nend\n\nfunction json_error(...)\n  local result = {}\n  result[\"message\"] = string.format(...)\n  ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR\n  ngx.say(json.encode(result))\nend\n\nmysql = require \"resty.mysql\"\n\nlocal db, err = mysql:new()\nif not db then\n  json_error(\"failed to instantiate mysql: %s\", err)\n  return\nend\n\ndb:set_timeout(1000) -- 1 sec\n\nlocal ok, err, errno, sqlstate = db:connect{\n  host = \"127.0.0.1\",\n  port = 3306,\n  database = \"db\",\n  user = \"user\",\n  password = \"pass\",\n  max_packet_size = 1024 * 1024\n}\n\nif not ok then\n    json_error(\"failed to connect: %s: %d %d\", err, errno, sqlstate)\n    return\nend\n\nresult, err, errno, sqlstate = db:query(\"SELECT * FROM node\")\n\nif not result then\n  json_error(\"failed to query: %s: %d %d\", err, errno, sqlstate)\nend\n\njson_result(\"list\", result)\n</pre>\n\n<p> </p>\n\n<p>The above programs simply query a table and return all rows and columns from that table as a JSON array.</p>\n\n<p>And then I hit the above programs with a bit of load using 'ab' HTTP load testing command. Following are the results ...<!--break--></p>\n\n<table align=\"center\" border=\"0\">\n\t<caption>Performance Comparison</caption>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Language/API</td>\n\t\t\t<td>Average time/request</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>PHP <a href=\"http://php.net/manual/en/book.pdo.php\">PDO</a> API</td>\n\t\t\t<td>0.519 ms</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>PHP <a href=\"https://www.drupal.org/developing/api/database\">Drupal</a> API</td>\n\t\t\t<td>4.281 ms</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>LuaJIT <a href=\"http://openresty.org/\">OpenResty</a> API<br />\n\t\t\twith code cache ON</td>\n\t\t\t<td>0.877 ms</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>LuaJIT <a href=\"http://openresty.org/\">OpenResty</a> API<br />\n\t\t\twith code cache OFF</td>\n\t\t\t<td>2.191 ms</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Go lang with <a href=\"https://github.com/jinzhu/gorm\">GORM</a> and <a href=\"https://github.com/ant0ine/go-json-rest/\">Go-JSON-REST</a></td>\n\t\t\t<td>0.880 ms</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>So it turns out that pure PHP PDO API version is the fastest. LuaJIT with code cache ON is a close second. LuaJIT with code cache OFF is slower. And  PHP with Drupal API version is slowest because it incurs the overhead of bootstrapping Drupal. And the Go version is about same as LuaJIT (didn't include the source code for that one). I didn't bother writing one for Java, as I know that it will perform pretty well, but consume a boatload of resources.</p>\n\n<p>As you can see, that PHP is still the fastest, even without <a href=\"http://php.net/manual/en/book.apc.php\">APC</a>. But in reality, the raw performance of the program itself won't matter, because running from across the internet, the network latency will add about another 100ms. So I'm not sure why I'd switch away from PHP just yet. PHP is not my favorite language. But at this time, I can't justify changing my whole programming stack without real benefits of switching.</p>\n",
      "field_tags": [
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "0367a022-7f97-44d2-9c8e-0918a2a2ab75",
          "tid": 34,
          "name": "php",
          "alias": "/term/php"
        },
        {
          "id": "5b8a604c-4a5c-41cc-8700-204544709fdb",
          "tid": 32,
          "name": "go",
          "alias": "/term/go"
        },
        {
          "id": "35ad2aa7-994f-4625-bd2e-6535d93d4ef7",
          "tid": 83,
          "name": "lua",
          "alias": "/term/lua"
        }
      ],
      "field_image": [
        {
          "id": "cd5ef884-d7b5-429a-8d60-dcf32c82d1f6",
          "alt": "PHP logo",
          "title": "PHP logo",
          "url": "/sites/default/files/field/image/PHP.png",
          "fid": 109
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Getting Started with Wordpress Plugin Development",
      "nid": 85,
      "alias": "/article/getting-started-wordpress-plugin-development",
      "slug": "getting-started-wordpress-plugin-development",
      "body": "<p>Writing plugins for Wordpress may seem like a daunting task if you're new to Wordpress. But all it takes is a good starting point to get the ball rolling. Today I'll show you how to get started with your first simple Wordpress plugin. For this example, we will be making a plugin that automatically adds an image to all new posts.</p>\n\n<p>First, you will need to make the appropriate directories and files. In your <span>/wp-content/plugins/</span> directory, make a new folder with your desired plugin name, and a .php file with the same name.</p>\n\n<p>You should have a structure similar to this: <span>/wp-content/plugins/auto-image/auto-image.php</span> making sure that whatever name you chose, you use it for both the file and directory.</p>\n\n<p>Open up the .php with your favorite editor and add some basic plugin info into the file header:</p>\n\n<p>&lt;?php</p>\n\n<p>/**</p>\n\n<p> * Plugin Name: Auto Image Plugin</p>\n\n<p> * Description: Automatically adds an image to every post.</p>\n\n<p> * Version: 1.0</p>\n\n<p> * Author: SpinSpire</p>\n\n<p> * Author URI: <a href=\"http://www.spinspire.com\">http://www.spinspire.com</a></p>\n\n<p> */</p>\n\n<p>That's enough for Wordpress to see your plugin, and you can now enable the plugin, although it doesn't do anything yet.</p>\n\n<p>Still in the same .php, add these lines below:</p>\n\n<pre>\n<code class=\"language-php\">function auto_add_image( $content ) {\n  return $content . '&lt;p&gt;&lt;img src=\"YOUR IMG URL HERE\"&gt;&lt;/p&gt;';\n}</code></pre>\n\n<p>Hopefully your function name doesn't conflict with existing functions, so give it a somewhat unique name.</p>\n\n<p><span><span>Finally, add </span><span><span>add_filter('the_content','auto_add_image', 1);</span> between the plugin info and the function start.</span></span></p>\n\n<p><span>This will call a Wordpress function </span><span><span>add_filter</span> where the first value passed is the hook name \"<span>the_content</span>\" and the second being your function name \"<span>auto_add_image</span>\".</span></p>\n\n<p><span>You should have something similar to this:</span></p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n/**\n * Plugin Name: Auto Image Plugin\n * Description: Automatically adds an image to every post.\n * Version: 1.0\n * Author: SpinSpire\n * Author URI: http://www.spinspire.com\n */\n \nadd_filter('the_content','auto_add_image', 1);\n \nfunction auto_add_image( $content ) {\n  return $content . '&lt;p&gt;&lt;img src=\"YOUR IMG URL HERE\"&gt;&lt;/p&gt;';\n}</code></pre>\n\n<p>Now when you replace the placement text with your image URL, all you have left is to save and then enable the plugin under Wordpress Plugins settings.</p>\n\n<p>Obviously this is a very primitive plugin, but it shows how simple it is to get started with Wordpress Plugins.</p>\n\n<p>Make sure to read up on <a href=\"http://developer.wordpress.org/\" target=\"_blank\">http://developer.wordpress.org/</a> and the <a href=\"http://codex.wordpress.org/Writing_a_Plugin\" target=\"_blank\">Wordpress Codex</a> for more documentation on Wordpress and writing plugins for it.</p>\n",
      "changed": "2016-07-08T14:46:36+00:00",
      "created": "2014-06-29T01:13:00+00:00",
      "summary": "<p>Writing plugins for Wordpress may seem like a daunting task if you're new to Wordpress. But all it takes is a good starting point to get the ball rolling. Today I'll show you how to get started with your first simple Wordpress plugin. For this example, we will be making a plugin that automatically adds an image to all new posts.</p>\n\n<p>First, you will need to make the appropriate directories and files. In your <span>/wp-content/plugins/</span> directory, make a new folder with your desired plugin name, and a .php file with the same name.</p>\n\n<p>You should have a structure similar to this: <span>/wp-content/plugins/auto-image/auto-image.php</span> making sure that whatever name you chose, you use it for both the file and directory.</p>\n\n<p>Open up the .php with your favorite editor and add some basic plugin info into the file header:</p>\n\n<p>&lt;?php</p>\n\n<p>/**</p>\n\n<p> * Plugin Name: Auto Image Plugin</p>\n\n<p> * Description: Automatically adds an image to every post.</p>\n\n<p> * Version: 1.0</p>\n\n<p> * Author: SpinSpire</p>\n\n<p> * Author URI: <a href=\"http://www.spinspire.com\">http://www.spinspire.com</a></p>\n\n<p> */</p>\n\n<p>That's enough for Wordpress to see your plugin, and you can now enable the plugin, although it doesn't do anything yet.</p>\n\n<p>Still in the same .php, add these lines below:</p>\n\n<pre>\n<code class=\"language-php\">function auto_add_image( $content ) {\n  return $content . '&lt;p&gt;&lt;img src=\"YOUR IMG URL HERE\"&gt;&lt;/p&gt;';\n}</code></pre>\n\n<p>Hopefully your function name doesn't conflict with existing functions, so give it a somewhat unique name.</p>\n\n<p><span><span>Finally, add </span><span><span>add_filter('the_content','auto_add_image', 1);</span> between the plugin info and the function start.</span></span></p>\n\n<p><span>This will call a Wordpress function </span><span><span>add_filter</span> where the first value passed is the hook name \"<span>the_content</span>\" and the second being your function name \"<span>auto_add_image</span>\".</span></p>\n\n<p><span>You should have something similar to this:</span></p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n/**\n * Plugin Name: Auto Image Plugin\n * Description: Automatically adds an image to every post.\n * Version: 1.0\n * Author: SpinSpire\n * Author URI: http://www.spinspire.com\n */\n \nadd_filter('the_content','auto_add_image', 1);\n \nfunction auto_add_image( $content ) {\n  return $content . '&lt;p&gt;&lt;img src=\"YOUR IMG URL HERE\"&gt;&lt;/p&gt;';\n}</code></pre>\n\n<p>Now when you replace the placement text with your image URL, all you have left is to save and then enable the plugin under Wordpress Plugins settings.</p>\n\n<p>Obviously this is a very primitive plugin, but it shows how simple it is to get started with Wordpress Plugins.</p>\n\n<p>Make sure to read up on <a href=\"http://developer.wordpress.org/\" target=\"_blank\">http://developer.wordpress.org/</a> and the <a href=\"http://codex.wordpress.org/Writing_a_Plugin\" target=\"_blank\">Wordpress Codex</a> for more documentation on Wordpress and writing plugins for it.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "e209232f-1eb9-49c0-b4e6-2c44f528e299",
          "tid": 76,
          "name": "wordpress",
          "alias": "/term/wordpress"
        },
        {
          "id": "2c9c4fcd-c96e-47ff-b5d2-e6789c9290b6",
          "tid": 77,
          "name": "plugin",
          "alias": "/term/plugin"
        },
        {
          "id": "50a73c3c-57b2-48b8-a5db-2077031d31df",
          "tid": 78,
          "name": "development",
          "alias": "/term/development"
        }
      ],
      "field_image": [
        {
          "id": "29062e03-bd32-4ff4-bcef-e08c4e17c636",
          "alt": "Wordpress logo",
          "title": "Wordpress logo",
          "url": "/sites/default/files/field/image/wordpress-logo-simplified-rgb.png",
          "fid": 105
        }
      ],
      "uid": {
        "id": "81da7983-4f8e-44a3-b651-365124ae5b33",
        "display_name": "Mark Tsibulski"
      }
    },
    {
      "title": "Easily creating a GUI in Java using Jframe in NetBeans 8.0",
      "nid": 74,
      "alias": "/article/easily-creating-gui-java-using-jframe-netbeans-80",
      "slug": "easily-creating-gui-java-using-jframe-netbeans-80",
      "body": "<p>This guide will show you a quick introduction on using the JFrame tools in NetBeans to easily create a GUI for your java programs. NetBeans provides a user interface that allows you to very easily generate your GUI without having to hand code it yourself. This will organize your code and allows you to easily add logic and operations to your buttons, text fields, and more.</p>\n\n<p>Begin by creating a new project in NetBeans. Inside the new project create a new JFrame Form. If you have ever worked with visual basic this may look familiar. You can now see that you have a canvas and an area on the right with all sorts of buttons, tables, boxes, etc. Simply drag over an element and place it on the canvas. Then you may right click and change it's name and text. You may notice at the top there is tabs for design and source to switch views. You can double click the element and it will take you into the source and you should see something similar to this code.</p>\n\n<pre>\n<code class=\"language-java\">private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         \n\n//code goes in here, for example \n\nSystem.out.println(\"hello\");\n\n}</code></pre>\n\n<p>For every element you add, you can double click and it will take you to this ActionPerformed method. This makes it incredibly easily to add lots of elements to your java project and easily add logic to them. It also organizes your code for you. Now you can create great java projects with a full user interface, with minimal effort!</p>\n",
      "changed": "2016-07-08T14:35:01+00:00",
      "created": "2014-07-15T14:33:07+00:00",
      "summary": "<p>This guide will show you a quick introduction on using the JFrame tools in NetBeans to easily create a GUI for your java programs. NetBeans provides a user interface that allows you to very easily generate your GUI without having to hand code it yourself. This will organize your code and allows you to easily add logic and operations to your buttons, text fields, and more.</p>\n\n<p>Begin by creating a new project in NetBeans. Inside the new project create a new JFrame Form. If you have ever worked with visual basic this may look familiar. You can now see that you have a canvas and an area on the right with all sorts of buttons, tables, boxes, etc. Simply drag over an element and place it on the canvas. Then you may right click and change it's name and text. You may notice at the top there is tabs for design and source to switch views. You can double click the element and it will take you into the source and you should see something similar to this code.</p>\n\n<pre>\n<code class=\"language-java\">private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         \n\n//code goes in here, for example \n\nSystem.out.println(\"hello\");\n\n}</code></pre>\n\n<p>For every element you add, you can double click and it will take you to this ActionPerformed method. This makes it incredibly easily to add lots of elements to your java project and easily add logic to them. It also organizes your code for you. Now you can create great java projects with a full user interface, with minimal effort!</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "65e24887-606d-40f3-88f3-d6b97b10dc10",
          "tid": 54,
          "name": "java",
          "alias": "/term/java"
        },
        {
          "id": "4382ad6c-e013-4103-a306-6ee0cac60312",
          "tid": 55,
          "name": "gui",
          "alias": "/term/gui"
        },
        {
          "id": "4e9ecf77-ab9a-4e36-80d0-de0a18552431",
          "tid": 56,
          "name": "tutorial",
          "alias": "/term/tutorial"
        },
        {
          "id": "a815a4d8-66b0-4ae7-98a0-81584a0744e0",
          "tid": 57,
          "name": "netbeans",
          "alias": "/term/netbeans"
        }
      ],
      "field_image": [
        {
          "id": "081166ae-4604-498a-b8be-44c852ed1011",
          "alt": "JFrame UI",
          "title": "JFrame UI",
          "url": "/sites/default/files/field/image/MyJFrame.png",
          "fid": 92
        }
      ],
      "uid": {
        "id": "eb8472b3-54ac-4875-a631-5b313a3653db",
        "display_name": "Jordan McLemore"
      }
    },
    {
      "title": "Creating CSS3 WebKit animations",
      "nid": 76,
      "alias": "/article/creating-css3-webkit-animations",
      "slug": "creating-css3-webkit-animations",
      "body": "<p>WebKit is a layout engine software component for rendering web pages in the browser. It can easily be used to give HTML elements animations and properties involving movement. In this article I will be explaining some example code I wrote below. No Imports are required to use WebKit.</p>\n\n<p>You begin by declaring the Webkit and the time length<span> -webkit-animation: rotation 1.5s linear 1;</span> . -webkit-animation and -webkit-transform are the only WebKits I am using, although many others exist, such as -webkit-transition.</p>\n\n<p>The<span> -webkit-animation: rotation 1.5s linear 1;</span> calls my <span>@-webkit-keyframes rotation{ }</span>. Note that rotation is an alias and not a WebKit method name. Rotate however, is a webkit-transform method which can be passed a value. @Keyframes are where you implement the actions your animation will make. In my example I use only 0% and 100% to have 2 states. You can of course add many more for a more complicated animation. I also use <span>-webkit-animation-fill-mode: forwards;</span> to make my animation run only once.</p>\n\n<p>I'm sure you've probably noticed that my code is repeated two or three times, each time slightly reworded. Different browsers have a different engines for interpreting Webkits. Webkit is native to Apple's Safari and Google's Chrome and seem to work best in these environments. FireFox and Internet Explorer need slightly different syntax to work, so you'll want to test your animations on all browsers thoroughly. Note: WebKits are not supported in IE 9 or less, and some WebKits like the 3d transform are not even supported by IE today. Crazy right?</p>\n\n<pre>\n<code class=\"language-css\">img#spin{\n\n  -moz-border-radius: 50px/50px;\n\n  -webkit-border-radius: 50px 50px;\n\n  -webkit-animation: rotation 1.5s linear 1;\n\n  -moz-animation: rotation 1.5s linear 1;\n\n  -ms-animation: rotation 1.5s linear 1;\n\n}\n\n@-webkit-keyframes rotation {\n\n  0% { -webkit-transform: rotate(0deg); }\n\n  100% { -webkit-transform: rotate(360deg); }\n\n}\n\n@-moz-keyframes rotation {\n\n  0% { -moz-transform: rotate(0deg); }\n\n  100% { -moz-transform: rotate(360deg); }\n\n}\n\n@-ms-keyframes rotation {\n\n  0% { -ms-transform: rotate(0deg); }\n\n  100% { -ms-transform: rotate(360deg); }\n\n}\n\nimg#move{\n\n  right:70%;\n\n  position: relative;\n\n  /* Chrome, Safari, Opera */\n\n  -webkit-animation: move 1.5s;\n\n  animation: move 1.5s;\n\n  -moz-animation: move 1.5s;\n\n  -webkit-animation-fill-mode: forwards;\n\n  animation-fill-mode: forwards;\n\n}\n\n/* Chrome, Safari, Opera */\n\n@-webkit-keyframes move {\n\n  0%  {left:600px; top:0px;}\n\n  100% {left:-150px; top:0px;}\n\n}\n\n/* Standard syntax */\n\n@keyframes move {\n\n  0%  {left:600px; top:0px;}\n\n  100% {left:-150px; top:0px;}\n\n}\n\n/*Mozilla */\n\n@-moz-keyframes move {\n\n  0%  {left:600px; top:0px;}\n\n  100% {left:-150px; top:0px;}\n\n}\n\n@media all and (max-width: 530px){\n\n  img#spin{\n\n    display: none;\n\n  }\n\n  img#inspire{\n\n    display: none;\n\n  }\n\n  .header__logo-image{\n\n    display:block;\n\n  }\n\n}</code></pre>\n",
      "changed": "2016-07-08T14:30:58+00:00",
      "created": "2014-07-22T17:05:12+00:00",
      "summary": "<p>WebKit is a layout engine software component for rendering web pages in the browser. It can easily be used to give HTML elements animations and properties involving movement. In this article I will be explaining some example code I wrote below. No Imports are required to use WebKit.</p>\n\n<p>You begin by declaring the Webkit and the time length<span> -webkit-animation: rotation 1.5s linear 1;</span> . -webkit-animation and -webkit-transform are the only WebKits I am using, although many others exist, such as -webkit-transition.</p>\n\n<p>The<span> -webkit-animation: rotation 1.5s linear 1;</span> calls my <span>@-webkit-keyframes rotation{ }</span>. Note that rotation is an alias and not a WebKit method name. Rotate however, is a webkit-transform method which can be passed a value. @Keyframes are where you implement the actions your animation will make. In my example I use only 0% and 100% to have 2 states. You can of course add many more for a more complicated animation. I also use <span>-webkit-animation-fill-mode: forwards;</span> to make my animation run only once.</p>\n\n<p>I'm sure you've probably noticed that my code is repeated two or three times, each time slightly reworded. Different browsers have a different engines for interpreting Webkits. Webkit is native to Apple's Safari and Google's Chrome and seem to work best in these environments. FireFox and Internet Explorer need slightly different syntax to work, so you'll want to test your animations on all browsers thoroughly. Note: WebKits are not supported in IE 9 or less, and some WebKits like the 3d transform are not even supported by IE today. Crazy right?</p>\n\n<pre>\n<code class=\"language-css\">img#spin{\n\n  -moz-border-radius: 50px/50px;\n\n  -webkit-border-radius: 50px 50px;\n\n  -webkit-animation: rotation 1.5s linear 1;\n\n  -moz-animation: rotation 1.5s linear 1;\n\n  -ms-animation: rotation 1.5s linear 1;\n\n}\n\n@-webkit-keyframes rotation {\n\n  0% { -webkit-transform: rotate(0deg); }\n\n  100% { -webkit-transform: rotate(360deg); }\n\n}\n\n@-moz-keyframes rotation {\n\n  0% { -moz-transform: rotate(0deg); }\n\n  100% { -moz-transform: rotate(360deg); }\n\n}\n\n@-ms-keyframes rotation {\n\n  0% { -ms-transform: rotate(0deg); }\n\n  100% { -ms-transform: rotate(360deg); }\n\n}\n\nimg#move{\n\n  right:70%;\n\n  position: relative;\n\n  /* Chrome, Safari, Opera */\n\n  -webkit-animation: move 1.5s;\n\n  animation: move 1.5s;\n\n  -moz-animation: move 1.5s;\n\n  -webkit-animation-fill-mode: forwards;\n\n  animation-fill-mode: forwards;\n\n}\n\n/* Chrome, Safari, Opera */\n\n@-webkit-keyframes move {\n\n  0%  {left:600px; top:0px;}\n\n  100% {left:-150px; top:0px;}\n\n}\n\n/* Standard syntax */\n\n@keyframes move {\n\n  0%  {left:600px; top:0px;}\n\n  100% {left:-150px; top:0px;}\n\n}\n\n/*Mozilla */\n\n@-moz-keyframes move {\n\n  0%  {left:600px; top:0px;}\n\n  100% {left:-150px; top:0px;}\n\n}\n\n@media all and (max-width: 530px){\n\n  img#spin{\n\n    display: none;\n\n  }\n\n  img#inspire{\n\n    display: none;\n\n  }\n\n  .header__logo-image{\n\n    display:block;\n\n  }\n\n}</code></pre>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "ad86af78-5416-4afe-b741-9a7841bc52f9",
          "tid": 60,
          "name": "css3",
          "alias": "/term/css3"
        },
        {
          "id": "cadb0abd-9d58-4173-bcb6-e4c5e4b32b3d",
          "tid": 62,
          "name": "webkit",
          "alias": "/term/webkit"
        },
        {
          "id": "3db67170-377c-460c-8a12-835afec3d262",
          "tid": 63,
          "name": "animations",
          "alias": "/term/animations"
        },
        {
          "id": "3bb5337b-d072-4640-abb5-7602496f2085",
          "tid": 64,
          "name": "keyframes",
          "alias": "/term/keyframes"
        }
      ],
      "field_image": [
        {
          "id": "fcaac138-01c5-4837-8d7c-e9d96b138814",
          "alt": "Webkit logo",
          "title": "Webkit logo",
          "url": "/sites/default/files/field/image/Webkit_Logo.png",
          "fid": 94
        }
      ],
      "uid": {
        "id": "eb8472b3-54ac-4875-a631-5b313a3653db",
        "display_name": "Jordan McLemore"
      }
    },
    {
      "title": "Making Vim Syntax Highlighting Work Inside Git Bash",
      "nid": 79,
      "alias": "/article/making-vim-syntax-highlighting-work-inside-git-bash",
      "slug": "making-vim-syntax-highlighting-work-inside-git-bash",
      "body": "<p><span>If you have used Git Bash and its Vim, which both come as one package, you have probably stumbled on the issue of making syntax highlighting work.</span></p>\n\n<p><span>Whenever you type the command “vi file_name” in Git Bash and type, for example, some php code, you will see the plain white text on the black background. To try and fix the issue, you would just type the command “: syntax on”, because it always worked, right? Well, not so much with the Git Bash Vim scenario.</span></p>\n\n<p><span>The quick and simple fix to the problem is to install Vim separately and link Git Bash to the standalone Vim installation. Here is how to do it once Vim is installed:</span></p>\n\n<ul>\n\t<li>\n\t<p><span><span>go to Git/bin directory and edit the <strong>vim</strong> and<strong> vi</strong> files. (by default, the full directory is C:\\Program Files (x86)\\Git\\bin)</span></span></p>\n\t</li>\n\t<li>\n\t<p><span><span>replace “/share/vim/vim74/vim” with the directory of where you installed your Vim (by default it would be “C:/\"Program Files (x86)\"/Vim/vim74/vim”) in both files.</span></span></p>\n\t</li>\n</ul>\n\n<p><span>The “: syntax on” and “: syntax off” command will work fine now.</span></p>\n\n<p><span>Of course, the ultimate and easiest solution to this and other issues is just to install a linux VM and ssh to it, if you found yourself developing on windows.</span></p>\n",
      "changed": "2016-07-08T14:23:00+00:00",
      "created": "2014-07-28T15:06:54+00:00",
      "summary": "<p><span>If you have used Git Bash and its Vim, which both come as one package, you have probably stumbled on the issue of making syntax highlighting work.</span></p>\n\n<p><span>Whenever you type the command “vi file_name” in Git Bash and type, for example, some php code, you will see the plain white text on the black background. To try and fix the issue, you would just type the command “: syntax on”, because it always worked, right? Well, not so much with the Git Bash Vim scenario.</span></p>\n\n<p><span>The quick and simple fix to the problem is to install Vim separately and link Git Bash to the standalone Vim installation. Here is how to do it once Vim is installed:</span></p>\n\n<ul>\n\t<li>\n\t<p><span><span>go to Git/bin directory and edit the <strong>vim</strong> and<strong> vi</strong> files. (by default, the full directory is C:\\Program Files (x86)\\Git\\bin)</span></span></p>\n\t</li>\n\t<li>\n\t<p><span><span>replace “/share/vim/vim74/vim” with the directory of where you installed your Vim (by default it would be “C:/\"Program Files (x86)\"/Vim/vim74/vim”) in both files.</span></span></p>\n\t</li>\n</ul>\n\n<p><span>The “: syntax on” and “: syntax off” command will work fine now.</span></p>\n\n<p><span>Of course, the ultimate and easiest solution to this and other issues is just to install a linux VM and ssh to it, if you found yourself developing on windows.</span></p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "da95d833-a977-46bf-89c6-7c3ecc9bb994",
          "tid": 67,
          "name": "git bash",
          "alias": "/term/git-bash"
        },
        {
          "id": "cda476c7-6479-4e13-9ae8-8ef104a9a6f5",
          "tid": 68,
          "name": "vim",
          "alias": "/term/vim"
        },
        {
          "id": "d0696206-d048-4d69-a7b8-ecb24f382116",
          "tid": 69,
          "name": "syntax highlighting",
          "alias": "/term/syntax-highlighting"
        }
      ],
      "field_image": [
        {
          "id": "260de6fa-5613-443c-85d2-2a08cbbf213b",
          "alt": "vi shell",
          "title": "vi shell",
          "url": "/sites/default/files/field/image/vi.png",
          "fid": 97
        }
      ],
      "uid": {
        "id": "791ffe43-66bd-4375-815d-da7aac195cdd",
        "display_name": "Dmitry Boychev"
      }
    },
    {
      "title": "Dual DB Schema Setup with Drupal",
      "nid": 83,
      "alias": "/article/dual-db-schema-setup-drupal",
      "slug": "dual-db-schema-setup-drupal",
      "body": "<p>Anyone that has worked on an enterprise level Drupal application knows that having the transactional consumer data separate from your content will save you time and headaches during a release. With Drupal this is very much possible and it's fairly easy to setup. This can be setup with the DB on a separate server or on the same server where you currently have your Drupal DB residing.</p>\n\n<p>The first thing that you will need to do is edit your \"settings.php\" file for you drupal installation and add the following array block to configure your second schema:</p>\n\n<pre>\n<code class=\"language-php\">$databases['transactional_db'] = array('default' =&gt; array(\n   'driver' =&gt; 'mysql',\n   'database' =&gt; 'Name_of_your_Database',\n   'username' =&gt; 'Database_username',\n   'password' =&gt; 'some-password',\n   'host' =&gt; 'mysql-server-host-name',\n   'port' =&gt; 3360\n));</code></pre>\n\n<p>Next step, is to copy the Drupal Database API functions that you need (like: db_select(), db_insert() and other) into your own custom module and prefex the function names with a prefix of your liking. I would suggest something like transactional_db_select(), where \"transactional_\" is your prefix. Esentially, all you are doing is copying the original Drupal API functions into a module, renaming the functions accordingly and adding two additional lines to each function that you have copied. In addition, you will need to create a Drupal variable (I called it \"secondary_db_schema\") where you will store the alias that you gave above in \"settings.php\" file, in my case I chos \"transactional_db\" as the alias. After the above step this is what your modified function should look like (the two additional lines of code in the below function, will be the same for the other Drupal DB API functions that you choose to modify):</p>\n\n<pre>\n<code class=\"language-php\">function transactional_db_select($table, $alias = NULL, array $options = array()) {\n   db_set_active(variable_get('secondary_db_schema', 'default')); //Added line of code. Setting the \"transactional_db\" as active.\n   if (empty($options['target'])) {\n      $options['target'] = 'default';\n   }\n   $result = Database::getConnection($options['target'])-&gt;select($table, $alias, $options);\n   db_set_active('default'); //Added line of code. Setting the \"default\" to be active again, as soon as you are done with your query.\n   return $result;\n}</code></pre>\n\n<p>It is important to note that this is not the only way you can achieve this in Drupal, there are probably at least two other methods to get this kind of Database setup. This method might now work for everyone, but it did workout great for me. You might also consider looking at \"Master\" and \"Slave\" configuration if this does not fit your needs. Hope this helps someone out.</p>\n",
      "changed": "2016-07-08T14:01:27+00:00",
      "created": "2014-07-29T00:47:42+00:00",
      "summary": "<p>Anyone that has worked on an enterprise level Drupal application knows that having the transactional consumer data separate from your content will save you time and headaches during a release. With Drupal this is very much possible and it's fairly easy to setup. This can be setup with the DB on a separate server or on the same server where you currently have your Drupal DB residing.</p>\n\n<p>The first thing that you will need to do is edit your \"settings.php\" file for you drupal installation and add the following array block to configure your second schema:</p>\n\n<pre>\n<code class=\"language-php\">$databases['transactional_db'] = array('default' =&gt; array(\n   'driver' =&gt; 'mysql',\n   'database' =&gt; 'Name_of_your_Database',\n   'username' =&gt; 'Database_username',\n   'password' =&gt; 'some-password',\n   'host' =&gt; 'mysql-server-host-name',\n   'port' =&gt; 3360\n));</code></pre>\n\n<p>Next step, is to copy the Drupal Database API functions that you need (like: db_select(), db_insert() and other) into your own custom module and prefex the function names with a prefix of your liking. I would suggest something like transactional_db_select(), where \"transactional_\" is your prefix. Esentially, all you are doing is copying the original Drupal API functions into a module, renaming the functions accordingly and adding two additional lines to each function that you have copied. In addition, you will need to create a Drupal variable (I called it \"secondary_db_schema\") where you will store the alias that you gave above in \"settings.php\" file, in my case I chos \"transactional_db\" as the alias. After the above step this is what your modified function should look like (the two additional lines of code in the below function, will be the same for the other Drupal DB API functions that you choose to modify):</p>\n\n<pre>\n<code class=\"language-php\">function transactional_db_select($table, $alias = NULL, array $options = array()) {\n   db_set_active(variable_get('secondary_db_schema', 'default')); //Added line of code. Setting the \"transactional_db\" as active.\n   if (empty($options['target'])) {\n      $options['target'] = 'default';\n   }\n   $result = Database::getConnection($options['target'])-&gt;select($table, $alias, $options);\n   db_set_active('default'); //Added line of code. Setting the \"default\" to be active again, as soon as you are done with your query.\n   return $result;\n}</code></pre>\n\n<p>It is important to note that this is not the only way you can achieve this in Drupal, there are probably at least two other methods to get this kind of Database setup. This method might now work for everyone, but it did workout great for me. You might also consider looking at \"Master\" and \"Slave\" configuration if this does not fit your needs. Hope this helps someone out.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "1822c025-befd-4c66-936e-7248908dc68c",
          "tid": 75,
          "name": "database",
          "alias": "/term/database"
        },
        {
          "id": "18b7f0a8-d5ee-4328-abc8-93471c27be8f",
          "tid": 33,
          "name": "mysql",
          "alias": "/term/mysql"
        }
      ],
      "field_image": [
        {
          "id": "8a74a43b-bbf8-4aa1-8be6-33b080c466b2",
          "alt": "database image",
          "title": "database image",
          "url": "/sites/default/files/field/image/database.jpg",
          "fid": 103
        }
      ],
      "uid": {
        "id": "d5610ded-b9d1-48e0-87b6-38a83b280363",
        "display_name": "Sergey Cheban"
      }
    },
    {
      "title": "Migrate/Migrated2d: Linking Migrated Nodes To Non-migrated Terms",
      "nid": 84,
      "alias": "/article/migratemigrated2d-linking-migrated-nodes-non-migrated-terms",
      "slug": "migratemigrated2d-linking-migrated-nodes-non-migrated-terms",
      "body": "<p>Migrate and Migrate d2d modules expose a powerful API to developers who have the task to migrate a part or an entire website to Drupal 7; these two modules come in handy whenever the migration task is subject to complex business rules. One short article is far from being enough to offer an in-depth look at the countless opportunities offered by these two modules. Therefore, this article will explain how to solve a specific migration issue, hoping in the process, to help  grasp what can be done with these two modules.</p>\n\n<p>For more information regarding the migrate/migrated2d API, <a href=\"https://www.drupal.org/node/1813498\">click here.</a></p>\n\n<p>The title of the article is self-explanatory, so here is a description of the design approach before diving in.</p>\n\n<ul>\n\t<li>Identifying unmigrated terms that are mapped to the node.</li>\n\t<li>Unlinking the node and the terms before the node migration.</li>\n\t<li>Saving the IDs of the terms in a static variable.</li>\n\t<li>Relinking the node and the terms right after persisting the node.</li>\n</ul>\n\n<p>Also, I need to mention that prepareRow() and complete() belong to the migration base classes; prepareRow() is called very early in the process before importing each node and complete() is called right after persisting each node.</p>\n\n<p>To start, create a method to unlink terms from node and then call it in prepareRow() right after saving terms per vocabulary in separate arrays. Since this process will be repeated for each nodes, creating a getter/setter for taxonomy related processes will prove helpful.</p>\n\n<p>Term IDs Getter/Setter</p>\n\n<pre>\n<code class=\"language-php\">public function tids_getter_setter ($voc = null ,$term_to_add = null, $resetting = false, $returning = false, $assigning = false) {\n    static $term_ids = array();\n    if (!empty($assigning)) {\n      $term_ids[$voc][] = $term_to_add;\n    } elseif ($resetting) {\n      $term_ids[$voc] = null;     \n    } elseif ($returning) {\n      return $term_ids[$voc];\n    }\n}</code></pre>\n\n<p>Function unlinking terms and node</p>\n\n<pre>\n<code class=\"language-php\">public function rm_unmigrated_terms($ids_to_check, $migrate_map_table, $row, $vocab_var_name, $migration_class, $field_vocab) {\n    if (!empty($ids_to_check)) {\n      $query = db_select($migrate_map_table, 'commkeys')\n              -&gt;condition('commkeys.sourceid1', $ids_to_check, 'IN')\n              -&gt;isNull('destid1')\n              -&gt;fields('commkeys', array('sourceid1', 'destid1'));\n      $result = $query-&gt;execute()-&gt;fetchAll();\n    }\n    if (!empty($result)) {\n      foreach ($result as $term_tids) {\n        if (empty($term_tids-&gt;destid1)) {\n          // trick to get the key of the tid to remove from $row\n          if (($key = array_search($term_tids-&gt;sourceid1, $ids_to_check)) !== false) {\n            // save  the source tid in a static variable then remove it from $row. the tid from static variable will be used in complete()\n            $migration_class-&gt;tids_getter_setter($vocab_var_name, $ids_to_check[$key], false, false, true);\n            unset($row-&gt;{$field_vocab}[$key]);\n          }\n        }\n      }\n    }\n    return $row;\n}</code></pre>\n\n<p>The above function is called below, in prepareRow()</p>\n\n<pre>\n<code class=\"language-php\">public function prepareRow($row) {\n  if (parent::prepareRow($row) === FALSE) {\n    return FALSE; \n  }\n  $keywords_ids_to_check = $row-&gt;field_keywords;\n  $topics_ids_to_check = $row-&gt;field_topicterms;\n  $migration_class = $this;\n  // remove unmigrated tags from $row\n  $row = $this-&gt;rm_unmigrated_terms($tags_ids_to_check, 'migrate_map_twtags', $row, 'migrate_tags_tids', $migration_class, 'field_tags');\n  // remove unmigrated keywords from $row\n  $row = $this-&gt;rm_unmigrated_terms($keywords_ids_to_check, 'migrate_map_twkeywords', $row, 'migrate_keywords_tids', $migration_class, 'field_keywords');\n}</code></pre>\n\n<p>Function relinking terms and node</p>\n\n<pre>\n<code class=\"language-php\">public function linking_stories_to_unmigrated_terms($terms_ids, $vocab_id, $vocab_var_name, $migration_class, $node) {\n  //getting names of terms to map\n  if (!empty($terms_ids)) {\n    $query = db_select('d7_techwell.taxonomy_term_data', 'twttd')\n             -&gt;condition('twttd.tid', $terms_ids)\n             -&gt;fields('twttd', array('name'))\n             -&gt;execute()\n             -&gt;fetchAll();\n    // reset static variable to avoid that the value for current story migration be used during next node migration\n    $migration_class-&gt;tids_getter_setter($vocab_var_name, 0, true, false, false);\n    if (!empty($query)) {\n      foreach ($query as $term_name) {\n        $query2 = db_select('d7_sqe_communities.taxonomy_term_data', 'comttd')\n                  -&gt;condition('comttd.vid', $vocab_id)\n                  -&gt;condition('comttd.name', $term_name-&gt;name)\n                  -&gt;distinct()\n                  -&gt;fields('comttd', array('tid'))\n                  -&gt;execute()-&gt;fetchAll();\n        // adding mapping between nodes and terms\n        $query3 = db_insert('d7_sqe_communities.taxonomy_index')\n                  -&gt;fields(array(\n                      'nid' =&gt; $node-&gt;nid,\n                      'tid' =&gt; $query2[0]-&gt;tid,\n                      'sticky' =&gt; 0,\n                      'created' =&gt; REQUEST_TIME\n                    )\n                  )\n                  -&gt;execute();\n      }\n    }\n  }\n}</code></pre>\n\n<p>Finally, in complete(), gathering the information needed to relink node and terms then calling the above function to do it</p>\n\n<pre>\n<code class=\"language-php\">function complete($node, stdClass $row) {\n  $migration_class = $this;\n  // linking node to unmigrated topic terms in target\n  $topics_to_link = $migration_class-&gt;tids_getter_setter('migrate_topics_tids', 0, false, true, false);\n  $tags_to_link = $migration_class-&gt;tids_getter_setter('migrate_tags_tids', 0, false, true, false);\n  $keywords_to_link = $migration_class-&gt;tids_getter_setter('migrate_keywords_tids', 0, false, true, false);\n  if (!empty($topics_to_link)) {\n    $this-&gt;linking_stories_to_unmigrated_terms($topics_to_link, '2', 'migrate_topics_tids', $migration_class, $node);\n  }\n  // linking node to unmigrated keywords terms in target\n  if (!empty($tags_to_link)) {\n    $this-&gt;linking_stories_to_unmigrated_terms($tags_to_link, '11', 'migrate_keywords_tids', $migration_class, $node);\n  }\n  // linking node to unmigrated tags terms in target\n  if (!empty($keywords_to_link)) {\n    $this-&gt;linking_stories_to_unmigrated_terms($keywords_to_link, '17', 'migrate_tags_tids', $migration_class, $node);\n  }\n}</code></pre>\n",
      "changed": "2016-07-08T13:59:33+00:00",
      "created": "2014-07-29T02:52:16+00:00",
      "summary": "<p>Migrate and Migrate d2d modules expose a powerful API to developers who have the task to migrate a part or an entire website to Drupal 7; these two modules come in handy whenever the migration task is subject to complex business rules. One short article is far from being enough to offer an in-depth look at the countless opportunities offered by these two modules. Therefore, this article will explain how to solve a specific migration issue, hoping in the process, to help  grasp what can be done with these two modules.</p>\n\n<p>For more information regarding the migrate/migrated2d API, <a href=\"https://www.drupal.org/node/1813498\">click here.</a></p>\n\n<p>The title of the article is self-explanatory, so here is a description of the design approach before diving in.</p>\n\n<ul>\n\t<li>Identifying unmigrated terms that are mapped to the node.</li>\n\t<li>Unlinking the node and the terms before the node migration.</li>\n\t<li>Saving the IDs of the terms in a static variable.</li>\n\t<li>Relinking the node and the terms right after persisting the node.</li>\n</ul>\n\n<p>Also, I need to mention that prepareRow() and complete() belong to the migration base classes; prepareRow() is called very early in the process before importing each node and complete() is called right after persisting each node.</p>\n\n<p>To start, create a method to unlink terms from node and then call it in prepareRow() right after saving terms per vocabulary in separate arrays. Since this process will be repeated for each nodes, creating a getter/setter for taxonomy related processes will prove helpful.</p>\n\n<p>Term IDs Getter/Setter</p>\n\n<pre>\n<code class=\"language-php\">public function tids_getter_setter ($voc = null ,$term_to_add = null, $resetting = false, $returning = false, $assigning = false) {\n    static $term_ids = array();\n    if (!empty($assigning)) {\n      $term_ids[$voc][] = $term_to_add;\n    } elseif ($resetting) {\n      $term_ids[$voc] = null;     \n    } elseif ($returning) {\n      return $term_ids[$voc];\n    }\n}</code></pre>\n\n<p>Function unlinking terms and node</p>\n\n<pre>\n<code class=\"language-php\">public function rm_unmigrated_terms($ids_to_check, $migrate_map_table, $row, $vocab_var_name, $migration_class, $field_vocab) {\n    if (!empty($ids_to_check)) {\n      $query = db_select($migrate_map_table, 'commkeys')\n              -&gt;condition('commkeys.sourceid1', $ids_to_check, 'IN')\n              -&gt;isNull('destid1')\n              -&gt;fields('commkeys', array('sourceid1', 'destid1'));\n      $result = $query-&gt;execute()-&gt;fetchAll();\n    }\n    if (!empty($result)) {\n      foreach ($result as $term_tids) {\n        if (empty($term_tids-&gt;destid1)) {\n          // trick to get the key of the tid to remove from $row\n          if (($key = array_search($term_tids-&gt;sourceid1, $ids_to_check)) !== false) {\n            // save  the source tid in a static variable then remove it from $row. the tid from static variable will be used in complete()\n            $migration_class-&gt;tids_getter_setter($vocab_var_name, $ids_to_check[$key], false, false, true);\n            unset($row-&gt;{$field_vocab}[$key]);\n          }\n        }\n      }\n    }\n    return $row;\n}</code></pre>\n\n<p>The above function is called below, in prepareRow()</p>\n\n<pre>\n<code class=\"language-php\">public function prepareRow($row) {\n  if (parent::prepareRow($row) === FALSE) {\n    return FALSE; \n  }\n  $keywords_ids_to_check = $row-&gt;field_keywords;\n  $topics_ids_to_check = $row-&gt;field_topicterms;\n  $migration_class = $this;\n  // remove unmigrated tags from $row\n  $row = $this-&gt;rm_unmigrated_terms($tags_ids_to_check, 'migrate_map_twtags', $row, 'migrate_tags_tids', $migration_class, 'field_tags');\n  // remove unmigrated keywords from $row\n  $row = $this-&gt;rm_unmigrated_terms($keywords_ids_to_check, 'migrate_map_twkeywords', $row, 'migrate_keywords_tids', $migration_class, 'field_keywords');\n}</code></pre>\n\n<p>Function relinking terms and node</p>\n\n<pre>\n<code class=\"language-php\">public function linking_stories_to_unmigrated_terms($terms_ids, $vocab_id, $vocab_var_name, $migration_class, $node) {\n  //getting names of terms to map\n  if (!empty($terms_ids)) {\n    $query = db_select('d7_techwell.taxonomy_term_data', 'twttd')\n             -&gt;condition('twttd.tid', $terms_ids)\n             -&gt;fields('twttd', array('name'))\n             -&gt;execute()\n             -&gt;fetchAll();\n    // reset static variable to avoid that the value for current story migration be used during next node migration\n    $migration_class-&gt;tids_getter_setter($vocab_var_name, 0, true, false, false);\n    if (!empty($query)) {\n      foreach ($query as $term_name) {\n        $query2 = db_select('d7_sqe_communities.taxonomy_term_data', 'comttd')\n                  -&gt;condition('comttd.vid', $vocab_id)\n                  -&gt;condition('comttd.name', $term_name-&gt;name)\n                  -&gt;distinct()\n                  -&gt;fields('comttd', array('tid'))\n                  -&gt;execute()-&gt;fetchAll();\n        // adding mapping between nodes and terms\n        $query3 = db_insert('d7_sqe_communities.taxonomy_index')\n                  -&gt;fields(array(\n                      'nid' =&gt; $node-&gt;nid,\n                      'tid' =&gt; $query2[0]-&gt;tid,\n                      'sticky' =&gt; 0,\n                      'created' =&gt; REQUEST_TIME\n                    )\n                  )\n                  -&gt;execute();\n      }\n    }\n  }\n}</code></pre>\n\n<p>Finally, in complete(), gathering the information needed to relink node and terms then calling the above function to do it</p>\n\n<pre>\n<code class=\"language-php\">function complete($node, stdClass $row) {\n  $migration_class = $this;\n  // linking node to unmigrated topic terms in target\n  $topics_to_link = $migration_class-&gt;tids_getter_setter('migrate_topics_tids', 0, false, true, false);\n  $tags_to_link = $migration_class-&gt;tids_getter_setter('migrate_tags_tids', 0, false, true, false);\n  $keywords_to_link = $migration_class-&gt;tids_getter_setter('migrate_keywords_tids', 0, false, true, false);\n  if (!empty($topics_to_link)) {\n    $this-&gt;linking_stories_to_unmigrated_terms($topics_to_link, '2', 'migrate_topics_tids', $migration_class, $node);\n  }\n  // linking node to unmigrated keywords terms in target\n  if (!empty($tags_to_link)) {\n    $this-&gt;linking_stories_to_unmigrated_terms($tags_to_link, '11', 'migrate_keywords_tids', $migration_class, $node);\n  }\n  // linking node to unmigrated tags terms in target\n  if (!empty($keywords_to_link)) {\n    $this-&gt;linking_stories_to_unmigrated_terms($keywords_to_link, '17', 'migrate_tags_tids', $migration_class, $node);\n  }\n}</code></pre>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "8676b615-7438-4cc3-9f66-c0853aab5e38",
          "alt": "Drupal migration image",
          "title": "Drupal migration image",
          "url": "/sites/default/files/field/image/d2d.jpg",
          "fid": 104
        }
      ],
      "uid": {
        "id": "821d8608-32bf-4eba-a5ad-41210c32c1c5",
        "display_name": "Raymond Mbuyi"
      }
    },
    {
      "title": "Drupal 7 - Bulk Field Update on Demand",
      "nid": 86,
      "alias": "/article/drupal-7-bulk-field-update-demand",
      "slug": "drupal-7-bulk-field-update-demand",
      "body": "<p>While building an event organization website, there was a requirement to have each event approved by a legal department before the organizer was allowed to publish any event.</p>\n\n<p>A custom status field with conditions based on this field was the best approach.</p>\n\n<p>Updating / rewriting a field for multiple nodes on demand can be achieved with <a href=\"https://www.drupal.org/project/views\">Views</a> and <a href=\"https://www.drupal.org/project/views_bulk_operations\">Views Bulk Operations</a>.</p>\n\n<ul>\n\t<li>Enable <a href=\"https://www.drupal.org/project/views\">Views</a> and <a href=\"https://www.drupal.org/project/views_bulk_operations\">Views Bulk Operations</a>.</li>\n\t<li>In your custom module impliment hook_action_info().</li>\n</ul>\n\n<p>This gives you the ability to add your custom action to VBO list.</p>\n\n<pre class=\"true; codetag\">\n </pre>\n\n<pre>\n<code class=\"language-php\">&lt;?php\nfunction MYMODULE_action_info() {\n  return array(\n    'MYMODULE_my_custom_action' =&gt; array(\n      // The type of object this action acts upon.\n      'type' =&gt; 'entity',\n      // The human-readable name of the action, which should be passed through the t() function for translation.\n      'label' =&gt; t('Approve event'),\n      // If FALSE, then the action doesn't require any extra configuration.\n      'configurable' =&gt; FALSE,\n      // Set this to TRUE if you want to pass row information to action $context\n      'pass rows' =&gt; TRUE,\n    ),\n  );\n}</code></pre>\n\n<ul>\n\t<li>Next we want to add logic to our custom action.</li>\n</ul>\n\n<p>In your custom module implement hook_my_custom_action(&amp;$node, $context).</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\nfunction MYMODULE_my_custom_action(&amp;$entity, $context = array()) { \n    // Make necessary changes.\n\t$entity-&gt;field_status['und'][0]['value'] = 'approved';\n    // Save changes.\n\tnode_save($entity);\n\t// Set a custom message after processing.\n\tdrupal_set_message(t($entity-&gt;title . ' [' . $entity-&gt;nid . '] has been approved for publishing'), 'status');\n}</code></pre>\n\n<p>Although this is a very simple custom operation, creating a custom bulk operation can be as complex as needed. For more detailed information, visit the <a href=\"https://www.drupal.org/node/2052067\">Views Bulk Operations development guide (Drupal 7)</a>.</p>\n",
      "changed": "2016-07-08T13:51:37+00:00",
      "created": "2014-07-29T15:48:50+00:00",
      "summary": "<p>While building an event organization website, there was a requirement to have each event approved by a legal department before the organizer was allowed to publish any event.</p>\n\n<p>A custom status field with conditions based on this field was the best approach.</p>\n\n<p>Updating / rewriting a field for multiple nodes on demand can be achieved with <a href=\"https://www.drupal.org/project/views\">Views</a> and <a href=\"https://www.drupal.org/project/views_bulk_operations\">Views Bulk Operations</a>.</p>\n\n<ul>\n\t<li>Enable <a href=\"https://www.drupal.org/project/views\">Views</a> and <a href=\"https://www.drupal.org/project/views_bulk_operations\">Views Bulk Operations</a>.</li>\n\t<li>In your custom module impliment hook_action_info().</li>\n</ul>\n\n<p>This gives you the ability to add your custom action to VBO list.</p>\n\n<pre class=\"true; codetag\">\n </pre>\n\n<pre>\n<code class=\"language-php\">&lt;?php\nfunction MYMODULE_action_info() {\n  return array(\n    'MYMODULE_my_custom_action' =&gt; array(\n      // The type of object this action acts upon.\n      'type' =&gt; 'entity',\n      // The human-readable name of the action, which should be passed through the t() function for translation.\n      'label' =&gt; t('Approve event'),\n      // If FALSE, then the action doesn't require any extra configuration.\n      'configurable' =&gt; FALSE,\n      // Set this to TRUE if you want to pass row information to action $context\n      'pass rows' =&gt; TRUE,\n    ),\n  );\n}</code></pre>\n\n<ul>\n\t<li>Next we want to add logic to our custom action.</li>\n</ul>\n\n<p>In your custom module implement hook_my_custom_action(&amp;$node, $context).</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\nfunction MYMODULE_my_custom_action(&amp;$entity, $context = array()) { \n    // Make necessary changes.\n\t$entity-&gt;field_status['und'][0]['value'] = 'approved';\n    // Save changes.\n\tnode_save($entity);\n\t// Set a custom message after processing.\n\tdrupal_set_message(t($entity-&gt;title . ' [' . $entity-&gt;nid . '] has been approved for publishing'), 'status');\n}</code></pre>\n\n<p>Although this is a very simple custom operation, creating a custom bulk operation can be as complex as needed. For more detailed information, visit the <a href=\"https://www.drupal.org/node/2052067\">Views Bulk Operations development guide (Drupal 7)</a>.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "95c73446-1a20-4383-86dd-c10435781bb0",
          "tid": 79,
          "name": "views bulk operations",
          "alias": "/term/views-bulk-operations"
        },
        {
          "id": "5da9ad1f-7d8e-48bc-aaa3-40db2d874f70",
          "tid": 80,
          "name": "custom bulk operation",
          "alias": "/term/custom-bulk-operation"
        },
        {
          "id": "2c592ac4-7e07-4265-a7d9-13a13e81953b",
          "tid": 81,
          "name": "bulk field update",
          "alias": "/term/bulk-field-update"
        }
      ],
      "field_image": [
        {
          "id": "157ccf46-a213-440f-b411-cbfafec26481",
          "alt": "conveyor belt",
          "title": "conveyor belt",
          "url": "/sites/default/files/field/image/zyakZii2JpE9U847.jpg",
          "fid": 106
        }
      ],
      "uid": {
        "id": "06c143a4-9ad5-411b-93d8-0118aa7320e3",
        "display_name": "Vitaly Muzichuk"
      }
    },
    {
      "title": "Display of different Views depending on the logged in User",
      "nid": 80,
      "alias": "/article/display-different-views-depending-logged-user",
      "slug": "display-different-views-depending-logged-user",
      "body": "<p>Have you ever desired to have display of different View filter criteria depending on the user's role? There are two ways of achieving this, I will explain both the ways in this article. </p>\n\n<p>In following example, I want to show 4 search criteria to a user with administrator role: Event title, Date of Event, Location, Event status.  Further, I want to show two search criteria to all other roles: Event title and Location (shown in below images) . <!--break--></p>\n\n<p><img alt=\"Administrator View\" height=\"401\" src=\"/sites/spinspire.com/files/field/image/admin-Event%20list.png\" width=\"763\" /> <img alt=\"Anonymous View\" height=\"249\" src=\"/sites/spinspire.com/files/field/image/anonymous%20-Event%20list.png\" width=\"736\" /></p>\n\n<p>To achieve this one can create two different views and set permissions for roles (Go to View edit page -&gt; Page Settings -&gt; access, click on Roles and give permissions depending on the roles). The issue with this approach is that two Views on different urls are created. This is not what we need. </p>\n\n<p>An alternative approach is to write a few lines of php and get different search criteria in the same view and same url. Check out the following code: </p>\n\n<pre>\n<code class=\"language-php\">&lt;?php \nfunction mymod_permission() {\n  return array(\n    'use advanced search on events' =&gt; array(\n      'title' =&gt; t('Full access for \\'Advanced Search\\' in Event List'),\n    ),\n  );\n}\nfunction mymod_views_pre_view(&amp;$view) {\n  switch ($view-&gt;name) {\n    case 'event_list': {\n      if(!user_access('use advanced search on events')) {\n        $view_filters = $view-&gt;display_handler-&gt;get_option('filters');\n        unset($view_filters['field_date_value']);\n        unset($view_filters['field_address_title']);\n        $view-&gt;display_handler-&gt;override_option('filters', $view_filters);\n      }\n      break;\n    }\n  }\n}</code></pre>\n\n<p>In the above code, hook_views_pre_view is used to alter a view before it is displayed; for more information on this hook visit this <a href=\"https://api.drupal.org/api/views/views.api.php/function/hook_views_pre_view/7\" target=\"_blank\">page</a>. Switch case statement is used to select the view that needs this implementation, here the machine name of the view is 'event_list'.  Next permissions are checked — if the user role does not has permission “use advance search on events”. This permission is defined in hook_permission. Then, unset $view_filters['field_date_value'], $view_filters['field_event_status'] filter fields. PHP function unset() destroys a variable, so the search filters which are not included in the View can be disabled using this function. </p>\n\n<p>This is an easy way to create different displays of a view based on permission assigned to user role.</p>\n\n<p>NOTE: </p>\n\n<ul>\n\t<li>These filter criteria are exposed to the users (check \"Expose this filter to visitors, to allow them to change it\" to expose the filter criteria).</li>\n</ul>\n",
      "changed": "2016-07-08T13:50:20+00:00",
      "created": "2014-10-06T05:09:09+00:00",
      "summary": "<p>Have you ever desired to have display of different View filter criteria depending on the user's role? There are two ways of achieving this, I will explain both the ways in this article. </p>\n\n<p>In following example, I want to show 4 search criteria to a user with administrator role: Event title, Date of Event, Location, Event status.  Further, I want to show two search criteria to all other roles: Event title and Location (shown in below images) . <!--break--></p>\n\n<p><img alt=\"Administrator View\" height=\"401\" src=\"/sites/spinspire.com/files/field/image/admin-Event%20list.png\" width=\"763\" /> <img alt=\"Anonymous View\" height=\"249\" src=\"/sites/spinspire.com/files/field/image/anonymous%20-Event%20list.png\" width=\"736\" /></p>\n\n<p>To achieve this one can create two different views and set permissions for roles (Go to View edit page -&gt; Page Settings -&gt; access, click on Roles and give permissions depending on the roles). The issue with this approach is that two Views on different urls are created. This is not what we need. </p>\n\n<p>An alternative approach is to write a few lines of php and get different search criteria in the same view and same url. Check out the following code: </p>\n\n<pre>\n<code class=\"language-php\">&lt;?php \nfunction mymod_permission() {\n  return array(\n    'use advanced search on events' =&gt; array(\n      'title' =&gt; t('Full access for \\'Advanced Search\\' in Event List'),\n    ),\n  );\n}\nfunction mymod_views_pre_view(&amp;$view) {\n  switch ($view-&gt;name) {\n    case 'event_list': {\n      if(!user_access('use advanced search on events')) {\n        $view_filters = $view-&gt;display_handler-&gt;get_option('filters');\n        unset($view_filters['field_date_value']);\n        unset($view_filters['field_address_title']);\n        $view-&gt;display_handler-&gt;override_option('filters', $view_filters);\n      }\n      break;\n    }\n  }\n}</code></pre>\n\n<p>In the above code, hook_views_pre_view is used to alter a view before it is displayed; for more information on this hook visit this <a href=\"https://api.drupal.org/api/views/views.api.php/function/hook_views_pre_view/7\" target=\"_blank\">page</a>. Switch case statement is used to select the view that needs this implementation, here the machine name of the view is 'event_list'.  Next permissions are checked — if the user role does not has permission “use advance search on events”. This permission is defined in hook_permission. Then, unset $view_filters['field_date_value'], $view_filters['field_event_status'] filter fields. PHP function unset() destroys a variable, so the search filters which are not included in the View can be disabled using this function. </p>\n\n<p>This is an easy way to create different displays of a view based on permission assigned to user role.</p>\n\n<p>NOTE: </p>\n\n<ul>\n\t<li>These filter criteria are exposed to the users (check \"Expose this filter to visitors, to allow them to change it\" to expose the filter criteria).</li>\n</ul>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "a9c051c9-6d96-4349-900e-e3b927ea21fb",
          "tid": 70,
          "name": "views",
          "alias": "/term/views"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        }
      ],
      "field_image": [
        {
          "id": "4e70c117-0aa2-447b-9fff-d2dfebc97a8a",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_24_1.jpg",
          "fid": 98
        },
        {
          "id": "9718f0fa-40ee-425d-bada-ac6115c6339a",
          "alt": "Admin - Event listing",
          "title": "Admin - Event listing",
          "url": "/sites/default/files/field/image/admin-Event%20list.png",
          "fid": 99
        },
        {
          "id": "9d49ead1-3b2d-4f5d-820a-ff4e703c4203",
          "alt": "Anonymous - Event listing",
          "title": "Anonymous - Event listing",
          "url": "/sites/default/files/field/image/anonymous%20-Event%20list.png",
          "fid": 100
        }
      ],
      "uid": {
        "id": "81da7983-4f8e-44a3-b651-365124ae5b33",
        "display_name": "Mark Tsibulski"
      }
    },
    {
      "title": "Creating a RESTful API using Slim php framework",
      "nid": 103,
      "alias": "/article/creating-restful-api-using-slim-php-framework",
      "slug": "creating-restful-api-using-slim-php-framework",
      "body": "<p>Restful architectures are often used to create client/server network environments. REST, which stands for representational state transfer, is a simpler alternative to SOAP and WSDL services, but still maintains great features like platform-independence and language independence. REST services explicitly use HTTP methods when implementing their calls, therefore any good API should support the basic GET, POST, PUT, and DELETE methods. Along with knowing the HTTP methods you must understand the HTTP status codes as well. If you are unfamiliar with what the various codes mean you can read about them here .</p>\n\n<p>For this article we will be using the slim PHP micro framework to implement the RESTful API. Slim was chosen because it is very light weight, clean, supports all the HTTP methods, and also provides support for middleware layers. Along with slim you will need a web server (apache or nginx), PHP, and MySQL installed before proceeding. Once you’ve gotten all the necessary files you can begin.</p>\n\n<p>You must begin the PHP script by including the slim libraries</p>\n\n<pre class=\"true; codetag\">\n require 'Slim/Slim.php';\n</pre>\n\n<p>Next you will create a new instance of your app and define the routes that you will be using</p>\n\n<pre>\n<code class=\"language-php\">$app = new Slim();\n$app-&gt;contentType('application/json');\n$app-&gt;get('/users', 'getUsers');\n$app-&gt;get('/user/:id', 'getUser');\n$app-&gt;post('/user', 'addUser');\n$app-&gt;put('/user/:id', 'updateUser');\n$app-&gt;delete('/user/:id', 'deleteUser');\n$app-&gt;run();</code></pre>\n\n<div>The routes contain the desired URL for the call followed by the function that is to be called upon reaching that path.</div>\n\n<p>Once you have set up all the routes that you need you can then start writing the functions that handle the data manipulation.</p>\n\n<p>GET example:</p>\n\n<pre>\n<code class=\"language-php\">function getUsers() {\n$sql = \"select * FROM users\";\n  try {\n    $db = getConnection();\n    $stmt = $db-&gt;query($sql);\n    $users = $stmt-&gt;fetchAll(PDO::FETCH_OBJ);\n    $db = null;\n    echo json_encode($users);\n  }\n  catch(PDOException $e) {\n    echo json_encode($e-&gt;getMessage());\n  }\n}</code></pre>\n\n<p>This function returns the data of all users in the JSON format.</p>\n\n<p>POST example:</p>\n\n<pre>\n<code class=\"language-php\">function addUser() { \n  global $app;\n  $req = $app-&gt;request();\n  $body = json_decode($req-&gt;getBody());\n\n  $sql = \"INSERT INTO users (`name`,`email`,`age`) VALUES (:name, :email, :age)\";\n  try {\n    $db = getConnection();\n    $stmt = $db-&gt;prepare($sql);\n      $stmt-&gt;bindParam(\"name\", $body-&gt;userName);\n      $stmt-&gt;bindParam(\"email\", $userEmail);\n      $stmt-&gt;bindParam(\"age\", $userAge);\n      $stmt-&gt;execute();\n      $db = null;\n      echo json_encode($user);\n  } catch(PDOException $e) {\n      echo json_encode($e-&gt;getMessage());\n  }\n}</code></pre>\n\n<p>This function creates a new entry for the new users in our database. The values being passed into the SQL query are being bound in lines 9 and 10 and that information comes from the request body (line 4).</p>\n\n<p>PUT example:</p>\n\n<pre>\n<code class=\"language-php\">function updateUser($id) {\n   global $app;\n   $req = $app-&gt;request();\n   $body = json_decode($request-&gt;getBody());\n\n   $sql = \"UPDATE users SET email=:email, age=:age WHERE id=:id\";\n   try {\n     $db = getConnection();\n     $stmt = $db-&gt;prepare($sql);\n     $stmt-&gt;bindParam(\"email\", $body-&gt;email);\n     $stmt-&gt;bindParam(\"age\", $body-&gt;age);\n     $stmt-&gt;bindParam(\"id\", $id);\n     $stmt-&gt;execute();\n     $db = null;\n     echo json_encode($body);\n   } catch(PDOException $e) {\n     echo json_encode($e-&gt;getMessage());\n   }\n}</code></pre>\n\n<p>This function will update a row in the database with the supplied data from the request body.</p>\n\n<p>Delete Example:</p>\n\n<pre class=\"true; codetag\">\n </pre>\n\n<pre>\n<code class=\"language-php\">function deleteUser($id) {\n   $sql = \"DELETE FROM users WHERE id=:id\";\n   try {\n     $db = getConnection();\n     $stmt = $db-&gt;prepare($sql);\n     $stmt-&gt;bindParam(\"id\", $id);\n     $stmt-&gt;execute();\n     $db = null;\n  } catch(PDOException $e) {\n     echo json_encode($e-&gt;getMessage());\n  }\n}</code></pre>\n\n<p>The requested user will be removed from your database table.</p>\n\n<p>The final part of code that is needed is the database connection code.</p>\n\n<pre>\n<code class=\"language-php\">function getConnection() {\n  $dbhost=\"127.0.0.1\";\n  $dbuser=\"root\";\n  $dbpass=\"\";\n  $dbname=\"testDB\";\n  $dbh = new PDO(\"mysql:host=$dbhost;dbname=$dbname\", $dbuser, $dbpass);\n  $dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  return $dbh;\n}</code></pre>\n\n<p>Once you’ve gotten you all the code written you can now test your API to make sure that you code is returning the correct information and doing the desired actions. You can test them by opening your preferred shell and running the following cURL commands</p>\n\n<p>Get Users:</p>\n\n<pre class=\"true; codetag\">\ncurl –i –X GET http://localhost/rest/api/users\n</pre>\n\n<p>Post (create new) User:</p>\n\n<pre class=\"true; codetag\">\ncurl –i –X POST –d '{\"name\":\"John Doe\",\"email\":\"anemail@gmail.com\",\"age\":28}' http://localhost/rest/api/user\n</pre>\n\n<p>Put (update) User:</p>\n\n<pre class=\"true; codetag\">\ncurl –i –X PUT –d '{\"email\":\"jdoe@yahoo.com\",\"age\":38}' http://localhost/rest/api/user/8\n</pre>\n\n<p>Delete User:</p>\n\n<pre class=\"true; codetag\">\ncurl –i –X DELETE http://localhost/rest/api/user/8</pre>\n\n<p>Now that you've gotten your RESTful API working you can implement these calls into your future projects.</p>\n\n<p>Further slim documentation can be found <a href=\"http://docs.slimframework.com/\">here</a>.</p>\n",
      "changed": "2016-07-08T13:45:27+00:00",
      "created": "2014-11-07T14:23:33+00:00",
      "summary": "<p>Restful architectures are often used to create client/server network environments. REST, which stands for representational state transfer, is a simpler alternative to SOAP and WSDL services, but still maintains great features like platform-independence and language independence. REST services explicitly use HTTP methods when implementing their calls, therefore any good API should support the basic GET, POST, PUT, and DELETE methods. Along with knowing the HTTP methods you must understand the HTTP status codes as well. If you are unfamiliar with what the various codes mean you can read about them here .</p>\n\n<p>For this article we will be using the slim PHP micro framework to implement the RESTful API. Slim was chosen because it is very light weight, clean, supports all the HTTP methods, and also provides support for middleware layers. Along with slim you will need a web server (apache or nginx), PHP, and MySQL installed before proceeding. Once you’ve gotten all the necessary files you can begin.</p>\n\n<p>You must begin the PHP script by including the slim libraries</p>\n\n<pre class=\"true; codetag\">\n require 'Slim/Slim.php';\n</pre>\n\n<p>Next you will create a new instance of your app and define the routes that you will be using</p>\n\n<pre>\n<code class=\"language-php\">$app = new Slim();\n$app-&gt;contentType('application/json');\n$app-&gt;get('/users', 'getUsers');\n$app-&gt;get('/user/:id', 'getUser');\n$app-&gt;post('/user', 'addUser');\n$app-&gt;put('/user/:id', 'updateUser');\n$app-&gt;delete('/user/:id', 'deleteUser');\n$app-&gt;run();</code></pre>\n\n<div>The routes contain the desired URL for the call followed by the function that is to be called upon reaching that path.</div>\n\n<p>Once you have set up all the routes that you need you can then start writing the functions that handle the data manipulation.</p>\n\n<p>GET example:</p>\n\n<pre>\n<code class=\"language-php\">function getUsers() {\n$sql = \"select * FROM users\";\n  try {\n    $db = getConnection();\n    $stmt = $db-&gt;query($sql);\n    $users = $stmt-&gt;fetchAll(PDO::FETCH_OBJ);\n    $db = null;\n    echo json_encode($users);\n  }\n  catch(PDOException $e) {\n    echo json_encode($e-&gt;getMessage());\n  }\n}</code></pre>\n\n<p>This function returns the data of all users in the JSON format.</p>\n\n<p>POST example:</p>\n\n<pre>\n<code class=\"language-php\">function addUser() { \n  global $app;\n  $req = $app-&gt;request();\n  $body = json_decode($req-&gt;getBody());\n\n  $sql = \"INSERT INTO users (`name`,`email`,`age`) VALUES (:name, :email, :age)\";\n  try {\n    $db = getConnection();\n    $stmt = $db-&gt;prepare($sql);\n      $stmt-&gt;bindParam(\"name\", $body-&gt;userName);\n      $stmt-&gt;bindParam(\"email\", $userEmail);\n      $stmt-&gt;bindParam(\"age\", $userAge);\n      $stmt-&gt;execute();\n      $db = null;\n      echo json_encode($user);\n  } catch(PDOException $e) {\n      echo json_encode($e-&gt;getMessage());\n  }\n}</code></pre>\n\n<p>This function creates a new entry for the new users in our database. The values being passed into the SQL query are being bound in lines 9 and 10 and that information comes from the request body (line 4).</p>\n\n<p>PUT example:</p>\n\n<pre>\n<code class=\"language-php\">function updateUser($id) {\n   global $app;\n   $req = $app-&gt;request();\n   $body = json_decode($request-&gt;getBody());\n\n   $sql = \"UPDATE users SET email=:email, age=:age WHERE id=:id\";\n   try {\n     $db = getConnection();\n     $stmt = $db-&gt;prepare($sql);\n     $stmt-&gt;bindParam(\"email\", $body-&gt;email);\n     $stmt-&gt;bindParam(\"age\", $body-&gt;age);\n     $stmt-&gt;bindParam(\"id\", $id);\n     $stmt-&gt;execute();\n     $db = null;\n     echo json_encode($body);\n   } catch(PDOException $e) {\n     echo json_encode($e-&gt;getMessage());\n   }\n}</code></pre>\n\n<p>This function will update a row in the database with the supplied data from the request body.</p>\n\n<p>Delete Example:</p>\n\n<pre class=\"true; codetag\">\n </pre>\n\n<pre>\n<code class=\"language-php\">function deleteUser($id) {\n   $sql = \"DELETE FROM users WHERE id=:id\";\n   try {\n     $db = getConnection();\n     $stmt = $db-&gt;prepare($sql);\n     $stmt-&gt;bindParam(\"id\", $id);\n     $stmt-&gt;execute();\n     $db = null;\n  } catch(PDOException $e) {\n     echo json_encode($e-&gt;getMessage());\n  }\n}</code></pre>\n\n<p>The requested user will be removed from your database table.</p>\n\n<p>The final part of code that is needed is the database connection code.</p>\n\n<pre>\n<code class=\"language-php\">function getConnection() {\n  $dbhost=\"127.0.0.1\";\n  $dbuser=\"root\";\n  $dbpass=\"\";\n  $dbname=\"testDB\";\n  $dbh = new PDO(\"mysql:host=$dbhost;dbname=$dbname\", $dbuser, $dbpass);\n  $dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  return $dbh;\n}</code></pre>\n\n<p>Once you’ve gotten you all the code written you can now test your API to make sure that you code is returning the correct information and doing the desired actions. You can test them by opening your preferred shell and running the following cURL commands</p>\n\n<p>Get Users:</p>\n\n<pre class=\"true; codetag\">\ncurl –i –X GET http://localhost/rest/api/users\n</pre>\n\n<p>Post (create new) User:</p>\n\n<pre class=\"true; codetag\">\ncurl –i –X POST –d '{\"name\":\"John Doe\",\"email\":\"anemail@gmail.com\",\"age\":28}' http://localhost/rest/api/user\n</pre>\n\n<p>Put (update) User:</p>\n\n<pre class=\"true; codetag\">\ncurl –i –X PUT –d '{\"email\":\"jdoe@yahoo.com\",\"age\":38}' http://localhost/rest/api/user/8\n</pre>\n\n<p>Delete User:</p>\n\n<pre class=\"true; codetag\">\ncurl –i –X DELETE http://localhost/rest/api/user/8</pre>\n\n<p>Now that you've gotten your RESTful API working you can implement these calls into your future projects.</p>\n\n<p>Further slim documentation can be found <a href=\"http://docs.slimframework.com/\">here</a>.</p>\n",
      "field_tags": [
        {
          "id": "0367a022-7f97-44d2-9c8e-0918a2a2ab75",
          "tid": 34,
          "name": "php",
          "alias": "/term/php"
        },
        {
          "id": "e1f57d94-19cb-47b1-80a7-fd3392406fb0",
          "tid": 40,
          "name": "rest",
          "alias": "/term/rest"
        },
        {
          "id": "af9e365a-a540-4744-89aa-c1f37e7e55a5",
          "tid": 84,
          "name": "slim",
          "alias": "/term/slim"
        },
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "6f2c836d-b056-49af-a72d-2b30b1858e0c",
          "alt": "Rest API icon",
          "title": "Rest API icon",
          "url": "/sites/default/files/field/image/rest_api_256x256.png",
          "fid": 149
        }
      ],
      "uid": {
        "id": "98695740-449a-40fb-85f1-4ad13e3633c6",
        "uid": 33,
        "display_name": "Christian Crawford",
        "name": "Christian Crawford",
        "bio": "<ul>\n\t<li>Drupal 7 &amp; 8 site building, module development, theming</li>\n\t<li>Java and C</li>\n\t<li>SQL (MySQL and Oracle), NoSQL (MongoDB)</li>\n\t<li>HTML, CSS, SASS/LESS</li>\n\t<li>ReactJS, AngularJS, jQuery, NodeJS, ES6</li>\n\t<li>Nginx and Apache Stacks</li>\n</ul>",
        "alias": "/user/christian-crawford"
      }
    },
    {
      "title": "Creating a RESTful service with Java and Jersey with Netbeans",
      "nid": 104,
      "alias": "/article/creating-restful-service-java-and-jersey-netbeans",
      "slug": "creating-restful-service-java-and-jersey-netbeans",
      "body": "<p>There are many ways to implement a RESTful service, but what if you need to do it in Java and you use Netbeans? I recently had a project like this and it was quite an experience to get my enviorment up and working. With Java, there are just so many ways to do it that it starts to look like too much to handle. Well it is actually easier than you think. Let's dive in..</p>\n\n<p>First, fire up Netbeans and create a new Maven Web Application project. Give it a name of you choosing.</p>\n\n<p><img alt=\"NetBeans - New Project\" data-entity-type=\"file\" data-entity-uuid=\"aff8831a-7a93-4e72-99d6-adeab8edf256\" src=\"/sites/default/files/inline-images/Step_01.png\" /></p>\n\n<p>Right off the bat, create a web.xml file by right clicking on the project and creating a new Standard Deployment Descriptor. This is the configuration file for the RESTful service mapping.</p>\n\n<p><img alt=\"NetBeans - New File\" data-entity-type=\"file\" data-entity-uuid=\"8b1a4d7d-5ca1-4294-b939-056c256cc686\" src=\"/sites/default/files/inline-images/Step_03.png\" /></p>\n\n<p>And the last configuration step you will need to make before you actally write code is to add the Jersey Dependency. Add these lines to your pom.xml:</p>\n\n<div>\n<pre>\n<code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;\n  &lt;artifactId&gt;jersey-container-servlet&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n\n<p>Now you can get to writing some code. To begin, create a Java class, name it Hello, and add this code:</p>\n\n<div>\n<pre>\n<code class=\"language-java\">import javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.core.Response;\n \n@Path(\"/hello\")\npublic class Hello {\n \n    @GET\n    @Path(\"/{param}\")\n    public Response getMsg(@PathParam(\"param\") String message) {\n        String output = \"Hello \" + message + \"!\";\n        return Response.status(200).entity(output).build();\n    }\n}</code></pre>\n<span>This simple class will output a simple greeting when you visit the /hello/yourname path.</span>\n\n<p>In order for this to work, you must make an addition to your web.xml to map the Java class to the RESTful path. Add this block of code to your web.xml:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;servlet&gt;\n  &lt;servlet-name&gt;rest&lt;/servlet-name&gt;\n  &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;\n  &lt;init-param&gt;\n    &lt;param-name&gt;jersey.config.server.provider.packages&lt;/param-name&gt;\n    &lt;param-value&gt;com.spinspire.restexample&lt;/param-value&gt;\n  &lt;/init-param&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n  &lt;servlet-name&gt;rest&lt;/servlet-name&gt;\n  &lt;url-pattern&gt;/api/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre>\n\n<p>Be sure to change the param-value to match your Java class package.</p>\n\n<p>Now run this on your server and head to /api/hello/SpinSpire to see this:</p>\n\n<p><img alt=\"server response\" data-entity-type=\"file\" data-entity-uuid=\"dba7c237-dc3b-43c3-baae-1e1dc310dd5c\" src=\"/sites/default/files/inline-images/final_result.png\" /></p>\n\n<p>I use Jetty as a server because its simple to use, it recompiles/restarts on save, and its also easy to set up. Open your pom.xml and add this between your plugins tags:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;plugin&gt;\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\n  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;\n  &lt;version&gt;9.2.4.v20141103&lt;/version&gt;\n  &lt;configuration&gt;\n    &lt;httpConnector&gt;\n      &lt;!-- make jetty listen on 127.0.0.1 for better security --&gt;\n      &lt;!--host&gt;127.0.0.1&lt;/host--&gt;\n    &lt;/httpConnector&gt;\n    &lt;scanIntervalSeconds&gt;3&lt;/scanIntervalSeconds&gt;\n    &lt;webAppConfig&gt;\n      &lt;!-- defaultsDescriptor&gt;src/test/resources/jetty-maven-plugin-webdefault.xml&lt;/defaultsDescriptor --&gt;\n    &lt;/webAppConfig&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;</code></pre>\n\n<div> </div>\n\n<p>Now right click on your project and click properties. Find the Actions tab and then the Run Project action. Change it from \"package\" to \"jetty:run\". It should look like this:</p>\n\n<p><img alt=\"NetBeans - project properties pane\" data-entity-type=\"file\" data-entity-uuid=\"70a4efe8-1736-4062-9438-ae63b1564508\" src=\"/sites/default/files/inline-images/jetty.png\" /></p>\n\n<p>Run the Jetty server simply by hitting the green play button in Netbeans.</p>\n\n<p><img alt=\"NetBeans run button\" data-entity-type=\"file\" data-entity-uuid=\"9c7345e2-54e8-42c0-876d-fcd37fd4b8d4\" src=\"/sites/default/files/inline-images/netbeans_run.png\" /></p>\n\n<p>Now let's say you have a database table called Event with an id, title, and created collumns and you want to pull that data from a REST HTTP GET call.</p>\n\n<p>First open the Services tab in Netbeans, right click on Databases, and hit New Connection.</p>\n\n<p><img alt=\"NetBeans - new database connection\" data-entity-type=\"file\" data-entity-uuid=\"053499b2-e1f0-42b1-a2ba-7d301648f3c1\" src=\"/sites/default/files/inline-images/netbeans_db.png\" /></p>\n\n<p>Follow the wizard step by step to setup your database with Netbeans. Once thats done, you will need to let your project know which database to connect to. For Jetty, create a jetty-env.xml inside your WEB-INF folder and add these lines: </p>\n\n<pre>\n<code class=\"language-xml\">&lt;Configure class=\"org.eclipse.jetty.webapp.WebAppContext\"&gt;\n  &lt;New id=\"DSTix\" class=\"org.eclipse.jetty.plus.jndi.Resource\"&gt;\n    &lt;Arg&gt;jdbc/DSTix&lt;/Arg&gt;\n    &lt;Arg&gt;\n      &lt;New class=\"org.apache.commons.dbcp.BasicDataSource\"&gt;\n         &lt;Set name=\"driverClassName\"&gt;com.mysql.jdbc.Driver&lt;/Set&gt;\n         &lt;Set name=\"url\"&gt;jdbc:mysql://localhost:3306/rest&lt;/Set&gt;\n         &lt;Set name=\"username\"&gt;yourusername&lt;/Set&gt;\n         &lt;Set name=\"password\"&gt;yourpassword&lt;/Set&gt;\n         &lt;Set name=\"validationQuery\"&gt;SELECT 1&lt;/Set&gt;\n      &lt;/New&gt;\n    &lt;/Arg&gt;\n  &lt;/New&gt;\n&lt;/Configure&gt;</code></pre>\n\n<p>Of course you will have to set your own username and password, and also the url must match the one you created using the New Database Connection wizard.</p>\n\n<p>Next you must add your database drivers to your project, and while we're at it, a JSON meda writer. Add this to your pom.xml:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;\n  &lt;version&gt;20030825.184428&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;commons-pool&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-pool&lt;/artifactId&gt;\n  &lt;version&gt;1.6&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;mysql&lt;/groupId&gt;\n  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n  &lt;version&gt;5.1.34&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;com.fasterxml.jackson.jaxrs&lt;/groupId&gt;\n  &lt;artifactId&gt;jackson-jaxrs-json-provider&lt;/artifactId&gt;\n  &lt;version&gt;2.4.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n\n<p>Now keep in mind that i use a MySQL database, so my configuration and drivers are for MySQL.</p>\n\n<p>That's it for the database configuration though , so now its time to create an Event model and Event Resource. Create a Java class named Event with the following code:</p>\n\n<pre>\n<code class=\"language-java\">public class Event {\n    private int id;\n    private String title;\n    private int created;\n \n    public int getId() {\n        return id;\n    }\n \n    public void setId(int id) {\n        this.id = id;\n    }\n \n    public String getTitle() {\n        return title;\n    }\n \n    public void setTitle(String title) {\n        this.title = title;\n    }\n \n    public int getCreated() {\n        return created;\n    }\n \n    public void setCreated(int created) {\n        this.created = created;\n    }\n}</code></pre>\n\n<p>and a EventResource class with the following code:</p>\n\n<pre>\n<code class=\"language-java\">import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport javax.sql.DataSource;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\n \n@Path(\"/event\")\n@Produces(\"application/json\")\npublic class EventResource{\n    \n    protected Connection getConnection() throws SQLException, NamingException {\n        InitialContext ic = new InitialContext();\n        DataSource ds = (DataSource) ic.lookup(\"jdbc/DSTix\");\n        return ds.getConnection();\n    }\n    \n    public Event getFromResultSet(ResultSet rs) throws SQLException {\n        Event event = new Event();\n        event.setId(rs.getInt(\"id\"));\n        event.setTitle(rs.getString(\"title\"));\n        event.setCreated(rs.getInt(\"created\"));\n        return event;\n    }\n    \n    @GET\n    public List getList() throws SQLException, NamingException {\n        List events = new ArrayList&lt;&gt;();\n        Connection db = getConnection();\n        \n        try {\n            PreparedStatement st = db.prepareStatement(\"SELECT id, title, created from tix_event\");\n            ResultSet rs = st.executeQuery();\n            while (rs.next()) {\n                Event e = getFromResultSet(rs);\n                events.add(e);\n            }\n            return events;\n        } finally {\n            db.close();\n        }\n    }\n}</code></pre>\n\n<p> </p>\n\n<p>I'll take a moment and explain what is going on in the code. Path is set to /event and the media that it will produce is JSON. Event.class is simply the model class, all it does it contain the fields and appropriate getters/setters. EventResource.class is the calss that does the work. Connection is self-explanatory, it just instantiates the connection. getList opens a new connection, then executes a query and populates a List with the returned data, which is rendered as JSON.</p>\n\n<p>Working with Java can be confusing sometimes, but once you setup your enviornment, it becomes a breeze. With the code above, you now have a baseline to work from, and it becomes easy to implement CRUD operations into your project. Attached is a complete project with CRUD operations to a table, feel free to example and use it.</p>\n\n<p><a href=\"https://drive.google.com/file/d/0B60EkGoESD0JSFJqYlBsV2piSnc/view?usp=sharing\">Project Download</a></p>\n\n<p>More resources here:</p>\n\n<p><a href=\"http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\">REST</a>, <a href=\"https://jersey.java.net/\">Jersey</a>, <a href=\"https://netbeans.org/\">Netbeans</a></p>\n</div>\n</div>\n",
      "changed": "2016-07-08T13:41:55+00:00",
      "created": "2014-11-29T00:15:26+00:00",
      "summary": "<p>There are many ways to implement a RESTful service, but what if you need to do it in Java and you use Netbeans? I recently had a project like this and it was quite an experience to get my enviorment up and working. With Java, there are just so many ways to do it that it starts to look like too much to handle. Well it is actually easier than you think. Let's dive in..</p>\n\n<p>First, fire up Netbeans and create a new Maven Web Application project. Give it a name of you choosing.</p>\n\n<p><img alt=\"NetBeans - New Project\" data-entity-type=\"file\" data-entity-uuid=\"aff8831a-7a93-4e72-99d6-adeab8edf256\" src=\"/sites/default/files/inline-images/Step_01.png\" /></p>\n\n<p>Right off the bat, create a web.xml file by right clicking on the project and creating a new Standard Deployment Descriptor. This is the configuration file for the RESTful service mapping.</p>\n\n<p><img alt=\"NetBeans - New File\" data-entity-type=\"file\" data-entity-uuid=\"8b1a4d7d-5ca1-4294-b939-056c256cc686\" src=\"/sites/default/files/inline-images/Step_03.png\" /></p>\n\n<p>And the last configuration step you will need to make before you actally write code is to add the Jersey Dependency. Add these lines to your pom.xml:</p>\n\n<div>\n<pre>\n<code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;\n  &lt;artifactId&gt;jersey-container-servlet&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n\n<p>Now you can get to writing some code. To begin, create a Java class, name it Hello, and add this code:</p>\n\n<div>\n<pre>\n<code class=\"language-java\">import javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.core.Response;\n \n@Path(\"/hello\")\npublic class Hello {\n \n    @GET\n    @Path(\"/{param}\")\n    public Response getMsg(@PathParam(\"param\") String message) {\n        String output = \"Hello \" + message + \"!\";\n        return Response.status(200).entity(output).build();\n    }\n}</code></pre>\n<span>This simple class will output a simple greeting when you visit the /hello/yourname path.</span>\n\n<p>In order for this to work, you must make an addition to your web.xml to map the Java class to the RESTful path. Add this block of code to your web.xml:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;servlet&gt;\n  &lt;servlet-name&gt;rest&lt;/servlet-name&gt;\n  &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;\n  &lt;init-param&gt;\n    &lt;param-name&gt;jersey.config.server.provider.packages&lt;/param-name&gt;\n    &lt;param-value&gt;com.spinspire.restexample&lt;/param-value&gt;\n  &lt;/init-param&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n  &lt;servlet-name&gt;rest&lt;/servlet-name&gt;\n  &lt;url-pattern&gt;/api/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre>\n\n<p>Be sure to change the param-value to match your Java class package.</p>\n\n<p>Now run this on your server and head to /api/hello/SpinSpire to see this:</p>\n\n<p><img alt=\"server response\" data-entity-type=\"file\" data-entity-uuid=\"dba7c237-dc3b-43c3-baae-1e1dc310dd5c\" src=\"/sites/default/files/inline-images/final_result.png\" /></p>\n\n<p>I use Jetty as a server because its simple to use, it recompiles/restarts on save, and its also easy to set up. Open your pom.xml and add this between your plugins tags:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;plugin&gt;\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\n  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;\n  &lt;version&gt;9.2.4.v20141103&lt;/version&gt;\n  &lt;configuration&gt;\n    &lt;httpConnector&gt;\n      &lt;!-- make jetty listen on 127.0.0.1 for better security --&gt;\n      &lt;!--host&gt;127.0.0.1&lt;/host--&gt;\n    &lt;/httpConnector&gt;\n    &lt;scanIntervalSeconds&gt;3&lt;/scanIntervalSeconds&gt;\n    &lt;webAppConfig&gt;\n      &lt;!-- defaultsDescriptor&gt;src/test/resources/jetty-maven-plugin-webdefault.xml&lt;/defaultsDescriptor --&gt;\n    &lt;/webAppConfig&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;</code></pre>\n\n<div> </div>\n\n<p>Now right click on your project and click properties. Find the Actions tab and then the Run Project action. Change it from \"package\" to \"jetty:run\". It should look like this:</p>\n\n<p><img alt=\"NetBeans - project properties pane\" data-entity-type=\"file\" data-entity-uuid=\"70a4efe8-1736-4062-9438-ae63b1564508\" src=\"/sites/default/files/inline-images/jetty.png\" /></p>\n\n<p>Run the Jetty server simply by hitting the green play button in Netbeans.</p>\n\n<p><img alt=\"NetBeans run button\" data-entity-type=\"file\" data-entity-uuid=\"9c7345e2-54e8-42c0-876d-fcd37fd4b8d4\" src=\"/sites/default/files/inline-images/netbeans_run.png\" /></p>\n\n<p>Now let's say you have a database table called Event with an id, title, and created collumns and you want to pull that data from a REST HTTP GET call.</p>\n\n<p>First open the Services tab in Netbeans, right click on Databases, and hit New Connection.</p>\n\n<p><img alt=\"NetBeans - new database connection\" data-entity-type=\"file\" data-entity-uuid=\"053499b2-e1f0-42b1-a2ba-7d301648f3c1\" src=\"/sites/default/files/inline-images/netbeans_db.png\" /></p>\n\n<p>Follow the wizard step by step to setup your database with Netbeans. Once thats done, you will need to let your project know which database to connect to. For Jetty, create a jetty-env.xml inside your WEB-INF folder and add these lines: </p>\n\n<pre>\n<code class=\"language-xml\">&lt;Configure class=\"org.eclipse.jetty.webapp.WebAppContext\"&gt;\n  &lt;New id=\"DSTix\" class=\"org.eclipse.jetty.plus.jndi.Resource\"&gt;\n    &lt;Arg&gt;jdbc/DSTix&lt;/Arg&gt;\n    &lt;Arg&gt;\n      &lt;New class=\"org.apache.commons.dbcp.BasicDataSource\"&gt;\n         &lt;Set name=\"driverClassName\"&gt;com.mysql.jdbc.Driver&lt;/Set&gt;\n         &lt;Set name=\"url\"&gt;jdbc:mysql://localhost:3306/rest&lt;/Set&gt;\n         &lt;Set name=\"username\"&gt;yourusername&lt;/Set&gt;\n         &lt;Set name=\"password\"&gt;yourpassword&lt;/Set&gt;\n         &lt;Set name=\"validationQuery\"&gt;SELECT 1&lt;/Set&gt;\n      &lt;/New&gt;\n    &lt;/Arg&gt;\n  &lt;/New&gt;\n&lt;/Configure&gt;</code></pre>\n\n<p>Of course you will have to set your own username and password, and also the url must match the one you created using the New Database Connection wizard.</p>\n\n<p>Next you must add your database drivers to your project, and while we're at it, a JSON meda writer. Add this to your pom.xml:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;\n  &lt;version&gt;20030825.184428&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;commons-pool&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-pool&lt;/artifactId&gt;\n  &lt;version&gt;1.6&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;mysql&lt;/groupId&gt;\n  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n  &lt;version&gt;5.1.34&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;com.fasterxml.jackson.jaxrs&lt;/groupId&gt;\n  &lt;artifactId&gt;jackson-jaxrs-json-provider&lt;/artifactId&gt;\n  &lt;version&gt;2.4.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n\n<p>Now keep in mind that i use a MySQL database, so my configuration and drivers are for MySQL.</p>\n\n<p>That's it for the database configuration though , so now its time to create an Event model and Event Resource. Create a Java class named Event with the following code:</p>\n\n<pre>\n<code class=\"language-java\">public class Event {\n    private int id;\n    private String title;\n    private int created;\n \n    public int getId() {\n        return id;\n    }\n \n    public void setId(int id) {\n        this.id = id;\n    }\n \n    public String getTitle() {\n        return title;\n    }\n \n    public void setTitle(String title) {\n        this.title = title;\n    }\n \n    public int getCreated() {\n        return created;\n    }\n \n    public void setCreated(int created) {\n        this.created = created;\n    }\n}</code></pre>\n\n<p>and a EventResource class with the following code:</p>\n\n<pre>\n<code class=\"language-java\">import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport javax.sql.DataSource;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\n \n@Path(\"/event\")\n@Produces(\"application/json\")\npublic class EventResource{\n    \n    protected Connection getConnection() throws SQLException, NamingException {\n        InitialContext ic = new InitialContext();\n        DataSource ds = (DataSource) ic.lookup(\"jdbc/DSTix\");\n        return ds.getConnection();\n    }\n    \n    public Event getFromResultSet(ResultSet rs) throws SQLException {\n        Event event = new Event();\n        event.setId(rs.getInt(\"id\"));\n        event.setTitle(rs.getString(\"title\"));\n        event.setCreated(rs.getInt(\"created\"));\n        return event;\n    }\n    \n    @GET\n    public List getList() throws SQLException, NamingException {\n        List events = new ArrayList&lt;&gt;();\n        Connection db = getConnection();\n        \n        try {\n            PreparedStatement st = db.prepareStatement(\"SELECT id, title, created from tix_event\");\n            ResultSet rs = st.executeQuery();\n            while (rs.next()) {\n                Event e = getFromResultSet(rs);\n                events.add(e);\n            }\n            return events;\n        } finally {\n            db.close();\n        }\n    }\n}</code></pre>\n\n<p> </p>\n\n<p>I'll take a moment and explain what is going on in the code. Path is set to /event and the media that it will produce is JSON. Event.class is simply the model class, all it does it contain the fields and appropriate getters/setters. EventResource.class is the calss that does the work. Connection is self-explanatory, it just instantiates the connection. getList opens a new connection, then executes a query and populates a List with the returned data, which is rendered as JSON.</p>\n\n<p>Working with Java can be confusing sometimes, but once you setup your enviornment, it becomes a breeze. With the code above, you now have a baseline to work from, and it becomes easy to implement CRUD operations into your project. Attached is a complete project with CRUD operations to a table, feel free to example and use it.</p>\n\n<p><a href=\"https://drive.google.com/file/d/0B60EkGoESD0JSFJqYlBsV2piSnc/view?usp=sharing\">Project Download</a></p>\n\n<p>More resources here:</p>\n\n<p><a href=\"http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\">REST</a>, <a href=\"https://jersey.java.net/\">Jersey</a>, <a href=\"https://netbeans.org/\">Netbeans</a></p>\n</div>\n</div>\n",
      "field_tags": [
        {
          "id": "65e24887-606d-40f3-88f3-d6b97b10dc10",
          "tid": 54,
          "name": "java",
          "alias": "/term/java"
        },
        {
          "id": "e1f57d94-19cb-47b1-80a7-fd3392406fb0",
          "tid": 40,
          "name": "rest",
          "alias": "/term/rest"
        },
        {
          "id": "327a2f65-aed5-483f-a764-78a2b0f17b2e",
          "tid": 85,
          "name": "jersey",
          "alias": "/term/jersey"
        },
        {
          "id": "a815a4d8-66b0-4ae7-98a0-81584a0744e0",
          "tid": 57,
          "name": "netbeans",
          "alias": "/term/netbeans"
        },
        {
          "id": "2338c5f2-e9d4-4043-b10d-78bd0af60b00",
          "tid": 88,
          "name": "jetty",
          "alias": "/term/jetty"
        },
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "0c010de6-79e4-402f-8f2c-a5b441d486a3",
          "alt": "Step 6",
          "title": "Step 6",
          "url": "/sites/default/files/field/image/Step_06.png",
          "fid": 156
        }
      ],
      "uid": {
        "id": "81da7983-4f8e-44a3-b651-365124ae5b33",
        "display_name": "Mark Tsibulski"
      }
    },
    {
      "title": "Combining JPA and JAX-RS to create RESTful service",
      "nid": 105,
      "alias": "/article/combining-jpa-and-jax-rs-create-restful-service",
      "slug": "combining-jpa-and-jax-rs-create-restful-service",
      "body": "<p>Java Persistence API (JPA) abstracts the database interactions and treats them as objects rather than simply queries. Since these queries are now objects, the principles of Object-Oriented Programming (OOP) can come into play including, encapsulation, abstraction, inheritance, and polymorphism. Persistence in the java language is actually not a new concept at all. Many implementations have been created in the past including, EDJ, JDO, Hibernate, and Toplink to name a few. JPA was designed with the idea of simplifying the Enterprise JavaBean (EJB) programming model. JPA has taken the best ideas from the different persistence providors and combines them into one stanardized specification that helps you build a layer that is independent of the providor. One of the largest features of JPA are the annotations, these annotations provide simple, yet powerful tools which help you create an application with persistence.</p>\n\n<p>When creating a JPA application three things are required to build your foundation. First you need an entity class, which simply contains a method that has your fields (variables) as well as your getter and setter methods. Above each of the variables you can add annotations for keys, column names, not null attributes, and relationships. The entity object is simply a POJO class which has a @Entity annotation.</p>\n\n<pre class=\"true; codetag\" title=\"Event pojo\">\n </pre>\n\n<pre>\n<code class=\"language-java\">@Entity\n@Table(name=\"tix_event\")\npublic class Event {\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  @NotNull\n  @Column(name = \"id\")\n  private int id;\n  @Column(name = \"title\")\n  private String title;\n  @Column(name = \"uid\")\n  private int uid;\n  @Column(name = \"created\")\n  private String created;\n  @Column(name=\"description\")\n  private String desc;\n  \n  public int getId() {\n    return id;\n  }\n  public void setId(int id) {\n    this.id = id;\n  }\n  public String getTitle() {\n    return title;\n  }\n  public void setTitle(String title) {\n    this.title = title;\n  }\n  public int getUid() {\n    return uid;\n  }\n  public void setUid(int uid) {\n    this.uid = uid;\n  }\n  public String getCreated() {\n    return created;\n  }\n  public void setCreated(String created) {\n    this.created = created;\n  }\n  public String getDesc() {\n    return desc;\n  }\n  public void setDesc(String desc) {\n    this.desc = desc;\n  }\n}\n</code></pre>\n\n<ul>\n\t<li>@Entity signifies that the class is an entity class. If the table's name is different the @Table annotation is needed.</li>\n\t<li>@Id tells the program that this field is the primary key.   </li>\n\t<li>@Generated Value specifies a stratagey to assign a unique value to the fields tagged with it. There are four options, IDENTITY, SEQUENCE, TABLE, and AUTO.</li>\n\t<li>The @Column is not neccesary if the field name is the same as the column in the table.</li>\n</ul>\n\n<p>Secondly you will need a persistence.xml file. This file is what tells your program how to connect and interact with your database.</p>\n\n<pre>\n<code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n  &lt;persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n             version=\"2.0\"&gt;\n   &lt;persistence-unit name=\"Tix\"&gt;\n      &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;\n      &lt;class&gt;com.spinspire.hibernate.entity.Event&lt;/class&gt;\n      &lt;properties&gt;\n        &lt;property name=\"hibernate.connection.driver_class\" value=\"com.mysql.jdbc.Driver\"/&gt;\n        &lt;property name=\"hibernate.connection.username\" value=\"root\"/&gt;\n        &lt;property name=\"hibernate.connection.password\" value=\"\"/&gt;\n        &lt;property name=\"hibernate.connection.url\" value=\"jdbc:mysql://localhost:3306/rest_test?zeroDateTimeBehavior=convertToNull\"/&gt;\n        &lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.MySQLDialect\"/&gt;\n      &lt;/properties&gt;\n   &lt;/persistence-unit&gt;\n&lt;/persistence&gt;</code></pre>\n\n<p> The final file needed will be the class where you implement your CRUD operations, generally referred to as the resource file. Examples of these files can be found in the related articles <a href=\"https://spinspire.com/article/creating-restful-service-java-and-jersey-netbeans\">here</a> and <a href=\"https://spinspire.com/article/jpa-using-netbeans-and-mysql\">here</a>. Below is a sample containing the GET and POST methods.</p>\n\n<pre>\n<code class=\"language-java\">@Produces(\"application/json\")\npublic abstract class ResourceBase&lt;T&gt; {\n \n/* Methods declarations here */\n \n  protected EntityManager getEntityManager() throws NamingException {\n    EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"Tix\");\n    return emf.createEntityManager();\n  }\n\n  @GET\n  public List&lt;T&gt; getList() throws SQLException, NamingException { \n    List records = getTixQuery();\n    return records;\n  }\n\n  @GET \n  @Path(\"{id}\")\n  public List&lt;T&gt; getSingle(@PathParam(\"id\") int id) throws NamingException {\n    List records = getSingleQuery(id);\n    return records; \n  }\n\n  @POST \n  public void insertTix(T t) throws NamingException, SQLException {\n    createQuery(t); \n  }\n}</code></pre>\n\n<p>This class has been abstracted into a base class in order to facilitate the handling of data from many different types of objects. The <span>getEntityManager() method creates an EntityManagerFactory which is in turn used to create Entity Mangers on demand. You can ignore the annotations for now, I will explain them soon.</span></p>\n\n<p>The specific implementation of the above methods are contained in separate files which then extend this base class.</p>\n\n<pre>\n<code class=\"language-java\">@Path(\"/event\")\n@Produces(\"application/json\")\npublic class EventResource extends ResourceBase&lt;Event&gt; {\n \n  private EntityManager em;\n  private List&lt;Event&gt; listEvents;\n  \n  @Override\n  protected List&lt;Event&gt; getTixQuery() throws NamingException {\n    em = getEntityManager();\n    em.getTransaction().begin();\n    listEvents = em.createQuery(\"SELECT e FROM Event e\").getResultList();\n    em.getTransaction().commit();\n    em.close();\n    return listEvents;\n  }\n \n  @Override\n  protected List getSingleQuery(int id) throws NamingException {\n    em = getEntityManager();\n    em.getTransaction().begin();\n    listEvents = singletonList(em.find(Event.class, id));\n    em.getTransaction().commit();\n    em.close();\n    return listEvents;\n  }\n \n  @Override\n  protected void createQuery(Event t) throws SQLException, NamingException {\n    Event event = new Event();\n    em = getEntityManager();\n    em.getTransaction().begin();\n    event.setTitle(t.getTitle());\n    event.setDesc(\"abcd\");\n    event.setUid(t.getUid());\n    event.setCreated(\"1410876904\");\n    em.persist(event);\n    em.getTransaction().commit();\n    em.close();\n  }\n.\n.\n.\n}</code></pre>\n\n<p>One of the keys to persistence is the EntityManager which is associated with a persistence context. The persistence context is a set of entity instances in which, for any persistent entity identity, there is a unique instance. The entity manager API can create and remove persistence entity instances. The set of entities managed by the Entity Manger is called the persistence unit. The entity manager facilitates the interactions between your database and your program. Each method that talks to the database should get its own entity manager. JPA has its own query language known as Java Persistence Query Language (JPQL), which can be used to when custom queries are needed. For simple CRUD operations however, you can generally rely on the built in functions persist (create), find (read), and remove (delete).  More information on JPQL can be found <a href=\"http://www.objectdb.com/java/jpa/query/jpql/structure\">here</a>. Interactions with the database are called transactions and are managed by, you guessed it, the Entity Manager. Each time a transactions is called, it must be begun (getTransaction().begin()), and then after the actions have been specified the transaction must be committed (getTrasnaction.commit()). If data is being added, post and put methods, to the database then the persist(ObjName) command is called before the commit.</p>\n\n<p>Since you’ve now gotten the JPA portion of your application set up you can now begin implementing the JAX-RS portion so you can use the data you retrieved in your app. As mentioned <a href=\"https://spinspire.com/article/creating-restful-service-java-and-jersey-netbeans\" target=\"_blank\">here</a>, JAX-RS is a Java programming language API that provides support in creating web services in the REST architectural pattern. Several implementations exists including, Apache CXF, Jersey, RESTeasy, and WebSphere Application Server. In our case we will be using Oracle’s Jersey implementation. <span>Like JPA, JAX-RS uses annotations. Some of the most commonly used ones include @Path, @GET, @POST, @PUT, @DELETE, and @Produces/Consumes The @Path annotation specifies the end point for the rest call URL. GET, PUT, POST, DELETE annotations are used to determine when each method is to be called, i.e. If a HTTP GET request is made, then the method with the @GET annotation will be called. @Produces/Consumes tells the program what type of data is expected to be either produced or consumed in that method. One more important annotation is @PathParam, this annotations allows URL parameters to be passed into the method. The code for the base resource contains several examples of the annotations.</span></p>\n\n<p><span>The final project should have a structure similar to the one shown in the image below.</span></p>\n\n<p>[[{\"type\":\"media\",\"view_mode\":\"media_original\",\"fid\":\"169\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"441\",\"style\":\"width: 200px; height: 298px;\",\"width\":\"296\"}}]]</p>\n\n<p>Now that you’ve gotten all of the code written you can now make sure that your code is returning the correct data. If you are using NetBeans then you can click the run button to fire up jetty. Once jetty is fully set up open your browser and navigate to http://localhost:8080/api/event. If everything is working correctly you should see the data from your database in a JSON format.</p>\n\n<p>[[{\"type\":\"media\",\"view_mode\":\"media_original\",\"fid\":\"168\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"781\",\"style\":\"line-height: 1.538em; width: 1280px; height: 720px;\",\"width\":\"1631\"}}]]</p>\n\n<p>In order to test the other crud operations open your preferred terminal shell and try the following curl commands</p>\n\n<pre class=\"true; codetag\" title=\"POST\">\ncurl -X POST -H \"Content-Type:application/json\" -d '{\"title\":\"Event123\",\"uid\":42}' -i localhost:8080/api/event</pre>\n\n<pre class=\"true; codetag\" title=\"PUT\">\ncurl -X PUT -H 'Content-Type:application/json' -d '{\"title\":\"Event123\",\"description\":\"testDesc\",\"uid\":2,\"created\":1417381350}' -i localhost:8080/api/event/7</pre>\n\n<pre class=\"true; codetag\" title=\"DELETE\">\ncurl -X DELETE -H -i localhost:8080/api/event/16</pre>\n\n<p>The completed project can be downloaded from <a href=\"https://drive.google.com/file/d/0B3zyWtz3UfSfWVNGczdfcElqUVU/view?usp=sharing\">here</a>.</p>\n",
      "changed": "2016-07-07T20:57:10+00:00",
      "created": "2014-12-01T00:45:07+00:00",
      "summary": "<p>Java Persistence API (JPA) abstracts the database interactions and treats them as objects rather than simply queries. Since these queries are now objects, the principles of Object-Oriented Programming (OOP) can come into play including, encapsulation, abstraction, inheritance, and polymorphism. Persistence in the java language is actually not a new concept at all. Many implementations have been created in the past including, EDJ, JDO, Hibernate, and Toplink to name a few. JPA was designed with the idea of simplifying the Enterprise JavaBean (EJB) programming model. JPA has taken the best ideas from the different persistence providors and combines them into one stanardized specification that helps you build a layer that is independent of the providor. One of the largest features of JPA are the annotations, these annotations provide simple, yet powerful tools which help you create an application with persistence.</p>\n\n<p>When creating a JPA application three things are required to build your foundation. First you need an entity class, which simply contains a method that has your fields (variables) as well as your getter and setter methods. Above each of the variables you can add annotations for keys, column names, not null attributes, and relationships. The entity object is simply a POJO class which has a @Entity annotation.</p>\n\n<pre class=\"true; codetag\" title=\"Event pojo\">\n </pre>\n\n<pre>\n<code class=\"language-java\">@Entity\n@Table(name=\"tix_event\")\npublic class Event {\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  @NotNull\n  @Column(name = \"id\")\n  private int id;\n  @Column(name = \"title\")\n  private String title;\n  @Column(name = \"uid\")\n  private int uid;\n  @Column(name = \"created\")\n  private String created;\n  @Column(name=\"description\")\n  private String desc;\n  \n  public int getId() {\n    return id;\n  }\n  public void setId(int id) {\n    this.id = id;\n  }\n  public String getTitle() {\n    return title;\n  }\n  public void setTitle(String title) {\n    this.title = title;\n  }\n  public int getUid() {\n    return uid;\n  }\n  public void setUid(int uid) {\n    this.uid = uid;\n  }\n  public String getCreated() {\n    return created;\n  }\n  public void setCreated(String created) {\n    this.created = created;\n  }\n  public String getDesc() {\n    return desc;\n  }\n  public void setDesc(String desc) {\n    this.desc = desc;\n  }\n}\n</code></pre>\n\n<ul>\n\t<li>@Entity signifies that the class is an entity class. If the table's name is different the @Table annotation is needed.</li>\n\t<li>@Id tells the program that this field is the primary key.   </li>\n\t<li>@Generated Value specifies a stratagey to assign a unique value to the fields tagged with it. There are four options, IDENTITY, SEQUENCE, TABLE, and AUTO.</li>\n\t<li>The @Column is not neccesary if the field name is the same as the column in the table.</li>\n</ul>\n\n<p>Secondly you will need a persistence.xml file. This file is what tells your program how to connect and interact with your database.</p>\n\n<pre>\n<code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n  &lt;persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n             version=\"2.0\"&gt;\n   &lt;persistence-unit name=\"Tix\"&gt;\n      &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;\n      &lt;class&gt;com.spinspire.hibernate.entity.Event&lt;/class&gt;\n      &lt;properties&gt;\n        &lt;property name=\"hibernate.connection.driver_class\" value=\"com.mysql.jdbc.Driver\"/&gt;\n        &lt;property name=\"hibernate.connection.username\" value=\"root\"/&gt;\n        &lt;property name=\"hibernate.connection.password\" value=\"\"/&gt;\n        &lt;property name=\"hibernate.connection.url\" value=\"jdbc:mysql://localhost:3306/rest_test?zeroDateTimeBehavior=convertToNull\"/&gt;\n        &lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.MySQLDialect\"/&gt;\n      &lt;/properties&gt;\n   &lt;/persistence-unit&gt;\n&lt;/persistence&gt;</code></pre>\n\n<p> The final file needed will be the class where you implement your CRUD operations, generally referred to as the resource file. Examples of these files can be found in the related articles <a href=\"https://spinspire.com/article/creating-restful-service-java-and-jersey-netbeans\">here</a> and <a href=\"https://spinspire.com/article/jpa-using-netbeans-and-mysql\">here</a>. Below is a sample containing the GET and POST methods.</p>\n\n<pre>\n<code class=\"language-java\">@Produces(\"application/json\")\npublic abstract class ResourceBase&lt;T&gt; {\n \n/* Methods declarations here */\n \n  protected EntityManager getEntityManager() throws NamingException {\n    EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"Tix\");\n    return emf.createEntityManager();\n  }\n\n  @GET\n  public List&lt;T&gt; getList() throws SQLException, NamingException { \n    List records = getTixQuery();\n    return records;\n  }\n\n  @GET \n  @Path(\"{id}\")\n  public List&lt;T&gt; getSingle(@PathParam(\"id\") int id) throws NamingException {\n    List records = getSingleQuery(id);\n    return records; \n  }\n\n  @POST \n  public void insertTix(T t) throws NamingException, SQLException {\n    createQuery(t); \n  }\n}</code></pre>\n\n<p>This class has been abstracted into a base class in order to facilitate the handling of data from many different types of objects. The <span>getEntityManager() method creates an EntityManagerFactory which is in turn used to create Entity Mangers on demand. You can ignore the annotations for now, I will explain them soon.</span></p>\n\n<p>The specific implementation of the above methods are contained in separate files which then extend this base class.</p>\n\n<pre>\n<code class=\"language-java\">@Path(\"/event\")\n@Produces(\"application/json\")\npublic class EventResource extends ResourceBase&lt;Event&gt; {\n \n  private EntityManager em;\n  private List&lt;Event&gt; listEvents;\n  \n  @Override\n  protected List&lt;Event&gt; getTixQuery() throws NamingException {\n    em = getEntityManager();\n    em.getTransaction().begin();\n    listEvents = em.createQuery(\"SELECT e FROM Event e\").getResultList();\n    em.getTransaction().commit();\n    em.close();\n    return listEvents;\n  }\n \n  @Override\n  protected List getSingleQuery(int id) throws NamingException {\n    em = getEntityManager();\n    em.getTransaction().begin();\n    listEvents = singletonList(em.find(Event.class, id));\n    em.getTransaction().commit();\n    em.close();\n    return listEvents;\n  }\n \n  @Override\n  protected void createQuery(Event t) throws SQLException, NamingException {\n    Event event = new Event();\n    em = getEntityManager();\n    em.getTransaction().begin();\n    event.setTitle(t.getTitle());\n    event.setDesc(\"abcd\");\n    event.setUid(t.getUid());\n    event.setCreated(\"1410876904\");\n    em.persist(event);\n    em.getTransaction().commit();\n    em.close();\n  }\n.\n.\n.\n}</code></pre>\n\n<p>One of the keys to persistence is the EntityManager which is associated with a persistence context. The persistence context is a set of entity instances in which, for any persistent entity identity, there is a unique instance. The entity manager API can create and remove persistence entity instances. The set of entities managed by the Entity Manger is called the persistence unit. The entity manager facilitates the interactions between your database and your program. Each method that talks to the database should get its own entity manager. JPA has its own query language known as Java Persistence Query Language (JPQL), which can be used to when custom queries are needed. For simple CRUD operations however, you can generally rely on the built in functions persist (create), find (read), and remove (delete).  More information on JPQL can be found <a href=\"http://www.objectdb.com/java/jpa/query/jpql/structure\">here</a>. Interactions with the database are called transactions and are managed by, you guessed it, the Entity Manager. Each time a transactions is called, it must be begun (getTransaction().begin()), and then after the actions have been specified the transaction must be committed (getTrasnaction.commit()). If data is being added, post and put methods, to the database then the persist(ObjName) command is called before the commit.</p>\n\n<p>Since you’ve now gotten the JPA portion of your application set up you can now begin implementing the JAX-RS portion so you can use the data you retrieved in your app. As mentioned <a href=\"https://spinspire.com/article/creating-restful-service-java-and-jersey-netbeans\" target=\"_blank\">here</a>, JAX-RS is a Java programming language API that provides support in creating web services in the REST architectural pattern. Several implementations exists including, Apache CXF, Jersey, RESTeasy, and WebSphere Application Server. In our case we will be using Oracle’s Jersey implementation. <span>Like JPA, JAX-RS uses annotations. Some of the most commonly used ones include @Path, @GET, @POST, @PUT, @DELETE, and @Produces/Consumes The @Path annotation specifies the end point for the rest call URL. GET, PUT, POST, DELETE annotations are used to determine when each method is to be called, i.e. If a HTTP GET request is made, then the method with the @GET annotation will be called. @Produces/Consumes tells the program what type of data is expected to be either produced or consumed in that method. One more important annotation is @PathParam, this annotations allows URL parameters to be passed into the method. The code for the base resource contains several examples of the annotations.</span></p>\n\n<p><span>The final project should have a structure similar to the one shown in the image below.</span></p>\n\n<p>[[{\"type\":\"media\",\"view_mode\":\"media_original\",\"fid\":\"169\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"441\",\"style\":\"width: 200px; height: 298px;\",\"width\":\"296\"}}]]</p>\n\n<p>Now that you’ve gotten all of the code written you can now make sure that your code is returning the correct data. If you are using NetBeans then you can click the run button to fire up jetty. Once jetty is fully set up open your browser and navigate to http://localhost:8080/api/event. If everything is working correctly you should see the data from your database in a JSON format.</p>\n\n<p>[[{\"type\":\"media\",\"view_mode\":\"media_original\",\"fid\":\"168\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"781\",\"style\":\"line-height: 1.538em; width: 1280px; height: 720px;\",\"width\":\"1631\"}}]]</p>\n\n<p>In order to test the other crud operations open your preferred terminal shell and try the following curl commands</p>\n\n<pre class=\"true; codetag\" title=\"POST\">\ncurl -X POST -H \"Content-Type:application/json\" -d '{\"title\":\"Event123\",\"uid\":42}' -i localhost:8080/api/event</pre>\n\n<pre class=\"true; codetag\" title=\"PUT\">\ncurl -X PUT -H 'Content-Type:application/json' -d '{\"title\":\"Event123\",\"description\":\"testDesc\",\"uid\":2,\"created\":1417381350}' -i localhost:8080/api/event/7</pre>\n\n<pre class=\"true; codetag\" title=\"DELETE\">\ncurl -X DELETE -H -i localhost:8080/api/event/16</pre>\n\n<p>The completed project can be downloaded from <a href=\"https://drive.google.com/file/d/0B3zyWtz3UfSfWVNGczdfcElqUVU/view?usp=sharing\">here</a>.</p>\n",
      "field_tags": [
        {
          "id": "65e24887-606d-40f3-88f3-d6b97b10dc10",
          "tid": 54,
          "name": "java",
          "alias": "/term/java"
        },
        {
          "id": "e1f57d94-19cb-47b1-80a7-fd3392406fb0",
          "tid": 40,
          "name": "rest",
          "alias": "/term/rest"
        },
        {
          "id": "5f0b6ff9-9684-4470-883a-931518ad371d",
          "tid": 86,
          "name": "jpa",
          "alias": "/term/jpa"
        },
        {
          "id": "f97d8c63-4075-4c94-915b-363783a9864c",
          "tid": 87,
          "name": "jax-rs",
          "alias": "/term/jax-rs"
        },
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "f64a5e33-3bd6-4ea1-9581-b83b3079b36e",
          "alt": "hibernate logo",
          "title": "hibernate logo",
          "url": "/sites/default/files/field/image/hibernate.png",
          "fid": 170
        }
      ],
      "uid": {
        "id": "98695740-449a-40fb-85f1-4ad13e3633c6",
        "uid": 33,
        "display_name": "Christian Crawford",
        "name": "Christian Crawford",
        "bio": "<ul>\n\t<li>Drupal 7 &amp; 8 site building, module development, theming</li>\n\t<li>Java and C</li>\n\t<li>SQL (MySQL and Oracle), NoSQL (MongoDB)</li>\n\t<li>HTML, CSS, SASS/LESS</li>\n\t<li>ReactJS, AngularJS, jQuery, NodeJS, ES6</li>\n\t<li>Nginx and Apache Stacks</li>\n</ul>",
        "alias": "/user/christian-crawford"
      }
    },
    {
      "title": "JPA Using NetBeans and MySQL",
      "nid": 106,
      "alias": "/article/jpa-using-netbeans-and-mysql",
      "slug": "jpa-using-netbeans-and-mysql",
      "body": "<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0442-178c-ef18-62d2b0f23cee\"><span>In this article you will learn how to quickly get started with JPA. I will be using NetBeans and MySQL database to store data using JPA. If you have MySQL running, all you have to do is follow the steps below.</span></span></p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0442-178c-ef18-62d2b0f23cee\"><span>First let’s create a database that we will be using later on. From the command line you can just run the following command. Note, I will be using “JPA” as the name of my database for this tutorial.</span></span></p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0442-178c-ef18-62d2b0f23cee\"><span>create database JPA;</span></span></p>\n\n<p dir=\"ltr\"><span>Now we are ready to fire up NetBeans and get started. Once NetBeans is loaded, created a new “Java Application” project and give it a name. In my case I named it “JPA”. Go ahead and delete the generated java class file, we will create our own.</span></p>\n\n<p dir=\"ltr\">[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"158\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"331\",\"width\":\"480\"}}]]</p>\n\n<p dir=\"ltr\">[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"159\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"331\",\"width\":\"480\"}}]]</p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0445-a755-884a-2633a3c4535c\"><span>Now, right click on the (in my case) “JPA” package, select new, other, persistence, Entity Class as shown in the picture below.</span></span></p>\n\n<div>[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"160\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"331\",\"width\":\"480\"}}]]</div>\n\n<div> </div>\n\n<div><span id=\"docs-internal-guid-b22f6e2b-0446-eb28-7319-c23646b08d82\"><span>If you do not see “Persistence” from the categories, then you will need to download the plugin. To do that, click on Tools&gt;Plugins, then go to available plugins tab and search for “persistence”, select and install it as shown in the picture below. If you have persistence installed then skip to the next step.</span></span></div>\n\n<div> </div>\n\n<p dir=\"ltr\">[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"161\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"299\",\"width\":\"480\"}}]]</p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0447-e764-3693-a3ed70e704f7\"><span>Give new entity class a name, in my case I left it as the default name the IDE provided “NewEntity”. Click next and from database connection select “new database connection” and look for MySQL as shown in the picture below.</span></span></p>\n\n<p dir=\"ltr\">[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"162\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"358\",\"width\":\"480\"}}]]</p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0448-c661-d239-6fa1582d9e27\"><span>Click next, and a configuration window should show up for setting up the connection to the MySQL database. In my case the database is running on a remote server but I have HeidiSQL connected through SSH tunnel on local port 3307. So I used the following configurations.</span></span></p>\n\n<div>[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"163\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"239\",\"width\":\"480\"}}]]</div>\n\n<div> </div>\n\n<div>\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0449-8102-39ff-77f666be61d1\"><span>And here is a screenshot of my HeidiSQL connection in case you want to set up a similar environment.</span></span></p>\n\n<div>[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"164\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"287\",\"width\":\"480\"}}]]</div>\n\n<div> </div>\n\n<div><span id=\"docs-internal-guid-b22f6e2b-044a-c468-a6d5-23fd9ffc61f9\"><span>Once you have successfully configured a connection to the database, click finish and the IDE will generate the NewEntity class with some code. We will create a column “Name” type varchar, length 100 in this code and delete some unnecessary stuff. Here is the finished result:</span></span></div>\n\n<div>\n<pre>\n<code class=\"language-java\">package jpa;\n\nimport java.io.Serializable;\nimport java.util.Objects;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class NewEntity implements Serializable {\n  private static final long serialVersionUID = 1L;\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO) private Long id;\n  @Column(length = 100)\n  private String name;\n\n  public String getName() {\n   return name;\n  } \n  public void setName(String name) { \n    this.name = name; \n  } \n  public Long getId() { \n    return id; \n  }\n  public void setId(Long id) { \n    this.id = id; \n  } \n\n  @Override public int hashCode() {\n    int hash = 7; \n    hash = 59 * hash + Objects.hashCode(this.id); \n    hash = 59 * hash + Objects.hashCode(this.name); \n    return hash; \n  } \n  @Override public boolean equals(Object obj) {\n    if (obj == null) {\n     return false; \n    } \n    if (getClass() != obj.getClass()) { \n      return false; \n    } \n  final NewEntity other = (NewEntity) obj;\n    if (!Objects.equals(this.id, other.id)) { \n      return false; \n    } \n    if (!Objects.equals(this.name, other.name)) {\n     return false;\n    } \n    return true; \n  } \n  @Override public String toString() {\n    return \"jpa.NewEntity[ id=\" + id + \" ]\"; \n  } \n}</code></pre>\n\n<p><span id=\"docs-internal-guid-b22f6e2b-044c-31f0-91c9-4287ffcecd76\"><span>Now we will create a JPA Controller. To do that, right click on the “jpa” package &gt; other again and choose Persistence&gt;Jpa Controller Classes from Entity Classes this time. The IDE should generate the following code:</span></span></p>\n</div>\n</div>\n\n<div>\n<pre>\n<code class=\"language-java\">package jpa;\n \nimport java.io.Serializable;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Query;\nimport javax.persistence.EntityNotFoundException;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Root;\nimport jpa.exceptions.NonexistentEntityException;\n \npublic class NewEntityJpaController implements Serializable {\n \npublic NewEntityJpaController(EntityManagerFactory emf) {\nthis.emf = emf;\n}\nprivate EntityManagerFactory emf = null;\n \npublic EntityManager getEntityManager() {\nreturn emf.createEntityManager();\n}\n \npublic void create(NewEntity newEntity) {\nEntityManager em = null;\ntry {\nem = getEntityManager();\nem.getTransaction().begin();\nem.persist(newEntity);\nem.getTransaction().commit();\n} finally {\nif (em != null) {\nem.close();\n}\n}\n}\n \npublic void edit(NewEntity newEntity) throws NonexistentEntityException, Exception {\nEntityManager em = null;\ntry {\nem = getEntityManager();\nem.getTransaction().begin();\nnewEntity = em.merge(newEntity);\nem.getTransaction().commit();\n} catch (Exception ex) {\nString msg = ex.getLocalizedMessage();\nif (msg == null || msg.length() == 0) {\nLong id = newEntity.getId();\nif (findNewEntity(id) == null) {\nthrow new NonexistentEntityException(\"The newEntity with id \" + id + \" no longer exists.\");\n}\n}\nthrow ex;\n} finally {\nif (em != null) {\nem.close();\n}\n}\n}\n \npublic void destroy(Long id) throws NonexistentEntityException {\nEntityManager em = null;\ntry {\nem = getEntityManager();\nem.getTransaction().begin();\nNewEntity newEntity;\ntry {\nnewEntity = em.getReference(NewEntity.class, id);\nnewEntity.getId();\n} catch (EntityNotFoundException enfe) {\nthrow new NonexistentEntityException(\"The newEntity with id \" + id + \" no longer exists.\", enfe);\n}\nem.remove(newEntity);\nem.getTransaction().commit();\n} finally {\nif (em != null) {\nem.close();\n}\n}\n}\n \npublic List&lt;NewEntity&gt; findNewEntityEntities() {\nreturn findNewEntityEntities(true, -1, -1);\n}\n \npublic List&lt;NewEntity&gt; (int maxResults, int firstResult) {\nreturn findNewEntityEntities(false, maxResults, firstResult);\n}\n \nprivate List&lt;NewEntity&gt; (boolean all, int maxResults, int firstResult) {\nEntityManager em = getEntityManager();\ntry {\nCriteriaQuery cq = em.getCriteriaBuilder().createQuery();\ncq.select(cq.from(NewEntity.class));\nQuery q = em.createQuery(cq);\nif (!all) {\nq.setMaxResults(maxResults);\nq.setFirstResult(firstResult);\n}\nreturn q.getResultList();\n} finally {\nem.close();\n}\n}\n \npublic NewEntity findNewEntity(Long id) {\nEntityManager em = getEntityManager();\ntry {\nreturn em.find(NewEntity.class, id);\n} finally {\nem.close();\n}\n}\n \npublic int getNewEntityCount() {\nEntityManager em = getEntityManager();\ntry {\nCriteriaQuery cq = em.getCriteriaBuilder().createQuery();\nRoot&lt;NewEntity&gt; rt = cq.from(NewEntity.class);\ncq.select(em.getCriteriaBuilder().count(rt));\nQuery q = em.createQuery(cq);\nreturn ((Long) q.getSingleResult()).intValue();\n} finally {\nem.close();\n}\n}\n}</code></pre>\n\n<div><span id=\"docs-internal-guid-b22f6e2b-044d-d58e-f67a-795b857d3474\"><span>Now we will create a new package named App and create an Application.java class in that package. To do that, right click on project “JPA”, select New&gt;Java Package. Give it a name, in my case it is “App”. Now right click on the package “App” and create a new Java class named Application in my case. </span></span></div>\n</div>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-044d-d58e-f67a-795b857d3474\"><span>In this class we will create our entityManagerFactory and set a name to the column we created with the @Column annotation in NewEntity.java class. Here is the code:</span></span></p>\n\n<pre>\n<code class=\"language-java\">package App;\n \nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport jpa.NewEntity;\nimport jpa.NewEntityJpaController;\n \npublic class Application {\npublic static void main (String args[]) {\nEntityManagerFactory objFactory = Persistence.createEntityManagerFactory(\"JPAPU\");\nEntityManager manager = objFactory.createEntityManager();\nNewEntity record = new NewEntity();\nNewEntityJpaController jpa = new NewEntityJpaController(objFactory);\nList&lt;NewEntity&gt; list = jpa.findNewEntityEntities();\n \nrecord.setName(\"Test\");\n \njpa.create(record);\n \nfor (NewEntity l : list) {\nSystem.out.println(\"Cod.: \"+l.getId()+\"\\nName.: \"+l.getName());\n }\n}\n}</code></pre>\n\n<p>Make sure the persistence-unit name from the persistence.xml file is what you are using in line 12. EntityManagerFactory objFactory = Persistence.createEntityManagerFactory(\"JPAPU\");</p>\n\n<p>Here is how it looks in persistence.xml: <persistence-unit name=\"JPAPU\" transaction-type=\"RESOURCE_LOCAL\"></persistence-unit><span> &lt;persistence-unit name=\"JPAPU\" transaction-type=\"RESOURCE_LOCAL\"&gt;</span></p>\n\n<p>Now you are ready to run the project and see that it created a table NewEntity in JPA database and a column “name” with the word “test” in it or whatever you have put in the code. Here is a screenshot of my database after I ran the code.</p>\n\n<div>[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"165\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"255\",\"width\":\"480\"}}]]</div>\n",
      "changed": "2016-07-07T20:53:42+00:00",
      "created": "2014-12-01T05:27:29+00:00",
      "summary": "<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0442-178c-ef18-62d2b0f23cee\"><span>In this article you will learn how to quickly get started with JPA. I will be using NetBeans and MySQL database to store data using JPA. If you have MySQL running, all you have to do is follow the steps below.</span></span></p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0442-178c-ef18-62d2b0f23cee\"><span>First let’s create a database that we will be using later on. From the command line you can just run the following command. Note, I will be using “JPA” as the name of my database for this tutorial.</span></span></p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0442-178c-ef18-62d2b0f23cee\"><span>create database JPA;</span></span></p>\n\n<p dir=\"ltr\"><span>Now we are ready to fire up NetBeans and get started. Once NetBeans is loaded, created a new “Java Application” project and give it a name. In my case I named it “JPA”. Go ahead and delete the generated java class file, we will create our own.</span></p>\n\n<p dir=\"ltr\">[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"158\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"331\",\"width\":\"480\"}}]]</p>\n\n<p dir=\"ltr\">[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"159\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"331\",\"width\":\"480\"}}]]</p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0445-a755-884a-2633a3c4535c\"><span>Now, right click on the (in my case) “JPA” package, select new, other, persistence, Entity Class as shown in the picture below.</span></span></p>\n\n<div>[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"160\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"331\",\"width\":\"480\"}}]]</div>\n\n<div> </div>\n\n<div><span id=\"docs-internal-guid-b22f6e2b-0446-eb28-7319-c23646b08d82\"><span>If you do not see “Persistence” from the categories, then you will need to download the plugin. To do that, click on Tools&gt;Plugins, then go to available plugins tab and search for “persistence”, select and install it as shown in the picture below. If you have persistence installed then skip to the next step.</span></span></div>\n\n<div> </div>\n\n<p dir=\"ltr\">[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"161\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"299\",\"width\":\"480\"}}]]</p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0447-e764-3693-a3ed70e704f7\"><span>Give new entity class a name, in my case I left it as the default name the IDE provided “NewEntity”. Click next and from database connection select “new database connection” and look for MySQL as shown in the picture below.</span></span></p>\n\n<p dir=\"ltr\">[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"162\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"358\",\"width\":\"480\"}}]]</p>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0448-c661-d239-6fa1582d9e27\"><span>Click next, and a configuration window should show up for setting up the connection to the MySQL database. In my case the database is running on a remote server but I have HeidiSQL connected through SSH tunnel on local port 3307. So I used the following configurations.</span></span></p>\n\n<div>[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"163\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"239\",\"width\":\"480\"}}]]</div>\n\n<div> </div>\n\n<div>\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-0449-8102-39ff-77f666be61d1\"><span>And here is a screenshot of my HeidiSQL connection in case you want to set up a similar environment.</span></span></p>\n\n<div>[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"164\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"287\",\"width\":\"480\"}}]]</div>\n\n<div> </div>\n\n<div><span id=\"docs-internal-guid-b22f6e2b-044a-c468-a6d5-23fd9ffc61f9\"><span>Once you have successfully configured a connection to the database, click finish and the IDE will generate the NewEntity class with some code. We will create a column “Name” type varchar, length 100 in this code and delete some unnecessary stuff. Here is the finished result:</span></span></div>\n\n<div>\n<pre>\n<code class=\"language-java\">package jpa;\n\nimport java.io.Serializable;\nimport java.util.Objects;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class NewEntity implements Serializable {\n  private static final long serialVersionUID = 1L;\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO) private Long id;\n  @Column(length = 100)\n  private String name;\n\n  public String getName() {\n   return name;\n  } \n  public void setName(String name) { \n    this.name = name; \n  } \n  public Long getId() { \n    return id; \n  }\n  public void setId(Long id) { \n    this.id = id; \n  } \n\n  @Override public int hashCode() {\n    int hash = 7; \n    hash = 59 * hash + Objects.hashCode(this.id); \n    hash = 59 * hash + Objects.hashCode(this.name); \n    return hash; \n  } \n  @Override public boolean equals(Object obj) {\n    if (obj == null) {\n     return false; \n    } \n    if (getClass() != obj.getClass()) { \n      return false; \n    } \n  final NewEntity other = (NewEntity) obj;\n    if (!Objects.equals(this.id, other.id)) { \n      return false; \n    } \n    if (!Objects.equals(this.name, other.name)) {\n     return false;\n    } \n    return true; \n  } \n  @Override public String toString() {\n    return \"jpa.NewEntity[ id=\" + id + \" ]\"; \n  } \n}</code></pre>\n\n<p><span id=\"docs-internal-guid-b22f6e2b-044c-31f0-91c9-4287ffcecd76\"><span>Now we will create a JPA Controller. To do that, right click on the “jpa” package &gt; other again and choose Persistence&gt;Jpa Controller Classes from Entity Classes this time. The IDE should generate the following code:</span></span></p>\n</div>\n</div>\n\n<div>\n<pre>\n<code class=\"language-java\">package jpa;\n \nimport java.io.Serializable;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Query;\nimport javax.persistence.EntityNotFoundException;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Root;\nimport jpa.exceptions.NonexistentEntityException;\n \npublic class NewEntityJpaController implements Serializable {\n \npublic NewEntityJpaController(EntityManagerFactory emf) {\nthis.emf = emf;\n}\nprivate EntityManagerFactory emf = null;\n \npublic EntityManager getEntityManager() {\nreturn emf.createEntityManager();\n}\n \npublic void create(NewEntity newEntity) {\nEntityManager em = null;\ntry {\nem = getEntityManager();\nem.getTransaction().begin();\nem.persist(newEntity);\nem.getTransaction().commit();\n} finally {\nif (em != null) {\nem.close();\n}\n}\n}\n \npublic void edit(NewEntity newEntity) throws NonexistentEntityException, Exception {\nEntityManager em = null;\ntry {\nem = getEntityManager();\nem.getTransaction().begin();\nnewEntity = em.merge(newEntity);\nem.getTransaction().commit();\n} catch (Exception ex) {\nString msg = ex.getLocalizedMessage();\nif (msg == null || msg.length() == 0) {\nLong id = newEntity.getId();\nif (findNewEntity(id) == null) {\nthrow new NonexistentEntityException(\"The newEntity with id \" + id + \" no longer exists.\");\n}\n}\nthrow ex;\n} finally {\nif (em != null) {\nem.close();\n}\n}\n}\n \npublic void destroy(Long id) throws NonexistentEntityException {\nEntityManager em = null;\ntry {\nem = getEntityManager();\nem.getTransaction().begin();\nNewEntity newEntity;\ntry {\nnewEntity = em.getReference(NewEntity.class, id);\nnewEntity.getId();\n} catch (EntityNotFoundException enfe) {\nthrow new NonexistentEntityException(\"The newEntity with id \" + id + \" no longer exists.\", enfe);\n}\nem.remove(newEntity);\nem.getTransaction().commit();\n} finally {\nif (em != null) {\nem.close();\n}\n}\n}\n \npublic List&lt;NewEntity&gt; findNewEntityEntities() {\nreturn findNewEntityEntities(true, -1, -1);\n}\n \npublic List&lt;NewEntity&gt; (int maxResults, int firstResult) {\nreturn findNewEntityEntities(false, maxResults, firstResult);\n}\n \nprivate List&lt;NewEntity&gt; (boolean all, int maxResults, int firstResult) {\nEntityManager em = getEntityManager();\ntry {\nCriteriaQuery cq = em.getCriteriaBuilder().createQuery();\ncq.select(cq.from(NewEntity.class));\nQuery q = em.createQuery(cq);\nif (!all) {\nq.setMaxResults(maxResults);\nq.setFirstResult(firstResult);\n}\nreturn q.getResultList();\n} finally {\nem.close();\n}\n}\n \npublic NewEntity findNewEntity(Long id) {\nEntityManager em = getEntityManager();\ntry {\nreturn em.find(NewEntity.class, id);\n} finally {\nem.close();\n}\n}\n \npublic int getNewEntityCount() {\nEntityManager em = getEntityManager();\ntry {\nCriteriaQuery cq = em.getCriteriaBuilder().createQuery();\nRoot&lt;NewEntity&gt; rt = cq.from(NewEntity.class);\ncq.select(em.getCriteriaBuilder().count(rt));\nQuery q = em.createQuery(cq);\nreturn ((Long) q.getSingleResult()).intValue();\n} finally {\nem.close();\n}\n}\n}</code></pre>\n\n<div><span id=\"docs-internal-guid-b22f6e2b-044d-d58e-f67a-795b857d3474\"><span>Now we will create a new package named App and create an Application.java class in that package. To do that, right click on project “JPA”, select New&gt;Java Package. Give it a name, in my case it is “App”. Now right click on the package “App” and create a new Java class named Application in my case. </span></span></div>\n</div>\n\n<p dir=\"ltr\"><span id=\"docs-internal-guid-b22f6e2b-044d-d58e-f67a-795b857d3474\"><span>In this class we will create our entityManagerFactory and set a name to the column we created with the @Column annotation in NewEntity.java class. Here is the code:</span></span></p>\n\n<pre>\n<code class=\"language-java\">package App;\n \nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport jpa.NewEntity;\nimport jpa.NewEntityJpaController;\n \npublic class Application {\npublic static void main (String args[]) {\nEntityManagerFactory objFactory = Persistence.createEntityManagerFactory(\"JPAPU\");\nEntityManager manager = objFactory.createEntityManager();\nNewEntity record = new NewEntity();\nNewEntityJpaController jpa = new NewEntityJpaController(objFactory);\nList&lt;NewEntity&gt; list = jpa.findNewEntityEntities();\n \nrecord.setName(\"Test\");\n \njpa.create(record);\n \nfor (NewEntity l : list) {\nSystem.out.println(\"Cod.: \"+l.getId()+\"\\nName.: \"+l.getName());\n }\n}\n}</code></pre>\n\n<p>Make sure the persistence-unit name from the persistence.xml file is what you are using in line 12. EntityManagerFactory objFactory = Persistence.createEntityManagerFactory(\"JPAPU\");</p>\n\n<p>Here is how it looks in persistence.xml: <persistence-unit name=\"JPAPU\" transaction-type=\"RESOURCE_LOCAL\"></persistence-unit><span> &lt;persistence-unit name=\"JPAPU\" transaction-type=\"RESOURCE_LOCAL\"&gt;</span></p>\n\n<p>Now you are ready to run the project and see that it created a table NewEntity in JPA database and a column “name” with the word “test” in it or whatever you have put in the code. Here is a screenshot of my database after I ran the code.</p>\n\n<div>[[{\"type\":\"media\",\"view_mode\":\"media_large\",\"fid\":\"165\",\"attributes\":{\"alt\":\"\",\"class\":\"media-image\",\"height\":\"255\",\"width\":\"480\"}}]]</div>\n",
      "field_tags": [
        {
          "id": "5f0b6ff9-9684-4470-883a-931518ad371d",
          "tid": 86,
          "name": "jpa",
          "alias": "/term/jpa"
        },
        {
          "id": "a815a4d8-66b0-4ae7-98a0-81584a0744e0",
          "tid": 57,
          "name": "netbeans",
          "alias": "/term/netbeans"
        },
        {
          "id": "18b7f0a8-d5ee-4328-abc8-93471c27be8f",
          "tid": 33,
          "name": "mysql",
          "alias": "/term/mysql"
        }
      ],
      "field_image": [
        {
          "id": "44d4b393-aa42-41fc-b5ab-1e7816d4c33b",
          "alt": "Java persistence",
          "title": "Java persistence",
          "url": "/sites/default/files/field/image/Java-persistence.PNG",
          "fid": 166
        }
      ],
      "uid": {
        "id": "791ffe43-66bd-4375-815d-da7aac195cdd",
        "display_name": "Dmitry Boychev"
      }
    },
    {
      "title": "Drupal-Angular Hybrid Apps",
      "nid": 113,
      "alias": "/article/drupal-angular-hybrid-apps",
      "slug": "drupal-angular-hybrid-apps",
      "body": "<p>On April 11, 2015, I gave a <a href=\"https://www.fldrupal.camp/sessions/approved/florida-drupalcamp-2015/sessions-drupal-island/developing-drupalangularjs-hybrid\">presentation at Florida Drupal Camp</a> about writing applications that leverage the power of both Drupal and AngularJS. The <a href=\"/sites/spinspire.com/files/field/article/file/Drupal-Angular%20Hybrid%20Apps.pdf\">slides for this presentation are attached</a>.</p>\n\n<p><span>Drupal is great as a content management system (</span><strong>CMS</strong><span>) and user management, authentication, authorization etc. along with layouts and rules; while <a href=\"https://angularjs.org/\">AngularJS</a> is an in-browser, client side MVC framework. AngularJS takes the idea of a JavaScript framework to a whole new level and provides a great basis for developing rich and dynamic apps that can run in the browser or as hybrid mobile apps. </span><span>We can always use Drupal or any other REST platform as server-side backend for our AngularJS application. Hence we can use third-parties to provide non-core and non-CMS functionality - such as payment processing, templated bulk- and transactional-emails.</span></p>\n\n<ul>\n\t<li><strong>Model</strong><span> (application data) is fetched from server-side restful services and it is transferred over JSON via AJAX requests to and fro. We can improve the user experience by persisting the application data in the browser in local storage.</span></li>\n\t<li><strong>View</strong> (Single Page) is the page with static HTML partials (templates) transferred over AJAX which doesn’t actually contain any data and is required to load only once (therefore highly cacheable)</li>\n\t<li><strong>Controller</strong> is the front-end / UI logic in JavaScript. It handles all navigation, validation, AJAX request and user interaction.</li>\n</ul>\n\n<p>This approach results into a simpler backend as all we have to write is a function that fetches data and returns data and has nothing to do with presentation layer, while front end deals with static HTML partials (templates) only. Overall its gives better user experience, better performance and faster development.</p>\n\n<p><span>I would posit that Drupal is best CMS to use when web applications does have lot of content but AngularJS is best front-end used for web applications while REST is the best way to choose the backend services. Thus mixing Drupal with AngularJS is a smart choice. You can use the following approach to build your Drupal-Angular hybrid apps:</span></p>\n\n<ol>\n\t<li><span>Develop the Angular application independent of Drupal</span></li>\n\t<li><span>Write a custom module to integrate Drupal with Angular application (SPA) as if, it was just a block. See <a href=\"http://restng.org\">restng.org</a> for an example</span></li>\n\t<li><span>We can Drupal's REST services with <a href=\"https://www.drupal.org/project/restws\">restws module</a> (there are many other REST services but we recommend RESTWS as its bit simpler).</span></li>\n\t<li><span>Add other custom REST services on platform of your choice, as well as third-party REST services.</span></li>\n\t<li><span>Use JSON Web Token (JWT) for security integration.</span></li>\n\t<li><span>Optionally, allow Local Storage for browser-side persistence for better user experience.</span></li>\n</ol>\n\n<p><span>SpinSpire has a great team of developers who have worked on hybrid web applications (Drupal+AngularJS) extensively. Please feel free to <a href=\"/contact\">drop us a line</a> for your application requirements.</span></p>\n\n<p><span>Also, check out the video of my presentation at DrupalCamp Atlanta 2014 on the same topic - </span><a href=\"http://drupalcampatlanta.com/2014-drupalcamp-atlanta/sessions/developing-drupalangularjs-hybrid-apps\"><span>http://drupalcampatlanta.com/2014-drupalcamp-atlanta/sessions/developing-drupalangularjs-hybrid-apps</span></a></p>\n",
      "changed": "2016-07-07T20:16:27+00:00",
      "created": "2015-04-14T13:45:17+00:00",
      "summary": "<p>On April 11, 2015, I gave a <a href=\"https://www.fldrupal.camp/sessions/approved/florida-drupalcamp-2015/sessions-drupal-island/developing-drupalangularjs-hybrid\">presentation at Florida Drupal Camp</a> about writing applications that leverage the power of both Drupal and AngularJS. The <a href=\"/sites/spinspire.com/files/field/article/file/Drupal-Angular%20Hybrid%20Apps.pdf\">slides for this presentation are attached</a>.</p>\n\n<p><span>Drupal is great as a content management system (</span><strong>CMS</strong><span>) and user management, authentication, authorization etc. along with layouts and rules; while <a href=\"https://angularjs.org/\">AngularJS</a> is an in-browser, client side MVC framework. AngularJS takes the idea of a JavaScript framework to a whole new level and provides a great basis for developing rich and dynamic apps that can run in the browser or as hybrid mobile apps. </span><span>We can always use Drupal or any other REST platform as server-side backend for our AngularJS application. Hence we can use third-parties to provide non-core and non-CMS functionality - such as payment processing, templated bulk- and transactional-emails.</span></p>\n\n<ul>\n\t<li><strong>Model</strong><span> (application data) is fetched from server-side restful services and it is transferred over JSON via AJAX requests to and fro. We can improve the user experience by persisting the application data in the browser in local storage.</span></li>\n\t<li><strong>View</strong> (Single Page) is the page with static HTML partials (templates) transferred over AJAX which doesn’t actually contain any data and is required to load only once (therefore highly cacheable)</li>\n\t<li><strong>Controller</strong> is the front-end / UI logic in JavaScript. It handles all navigation, validation, AJAX request and user interaction.</li>\n</ul>\n\n<p>This approach results into a simpler backend as all we have to write is a function that fetches data and returns data and has nothing to do with presentation layer, while front end deals with static HTML partials (templates) only. Overall its gives better user experience, better performance and faster development.</p>\n\n<p><span>I would posit that Drupal is best CMS to use when web applications does have lot of content but AngularJS is best front-end used for web applications while REST is the best way to choose the backend services. Thus mixing Drupal with AngularJS is a smart choice. You can use the following approach to build your Drupal-Angular hybrid apps:</span></p>\n\n<ol>\n\t<li><span>Develop the Angular application independent of Drupal</span></li>\n\t<li><span>Write a custom module to integrate Drupal with Angular application (SPA) as if, it was just a block. See <a href=\"http://restng.org\">restng.org</a> for an example</span></li>\n\t<li><span>We can Drupal's REST services with <a href=\"https://www.drupal.org/project/restws\">restws module</a> (there are many other REST services but we recommend RESTWS as its bit simpler).</span></li>\n\t<li><span>Add other custom REST services on platform of your choice, as well as third-party REST services.</span></li>\n\t<li><span>Use JSON Web Token (JWT) for security integration.</span></li>\n\t<li><span>Optionally, allow Local Storage for browser-side persistence for better user experience.</span></li>\n</ol>\n\n<p><span>SpinSpire has a great team of developers who have worked on hybrid web applications (Drupal+AngularJS) extensively. Please feel free to <a href=\"/contact\">drop us a line</a> for your application requirements.</span></p>\n\n<p><span>Also, check out the video of my presentation at DrupalCamp Atlanta 2014 on the same topic - </span><a href=\"http://drupalcampatlanta.com/2014-drupalcamp-atlanta/sessions/developing-drupalangularjs-hybrid-apps\"><span>http://drupalcampatlanta.com/2014-drupalcamp-atlanta/sessions/developing-drupalangularjs-hybrid-apps</span></a></p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "adff7f11-c874-4e8c-91df-685487fdbb2d",
          "alt": "DrupalCamp Florida Logo",
          "title": "DrupalCamp Florida Logo",
          "url": "/sites/default/files/field/image/drupal-diver-no-bubble.png",
          "fid": 196
        },
        {
          "id": "d34ff32d-b562-4928-8b2e-cf51e5d60a9e",
          "alt": "Jitesh Doshi presenting Angular-Drupal Hybrid apps",
          "title": "Jitesh Doshi presenting Angular-Drupal Hybrid apps",
          "url": "/sites/default/files/field/image/jitesh-doshi-presenting-drupal-angularjs-hybrid-apps.png",
          "fid": 198
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "How to build a LEMP/Drupal Server VM in cloud",
      "nid": 114,
      "alias": "/article/how-build-lempdrupal-server-vm-cloud",
      "slug": "how-build-lempdrupal-server-vm-cloud",
      "body": "<div class=\"flex-video\">\n<iframe allowfullscreen=\"\" frameborder=\"0\" src=\"https://www.youtube.com/embed/4iBnkBLWL-0\" height=\"480\" width=\"560\"></iframe>\n</div>\n\n<p>This video shows how to build LEMP (Linux+Nginx+MySQL+PHP) server VM in the cloud and run a Drupal site on it. The notes for the video are below. Use them along with watching the video.</p>\n\n<p>In case you decided to sign up with Vultr, use my <a href=\"http://www.vultr.com/?ref=6831416\">affiliate link here</a><span>.</span></p>\n\n<p><a href=\"http://www.vultr.com/?ref=6831416\" target=\"_blank\"><img alt=\"Vultr Logo\" src=\"https://my.vultr.com/_images/logo.png\" /></a></p>\n\n<p>Please note that the following ARE NOT exact instructions. They are just notes that make sense only with the video.</p>\n\n<ol>\n\t<li><span>Update &amp; Upgrade packages:<br />\n\t<tt>apt-get update &amp;&amp; apt-get upgrade</tt></span></li>\n\t<li>Install essential software:<br />\n\t<tt>apt-get -y install vim curl unzip ntp sudo debconf dialog</tt></li>\n\t<li>Install nginx:<br />\n\t<span>apt-get -y install nginx</span></li>\n\t<li>Basic server config file:<br />\n\t<tt>server {<br />\n\t  listen 80;<br />\n\t  server_name yourhostname;<br />\n\t  root /home/<em>username</em>/dev/web;<br />\n\t}</tt></li>\n\t<li>Install php etc:<br />\n\t<tt>apt-get -y install php5-fpm php-pear php5-gd php5-mysql php5-curl</tt></li>\n\t<li>Install mysql:<br />\n\t<tt>apt-get -y install mysql-server</tt></li>\n\t<li>Generate a fairly random password:<br />\n\t<tt>openssl rand 16 -hex</tt></li>\n\t<li>Create regular non-root user:<br />\n\t<tt>useradd <em>username</em> --create-home --shell /bin/bash --group adm -G sudo,adm,www-data</tt></li>\n\t<li>Append to /etc/sudoers.d/custom:\n\t<div><tt># Allow members of group sudo to execute any command (without password)</tt></div>\n\n\t<div><tt>%sudo   ALL=(ALL:ALL) NOPASSWD: ALL</tt></div>\n\t</li>\n\t<li>Install drush:<br />\n\t<tt>pear channel-discover pear.drush.org<br />\n\tpear install drush/drush<br />\n\tdrush status</tt></li>\n\t<li>Download Drupal:<br />\n\tdrush dl drupal-7</li>\n\t<li>Site directory changes:<br />\n\t<tt>mkdir files<br />\n\tcp default.settings.php settings.php<br />\n\tchgrp www-data files settings.php<br />\n\tchmod g+s files<br />\n\tmkdir -p modules/contrib modules/custom modules/features themes libraries scripts</tt></li>\n\t<li> </li>\n</ol>\n\n<p>In case you decided to sign up with Vultr, u<span>se my </span><a href=\"http://www.vultr.com/?ref=6831416\">affiliate link here</a><span>.</span></p>\n\n<p><a href=\"http://www.vultr.com/?ref=6831416\" target=\"_blank\"><img alt=\"Vultr Logo\" src=\"https://my.vultr.com/_images/logo.png\" /></a></p>\n",
      "changed": "2016-07-07T17:57:32+00:00",
      "created": "2015-05-09T05:21:55+00:00",
      "summary": "<div class=\"flex-video\">\n<iframe allowfullscreen=\"\" frameborder=\"0\" src=\"https://www.youtube.com/embed/4iBnkBLWL-0\" height=\"480\" width=\"560\"></iframe>\n</div>\n\n<p>This video shows how to build LEMP (Linux+Nginx+MySQL+PHP) server VM in the cloud and run a Drupal site on it. The notes for the video are below. Use them along with watching the video.</p>\n\n<p>In case you decided to sign up with Vultr, use my <a href=\"http://www.vultr.com/?ref=6831416\">affiliate link here</a><span>.</span></p>\n\n<p><a href=\"http://www.vultr.com/?ref=6831416\" target=\"_blank\"><img alt=\"Vultr Logo\" src=\"https://my.vultr.com/_images/logo.png\" /></a></p>\n\n<p>Please note that the following ARE NOT exact instructions. They are just notes that make sense only with the video.</p>\n\n<ol>\n\t<li><span>Update &amp; Upgrade packages:<br />\n\t<tt>apt-get update &amp;&amp; apt-get upgrade</tt></span></li>\n\t<li>Install essential software:<br />\n\t<tt>apt-get -y install vim curl unzip ntp sudo debconf dialog</tt></li>\n\t<li>Install nginx:<br />\n\t<span>apt-get -y install nginx</span></li>\n\t<li>Basic server config file:<br />\n\t<tt>server {<br />\n\t  listen 80;<br />\n\t  server_name yourhostname;<br />\n\t  root /home/<em>username</em>/dev/web;<br />\n\t}</tt></li>\n\t<li>Install php etc:<br />\n\t<tt>apt-get -y install php5-fpm php-pear php5-gd php5-mysql php5-curl</tt></li>\n\t<li>Install mysql:<br />\n\t<tt>apt-get -y install mysql-server</tt></li>\n\t<li>Generate a fairly random password:<br />\n\t<tt>openssl rand 16 -hex</tt></li>\n\t<li>Create regular non-root user:<br />\n\t<tt>useradd <em>username</em> --create-home --shell /bin/bash --group adm -G sudo,adm,www-data</tt></li>\n\t<li>Append to /etc/sudoers.d/custom:\n\t<div><tt># Allow members of group sudo to execute any command (without password)</tt></div>\n\n\t<div><tt>%sudo   ALL=(ALL:ALL) NOPASSWD: ALL</tt></div>\n\t</li>\n\t<li>Install drush:<br />\n\t<tt>pear channel-discover pear.drush.org<br />\n\tpear install drush/drush<br />\n\tdrush status</tt></li>\n\t<li>Download Drupal:<br />\n\tdrush dl drupal-7</li>\n\t<li>Site directory changes:<br />\n\t<tt>mkdir files<br />\n\tcp default.settings.php settings.php<br />\n\tchgrp www-data files settings.php<br />\n\tchmod g+s files<br />\n\tmkdir -p modules/contrib modules/custom modules/features themes libraries scripts</tt></li>\n\t<li> </li>\n</ol>\n\n<p>In case you decided to sign up with Vultr, u<span>se my </span><a href=\"http://www.vultr.com/?ref=6831416\">affiliate link here</a><span>.</span></p>\n\n<p><a href=\"http://www.vultr.com/?ref=6831416\" target=\"_blank\"><img alt=\"Vultr Logo\" src=\"https://my.vultr.com/_images/logo.png\" /></a></p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "2691b966-6b7e-497b-9c5a-34199f089341",
          "alt": "screenshot of the video",
          "title": "screenshot of the video",
          "url": "/sites/default/files/field/image/Screenshot%20from%202015-05-09%2002%3A00%3A25.png",
          "fid": 218
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire launches India Fest website",
      "nid": 40,
      "alias": "/article/spinspire-launches-india-fest-website",
      "slug": "spinspire-launches-india-fest-website",
      "body": "<p>SpinSpire has launched the <a href=\"http://jaxindiafest.org\">India Fest website</a> that it designed and built. It features heavy content management, vendor signup and interactive forms.</p>",
      "changed": "2016-06-21T18:36:21+00:00",
      "created": "2010-08-01T20:30:21+00:00",
      "summary": "<p>SpinSpire has launched the <a href=\"http://jaxindiafest.org\">India Fest website</a> that it designed and built. It features heavy content management, vendor signup and interactive forms.</p>",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "6776c29a-b566-466d-864f-949649546ab5",
          "alt": "Jax India fest logo",
          "title": "Jax India fest logo",
          "url": "/sites/default/files/field/image/Home%20%20JaxIndiaFest%20-%20Google%20Chrome_2013-06-14_10-48-16.png",
          "fid": 51
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire launches GSNEF website",
      "nid": 35,
      "alias": "/article/spinspire-launches-gsnef-website",
      "slug": "spinspire-launches-gsnef-website",
      "body": "<p>SpinSpire has launched the highly interactive <a href=\"http://gsnef.org\">GSNEF</a> website that it designed and built. The website features, membership management. e-store, event management, ticket sales, payment gateway integration and heavy content mangement.</p>",
      "changed": "2016-06-21T18:36:05+00:00",
      "created": "2010-09-07T20:26:46+00:00",
      "summary": "<p>SpinSpire has launched the highly interactive <a href=\"http://gsnef.org\">GSNEF</a> website that it designed and built. The website features, membership management. e-store, event management, ticket sales, payment gateway integration and heavy content mangement.</p>",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        },
        {
          "id": "97eeed87-8748-41f4-8027-20080f2a65dc",
          "tid": 12,
          "name": "civicrm",
          "alias": "/term/civicrm"
        },
        {
          "id": "ab5ade35-4f0d-492f-90c4-f7bae677b938",
          "tid": 22,
          "name": "content management",
          "alias": "/term/content-management"
        },
        {
          "id": "b48a8a21-670c-4891-a53d-183dd0259a88",
          "tid": 23,
          "name": "ticket purchase",
          "alias": "/term/ticket-purchase"
        },
        {
          "id": "44aea497-b274-4248-a90e-65360787bd9e",
          "tid": 24,
          "name": "barcode",
          "alias": "/term/barcode"
        },
        {
          "id": "bb928fcf-4bdb-437b-af95-4995c06bf871",
          "tid": 18,
          "name": "smart phones",
          "alias": "/term/smart-phones"
        }
      ],
      "field_image": [
        {
          "id": "83a3e581-dc37-43f8-9965-8504612401c4",
          "alt": "Gujarati samaj",
          "title": "Gujarati samaj",
          "url": "/sites/default/files/field/image/Gujarati%20samaj.png",
          "fid": 45
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire launches Innovative Wind Energy website",
      "nid": 39,
      "alias": "/article/spinspire-launches-innovative-wind-energy-website",
      "slug": "spinspire-launches-innovative-wind-energy-website",
      "body": "<p>SpinSpire has launched <a href=\"http://i-windenergy.com/\">Innovative Wind Energy website</a> that it designed and built. It is a company website featuring content magement, user sign ups, newsletters and many interactive features.</p>",
      "changed": "2016-06-21T18:35:39+00:00",
      "created": "2010-09-16T20:33:02+00:00",
      "summary": "<p>SpinSpire has launched <a href=\"http://i-windenergy.com/\">Innovative Wind Energy website</a> that it designed and built. It is a company website featuring content magement, user sign ups, newsletters and many interactive features.</p>",
      "field_tags": [],
      "field_image": [
        {
          "id": "4fa69c85-4eff-476c-96ca-7c16ed818453",
          "alt": "wind turbine",
          "title": "wind turbine",
          "url": "/sites/default/files/field/image/Innovative%20Wind%20Energy%2C%20Inc.png",
          "fid": 50
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire to take specialty brick-and-mortar chain online",
      "nid": 37,
      "alias": "/article/spinspire-take-specialty-brick-and-mortar-chain-online",
      "slug": "spinspire-take-specialty-brick-and-mortar-chain-online",
      "body": "<p>SpinSpire has signed defitivie contract with a Florida based brick-and-mortar specialty store chain to develop full feature online store.</p>\n",
      "changed": "2016-06-21T18:35:01+00:00",
      "created": "2010-11-07T20:13:39+00:00",
      "summary": "<p>SpinSpire has signed defitivie contract with a Florida based brick-and-mortar specialty store chain to develop full feature online store.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        },
        {
          "id": "bc5d7a2c-3afb-49b2-9382-9bec71db84eb",
          "tid": 26,
          "name": "e-commerce",
          "alias": "/term/e-commerce"
        },
        {
          "id": "56db2d2a-fdbb-4d2a-843c-0b0eb52ecb07",
          "tid": 27,
          "name": "shopping cart",
          "alias": "/term/shopping-cart"
        },
        {
          "id": "1ca66f9f-e236-4d17-9889-9a43c259cefa",
          "tid": 28,
          "name": "marketing",
          "alias": "/term/marketing"
        },
        {
          "id": "9c37fc5b-4757-4fa5-a503-15183c2370cf",
          "tid": 29,
          "name": "product catalog",
          "alias": "/term/product-catalog"
        },
        {
          "id": "185dbd75-17b4-4676-9626-d4a0322e134c",
          "tid": 30,
          "name": "recommendations",
          "alias": "/term/recommendations"
        }
      ],
      "field_image": [
        {
          "id": "a1712be2-9f63-4fdd-b02a-741e603a1763",
          "alt": "SpinSpire logo",
          "title": "SpinSpire logo",
          "url": "/sites/default/files/field/image/j_4.JPG",
          "fid": 48
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire launches ICS website",
      "nid": 36,
      "alias": "/article/spinspire-launches-ics-website",
      "slug": "spinspire-launches-ics-website",
      "body": "<p>SpinSpire has launched the highly interactive <a href=\"http://jaxics.org\" target=\"_blank\">jaxics.org</a> website that it designed and built. The website features, membership management. payment gateway integration and heavy content mangement.</p>\n",
      "changed": "2016-06-21T18:34:39+00:00",
      "created": "2010-11-13T20:25:38+00:00",
      "summary": "<p>SpinSpire has launched the highly interactive <a href=\"http://jaxics.org\" target=\"_blank\">jaxics.org</a> website that it designed and built. The website features, membership management. payment gateway integration and heavy content mangement.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        },
        {
          "id": "ab5ade35-4f0d-492f-90c4-f7bae677b938",
          "tid": 22,
          "name": "content management",
          "alias": "/term/content-management"
        },
        {
          "id": "861f7953-cdbb-4a8e-a0fc-ff2c9ed51dbc",
          "tid": 25,
          "name": "membership management",
          "alias": "/term/membership-management"
        }
      ],
      "field_image": [
        {
          "id": "384f8b20-9ea7-4751-aac0-251e91663996",
          "alt": "SpinSpire logo",
          "title": "SpinSpire logo",
          "url": "/sites/default/files/field/image/j_3.JPG",
          "fid": 46
        },
        {
          "id": "0c80eeeb-564f-46cf-84b8-103bb2138fc0",
          "alt": "Indian Cultural Society logo",
          "title": "Indian Cultural Society logo",
          "url": "/sites/default/files/field/image/ics.JPG",
          "fid": 47
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Commercial Companies running Drupal",
      "nid": 27,
      "alias": "/article/commercial-companies-running-drupal",
      "slug": "commercial-companies-running-drupal",
      "body": "<p>We have often been asked for examples of high traffic sites that run Drupal.  This is an attempt to create a running list of commercial websites.</p>\n\n<ol>\n\t<li>Al Jazeera.  As one would expect, the democracy movement in the middle-east caused a huge spike in volume.  Drupal on Acquia cloud was able to manage the spike in traffic. See <a href=\"http://memeburn.com/2011/03/al-jazeera-handling-traffic-spikes-with-cloud-services-and-drupal/\">this March 11, 2011 article</a>.  </li>\n\t<li>The Economist magazine.</li>\n\t<li>Popular Science </li>\n\t<li>Fox News</li>\n\t<li>Lifetime TV</li>\n\t<li>Sony Music</li>\n\t<li>Red Hat Linux</li>\n\t<li>Will add more as I learn about it.</li>\n</ol>\n",
      "changed": "2016-06-21T18:34:01+00:00",
      "created": "2011-03-17T17:40:05+00:00",
      "summary": "<p>We have often been asked for examples of high traffic sites that run Drupal.  This is an attempt to create a running list of commercial websites.</p>\n\n<ol>\n\t<li>Al Jazeera.  As one would expect, the democracy movement in the middle-east caused a huge spike in volume.  Drupal on Acquia cloud was able to manage the spike in traffic. See <a href=\"http://memeburn.com/2011/03/al-jazeera-handling-traffic-spikes-with-cloud-services-and-drupal/\">this March 11, 2011 article</a>.  </li>\n\t<li>The Economist magazine.</li>\n\t<li>Popular Science </li>\n\t<li>Fox News</li>\n\t<li>Lifetime TV</li>\n\t<li>Sony Music</li>\n\t<li>Red Hat Linux</li>\n\t<li>Will add more as I learn about it.</li>\n</ol>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "14ffdda1-b802-4264-8546-cd44cf52f0b9",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_10.jpg",
          "fid": 38
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Paypal IPN verify fails without SSL in sandbox",
      "nid": 26,
      "alias": "/article/paypal-ipn-verify-fails-without-ssl-sandbox",
      "slug": "paypal-ipn-verify-fails-without-ssl-sandbox",
      "body": "<p>I was testing a new module I am writing. It is designed to receive IPN (instant payment notification) postbacks from Paypal. And when the code receives an IPN postback, it in turn calls Paypal again and asks Paypal to verify that the given IPN is real and not fake. Paypal is supposed to look at the IPN data and reply with a string \"VERIFIED\"</p>\n\n<p>This was working until a few days back, and is not working anymore. After struggling with it for several hours, I found out that Paypal sandbox does not like my code to connect to it in non-SSL mode on port 80. I had replace the plain HTTP connection back to Paypal with HTTPS (SSL) connection on port 443, and everything started working again. From what I read on the Internet, it seems Paypal sandbox has done this several times in the past and then they fix the problem a few days later.</p>\n",
      "changed": "2016-06-21T18:33:46+00:00",
      "created": "2011-11-07T00:02:00+00:00",
      "summary": "<p>I was testing a new module I am writing. It is designed to receive IPN (instant payment notification) postbacks from Paypal. And when the code receives an IPN postback, it in turn calls Paypal again and asks Paypal to verify that the given IPN is real and not fake. Paypal is supposed to look at the IPN data and reply with a string \"VERIFIED\"</p>\n\n<p>This was working until a few days back, and is not working anymore. After struggling with it for several hours, I found out that Paypal sandbox does not like my code to connect to it in non-SSL mode on port 80. I had replace the plain HTTP connection back to Paypal with HTTPS (SSL) connection on port 443, and everything started working again. From what I read on the Internet, it seems Paypal sandbox has done this several times in the past and then they fix the problem a few days later.</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "ba02b5c4-3eea-4b12-8f2f-95bff092c1ab",
          "alt": "PayPal logo",
          "title": "PayPal logo",
          "url": "/sites/default/files/field/image/6870680649_48350691f2_o.jpg",
          "fid": 37
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Slideshow Creator",
      "nid": 41,
      "alias": "/article/slideshow-creator",
      "slug": "slideshow-creator",
      "body": "<p> This is an example of the use of slideshow creator within articles. The slideshow creator input format has been enabled in the text-formats configuration. This allows users to simply write in the slideshow statement as a part of their article content, the statement then being transformed into a slideshow when the content is published. This is very handy for on the fly slideshow creation, within articles.</p>\n\n<p>[slideshow: 2, height=240, width=300, img=|/sites/spinspire.com/files/u/4/drupal-logo.png|http://drupal.org/|Drupal|The ultimate <a href=\"https://en.wikipedia.org/wiki/Content_management_system\">CMS</a>. Download it now!|_blank|, img=|/sites/spinspire.com/files/u/4/spinspire-logo.png|http://spinspire.com/|SpinSpire|High Performance Web and Mobile||]</p>\n",
      "changed": "2016-06-21T18:33:00+00:00",
      "created": "2012-05-10T16:36:10+00:00",
      "summary": "<p> This is an example of the use of slideshow creator within articles. The slideshow creator input format has been enabled in the text-formats configuration. This allows users to simply write in the slideshow statement as a part of their article content, the statement then being transformed into a slideshow when the content is published. This is very handy for on the fly slideshow creation, within articles.</p>\n\n<p>[slideshow: 2, height=240, width=300, img=|/sites/spinspire.com/files/u/4/drupal-logo.png|http://drupal.org/|Drupal|The ultimate <a href=\"https://en.wikipedia.org/wiki/Content_management_system\">CMS</a>. Download it now!|_blank|, img=|/sites/spinspire.com/files/u/4/spinspire-logo.png|http://spinspire.com/|SpinSpire|High Performance Web and Mobile||]</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "146b62f7-fbd4-4e4b-bd8f-c4ea0bd460c5",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/a2.gif",
          "fid": 52
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "page caching gets in the way of token substitution",
      "nid": 42,
      "alias": "/article/page-caching-gets-way-token-substitution",
      "slug": "page-caching-gets-way-token-substitution",
      "body": "<p>Recently, I wrote a module that exposes my own custom tokens. They worked well, up to a point. But when I tried to use them in the middle of the content of an article, they were not reflecting the latest value. That's because of page caching. The page content is cached by Drupal, and the changing value of token is not reflected after the page get cached. I'll look into this further, and I hope I find a solution.</p>\n\n<p>Please add a comment below if you have any suggestions.</p>\n",
      "changed": "2016-06-21T18:32:43+00:00",
      "created": "2012-05-14T18:35:22+00:00",
      "summary": "<p>Recently, I wrote a module that exposes my own custom tokens. They worked well, up to a point. But when I tried to use them in the middle of the content of an article, they were not reflecting the latest value. That's because of page caching. The page content is cached by Drupal, and the changing value of token is not reflected after the page get cached. I'll look into this further, and I hope I find a solution.</p>\n\n<p>Please add a comment below if you have any suggestions.</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "bd156d8c-6b1e-463e-87e7-b72f4ee44b3e",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_14.jpg",
          "fid": 53
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Tikkits.com makes a splash--tickets worth about $190K sold on tikkits.com",
      "nid": 52,
      "alias": "/article/tikkitscom-makes-splash-tickets-worth-about-190k-sold-tikkitscom",
      "slug": "tikkitscom-makes-splash-tickets-worth-about-190k-sold-tikkitscom",
      "body": "<p><a href=\"tikkits.com\" target=\"_blank\">Tikkits.com</a> was launched in August 2012 with Shreya Ghoshal shows in Orlando and Atlanta. The launch was a phenomenal success. $190,000 worth of tickets were sold. Both venues were sold out, each with 2,500+ seats. <a href=\"tikkits.com\" target=\"_blank\">Tikkits.com</a> thanks Paracha Entertainment for the trust placed with ticketing and seat assignment.</p>\n\n<p><a href=\"tikkits.com\" target=\"_blank\">Tikkits.com</a> is simply the best in event ticketing and seat selection. It provides point-n-click seat selection, fully automated e-ticket, online payment, mobile-enabled check-in, seat inventory management for all sales channels, and unparalleled service.</p>\n",
      "changed": "2016-06-21T18:32:31+00:00",
      "created": "2012-10-20T12:37:13+00:00",
      "summary": "<p><a href=\"tikkits.com\" target=\"_blank\">Tikkits.com</a> was launched in August 2012 with Shreya Ghoshal shows in Orlando and Atlanta. The launch was a phenomenal success. $190,000 worth of tickets were sold. Both venues were sold out, each with 2,500+ seats. <a href=\"tikkits.com\" target=\"_blank\">Tikkits.com</a> thanks Paracha Entertainment for the trust placed with ticketing and seat assignment.</p>\n\n<p><a href=\"tikkits.com\" target=\"_blank\">Tikkits.com</a> is simply the best in event ticketing and seat selection. It provides point-n-click seat selection, fully automated e-ticket, online payment, mobile-enabled check-in, seat inventory management for all sales channels, and unparalleled service.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "81803192-b72a-45f9-929d-29b7e45997dc",
          "alt": "tikkits logo",
          "title": "tikkits logo",
          "url": "/sites/default/files/field/image/logo_1.png",
          "fid": 63
        },
        {
          "id": "c1315126-31a7-49d4-abbf-220834174ffc",
          "alt": "Shreya Ghoshal",
          "title": "Shreya Ghoshal",
          "url": "/sites/default/files/field/image/images_18.jpg",
          "fid": 64
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Mika Singh in Atlanta--Another successful event on tikkits.com",
      "nid": 55,
      "alias": "/article/mika-singh-atlanta-another-successful-event-tikkitscom",
      "slug": "mika-singh-atlanta-another-successful-event-tikkitscom",
      "body": "<p><a href=\"tikkits.com\">Tikkits.com</a> was the exclusive online seating selection and ticketing for the Mika Singh in Atlanta show on November 2, 2012 at the Atlanta Civic Center.</p>\n",
      "changed": "2016-06-21T18:31:48+00:00",
      "created": "2012-11-05T13:42:26+00:00",
      "summary": "<p><a href=\"tikkits.com\">Tikkits.com</a> was the exclusive online seating selection and ticketing for the Mika Singh in Atlanta show on November 2, 2012 at the Atlanta Civic Center.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "4e2d848a-91e9-4ff5-a291-fd7de64d1b37",
          "alt": "tikkits logo",
          "title": "tikkits logo",
          "url": "/sites/default/files/field/image/logo_2.png",
          "fid": 68
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "GSNEF's Diwali 2012 \"sold out\" on tikkits.com",
      "nid": 57,
      "alias": "/article/gsnefs-diwali-2012-sold-out-tikkitscom",
      "slug": "gsnefs-diwali-2012-sold-out-tikkitscom",
      "body": "<p>tikkits.com was the exclusive online ticketing and seat selection service provider for the Diwali 2012 show and dinner hosted by the Gujarati Samaj of Northeast Florida.  tikkits.com sold about $50K worth of tickets. This event featured ticketing for both assigned and unassigned seating.</p>\n\n<p>Tikkits.com thanks Gujarati Samaj of Northeast Florida for the trust placed with ticketing and seat assignment.</p>\n\n<p>Tikkits.com is simply the best in event ticketing and seat selection. It provides point-n-click seat selection, fully automated e-ticket, online payment, mobile-enabled check-in, seat inventory management for all sales channels, and unparalleled service.</p>\n",
      "changed": "2016-06-21T18:31:30+00:00",
      "created": "2012-11-09T15:22:10+00:00",
      "summary": "<p>tikkits.com was the exclusive online ticketing and seat selection service provider for the Diwali 2012 show and dinner hosted by the Gujarati Samaj of Northeast Florida.  tikkits.com sold about $50K worth of tickets. This event featured ticketing for both assigned and unassigned seating.</p>\n\n<p>Tikkits.com thanks Gujarati Samaj of Northeast Florida for the trust placed with ticketing and seat assignment.</p>\n\n<p>Tikkits.com is simply the best in event ticketing and seat selection. It provides point-n-click seat selection, fully automated e-ticket, online payment, mobile-enabled check-in, seat inventory management for all sales channels, and unparalleled service.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "4f5279d0-c39a-49a9-a164-e7b561c13d4b",
          "alt": "sold out image",
          "title": "sold out image",
          "url": "/sites/default/files/field/image/soldout.png",
          "fid": 71
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire launches DataWizard.me",
      "nid": 62,
      "alias": "/article/spinspire-launches-datawizardme",
      "slug": "spinspire-launches-datawizardme",
      "body": "<p>SpinSpire has launched <a href=\"http://datawizard.me/\">DataWizard.me</a>, a data visualization portal for the wind industry.  DataWizard.me automates daily data collection, insertion into a database, and charting of wind data at various levels of aggregation.  A custom chart, called Wind Rose, has been created to visualize wind data in polar coordinates.  This Drupal-based portal uses Google Chart Tools to create charts in SVG.</p>\n",
      "changed": "2016-06-21T18:31:14+00:00",
      "created": "2013-03-15T19:55:19+00:00",
      "summary": "<p>SpinSpire has launched <a href=\"http://datawizard.me/\">DataWizard.me</a>, a data visualization portal for the wind industry.  DataWizard.me automates daily data collection, insertion into a database, and charting of wind data at various levels of aggregation.  A custom chart, called Wind Rose, has been created to visualize wind data in polar coordinates.  This Drupal-based portal uses Google Chart Tools to create charts in SVG.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "738debdf-c187-4c4d-a712-36551be5ed4a",
          "alt": "Scatter Plot Graph",
          "title": "Scatter Plot Graph",
          "url": "/sites/default/files/field/image/Capture.JPG",
          "fid": 77
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "tikkits.com is the point-n-click seating portal for Sunidhi Chauhan shows",
      "nid": 61,
      "alias": "/article/tikkitscom-point-n-click-seating-portal-sunidhi-chauhan-shows",
      "slug": "tikkitscom-point-n-click-seating-portal-sunidhi-chauhan-shows",
      "body": "<p><a href=\"tikkits.com\">tikkits.com</a> is proud to be the exclusive online ticketing with point-n-click seat selection for Sunidhi Chauhan's shows in <a href=\"https://parachaentertainment.tikkits.com/event/sunidhi-chauhan-orlando\">Orlando </a>on March 31, 2013 and <a href=\"https://parachaentertainment.tikkits.com/event/sunidhi-chauhan-and-ali-zafar-atlanta\">Atlanta </a>on April 19, 2013.</p>\n\n<p>WIth point-n-click seat selection, you can know the exact location and position of the seat you choose. </p>\n\n<p>tikkits.com thanks Paracha Entertainment for their continued trust in the tikkits.com team.</p>\n\n<p>tikkits.com is owned, operated and managed by <a href=\"http://spinspire.com\">SpinSpire</a>, and is available for all shows that are in need of ticketing.</p>\n\n<p> </p>\n",
      "changed": "2016-06-21T18:30:09+00:00",
      "created": "2013-02-16T04:44:14+00:00",
      "summary": "<p><a href=\"tikkits.com\">tikkits.com</a> is proud to be the exclusive online ticketing with point-n-click seat selection for Sunidhi Chauhan's shows in <a href=\"https://parachaentertainment.tikkits.com/event/sunidhi-chauhan-orlando\">Orlando </a>on March 31, 2013 and <a href=\"https://parachaentertainment.tikkits.com/event/sunidhi-chauhan-and-ali-zafar-atlanta\">Atlanta </a>on April 19, 2013.</p>\n\n<p>WIth point-n-click seat selection, you can know the exact location and position of the seat you choose. </p>\n\n<p>tikkits.com thanks Paracha Entertainment for their continued trust in the tikkits.com team.</p>\n\n<p>tikkits.com is owned, operated and managed by <a href=\"http://spinspire.com\">SpinSpire</a>, and is available for all shows that are in need of ticketing.</p>\n\n<p> </p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "f14c734a-b390-4340-a2c4-ed6d65ab75f3",
          "alt": "Sunidhi Chauhan's show flyer ",
          "title": "Sunidhi Chauhan's show flyer ",
          "url": "/sites/default/files/field/image/images_21.jpg",
          "fid": 76
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Displaying clickable popular tags ",
      "nid": 44,
      "alias": "/article/displaying-clickable-popular-tags",
      "slug": "displaying-clickable-popular-tags",
      "body": "<p>&lt;p&gt;&amp;nbsp; &amp;nbsp; We recently worked on creating a list of tags most frequently used by visitors (it is a question-answer forum), with the number of tags specified by the site administrator, with a choice of &#039;0&#039; or a blank field indicating that all terms from a vocabulary be displayed. An important part of the implementation was generating the correct database query. After a couple of attempts, the following module was written (it is a hook_form_alter with the alteration being applied to the taxonomy through this function):&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;{syntaxhighlighter brush:php;}&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;define(&#039;SQL_POPULAR_TERMS&#039;, &#039;SELECT td.tid, td.name, COUNT(tn.tid) FROM term_data td LEFT JOIN term_node tn ON (tn.tid = td.tid) WHERE td.vid = %d GROUP BY td.tid ORDER BY COUNT(tn.tid) DESC LIMIT %d&#039;);&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;define(&#039;SQL_POPULAR_TERMS_UNLIMITED&#039;, &#039;SELECT td.tid, td.name, COUNT(tn.tid) FROM term_data td LEFT JOIN term_node tn ON (tn.tid = td.tid) WHERE td.vid = %d GROUP BY td.tid ORDER BY COUNT(tn.tid) DESC&#039;);&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;function _sqe_get_popular_terms($vid, $count = NULL) { if(is_null($count)) { $count = variable_get(&#039;sqe_popular_tag_limit&#039;, 10); }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;if(empty($count)) { $query = db_query(SQL_POPULAR_TERMS_UNLIMITED, $vid); }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;else { $query = db_query(SQL_POPULAR_TERMS, $vid, $count); }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;$terms = array();&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;while ($row = db_fetch_array($query)) { $terms[$row[&#039;tid&#039;]] = $row[&#039;name&#039;]; }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;return $terms; }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;{/syntaxhighlighter}&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; With a little bit of styling (we made the tags look like buttons and added an element type &#039;a&#039; to them to make the default behaviour on hover appear to be &#039;click&#039;), the tags look invitingly clickable.&lt;/p&gt;</p>\n",
      "changed": "2016-06-10T13:55:56+00:00",
      "created": "2012-06-01T14:32:31+00:00",
      "summary": "<p>&lt;p&gt;&amp;nbsp; &amp;nbsp; We recently worked on creating a list of tags most frequently used by visitors (it is a question-answer forum), with the number of tags specified by the site administrator, with a choice of &#039;0&#039; or a blank field indicating that all terms from a vocabulary be displayed. An important part of the implementation was generating the correct database query. After a couple of attempts, the following module was written (it is a hook_form_alter with the alteration being applied to the taxonomy through this function):&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;{syntaxhighlighter brush:php;}&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;define(&#039;SQL_POPULAR_TERMS&#039;, &#039;SELECT td.tid, td.name, COUNT(tn.tid) FROM term_data td LEFT JOIN term_node tn ON (tn.tid = td.tid) WHERE td.vid = %d GROUP BY td.tid ORDER BY COUNT(tn.tid) DESC LIMIT %d&#039;);&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;define(&#039;SQL_POPULAR_TERMS_UNLIMITED&#039;, &#039;SELECT td.tid, td.name, COUNT(tn.tid) FROM term_data td LEFT JOIN term_node tn ON (tn.tid = td.tid) WHERE td.vid = %d GROUP BY td.tid ORDER BY COUNT(tn.tid) DESC&#039;);&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;function _sqe_get_popular_terms($vid, $count = NULL) { if(is_null($count)) { $count = variable_get(&#039;sqe_popular_tag_limit&#039;, 10); }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;if(empty($count)) { $query = db_query(SQL_POPULAR_TERMS_UNLIMITED, $vid); }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;else { $query = db_query(SQL_POPULAR_TERMS, $vid, $count); }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;$terms = array();&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;while ($row = db_fetch_array($query)) { $terms[$row[&#039;tid&#039;]] = $row[&#039;name&#039;]; }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;return $terms; }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: #c0c0c0;&quot;&gt;&lt;code&gt;{/syntaxhighlighter}&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; With a little bit of styling (we made the tags look like buttons and added an element type &#039;a&#039; to them to make the default behaviour on hover appear to be &#039;click&#039;), the tags look invitingly clickable.&lt;/p&gt;</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "eae66bc8-6b60-4d96-b4d2-8939ab2b34d4",
          "alt": "",
          "title": "",
          "url": "/sites/default/files/field/image/images_15.jpg",
          "fid": 55
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "accessing a remote MySQL server locally using SSH port forwarding",
      "nid": 45,
      "alias": "/article/accessing-remote-mysql-server-locally-using-ssh-port-forwarding",
      "slug": "accessing-remote-mysql-server-locally-using-ssh-port-forwarding",
      "body": "<p>If you have a shared hosting or VPS hosting account, you probably have a MySQL server on it. And in order to access it (run SQL commands), you typically end up firing up the command line 'mysql' client. No matter how handy you are with the command line, at least of database access and manipulation, it is easier and more productive to use a graphical client such as <a href=\"http://dev.mysql.com/downloads/gui-tools\">MySQL Admin</a> or, the excellent, <a href=\"http://www.heidisql.com/\">HeidiSQL </a>GUI client. But in order to use these tools, they must be able to connect to the MySQL server, which they won't if there are firewalls between your PC and the MySQL server (there always are).</p>\n\n<h2>SSH to the rescue!</h2>\n\n<p><span>(This requires an SSH client installed on your computer. You can use </span><a href=\"http://git-scm.com/downloads\">Git Bash</a><span> for Windows. Mac and Linux come with ssh-clients built in.)</span></p>\n\n<p>We solve this problem by mirroring the remote port on which MySQL server is listen to a local port on your PC. Here's how:</p>\n\n<p>ssh -L 3307:localhost:3306 youruser@hostingprovider.com</p>\n\n<p>In the above command ...</p>\n\n<table border=\"0\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>3307</td>\n\t\t\t<td>Local port number that will mirror the remote port. This is where you will point your GUI client to. We could use any local port number, including 3306 - the usual MySQL port, but I didn't use that one since you might have a local MySQL server already listening on that port.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3306</td>\n\t\t\t<td>Remote port where MySQL is listening (as seen by your hosting provider). This is the port that gets mirrored.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>localhost</td>\n\t\t\t<td>Hostname where the remote port exists - as seen by your hosting provider. This is where you would point your command line MySQL client were you connecting from your hosting provider. Replace this with dbserver.yourhostingprovider.com if your hosting provider runs the MySQL server on a host other than where you SSH into.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>youruser@yourhostingprovider.com</td>\n\t\t\t<td>The user account and hostname that you usually connect to when you SSH into your hosting provider.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Now, all you have to do is fire up your MySQL GUI client and point it to localhost:3307 (because one end of SSH tunnel is running on localhost:3307, while the other end is running on locahost:3306 - please note that the second 'localhost' is not your own localhost, but the one seen by yourhostingprovider.com).</p>\n",
      "changed": "2016-06-10T13:55:56+00:00",
      "created": "2012-07-21T12:19:43+00:00",
      "summary": "<p>If you have a shared hosting or VPS hosting account, you probably have a MySQL server on it. And in order to access it (run SQL commands), you typically end up firing up the command line 'mysql' client. No matter how handy you are with the command line, at least of database access and manipulation, it is easier and more productive to use a graphical client such as <a href=\"http://dev.mysql.com/downloads/gui-tools\">MySQL Admin</a> or, the excellent, <a href=\"http://www.heidisql.com/\">HeidiSQL </a>GUI client. But in order to use these tools, they must be able to connect to the MySQL server, which they won't if there are firewalls between your PC and the MySQL server (there always are).</p>\n\n<h2>SSH to the rescue!</h2>\n\n<p><span>(This requires an SSH client installed on your computer. You can use </span><a href=\"http://git-scm.com/downloads\">Git Bash</a><span> for Windows. Mac and Linux come with ssh-clients built in.)</span></p>\n\n<p>We solve this problem by mirroring the remote port on which MySQL server is listen to a local port on your PC. Here's how:</p>\n\n<p>ssh -L 3307:localhost:3306 youruser@hostingprovider.com</p>\n\n<p>In the above command ...</p>\n\n<table border=\"0\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>3307</td>\n\t\t\t<td>Local port number that will mirror the remote port. This is where you will point your GUI client to. We could use any local port number, including 3306 - the usual MySQL port, but I didn't use that one since you might have a local MySQL server already listening on that port.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3306</td>\n\t\t\t<td>Remote port where MySQL is listening (as seen by your hosting provider). This is the port that gets mirrored.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>localhost</td>\n\t\t\t<td>Hostname where the remote port exists - as seen by your hosting provider. This is where you would point your command line MySQL client were you connecting from your hosting provider. Replace this with dbserver.yourhostingprovider.com if your hosting provider runs the MySQL server on a host other than where you SSH into.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>youruser@yourhostingprovider.com</td>\n\t\t\t<td>The user account and hostname that you usually connect to when you SSH into your hosting provider.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Now, all you have to do is fire up your MySQL GUI client and point it to localhost:3307 (because one end of SSH tunnel is running on localhost:3307, while the other end is running on locahost:3306 - please note that the second 'localhost' is not your own localhost, but the one seen by yourhostingprovider.com).</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "c32618f1-99d8-4587-8c5e-6a6fb282a1fb",
          "alt": "mysql logo",
          "title": "mysql logo",
          "url": "/sites/default/files/field/image/mysql-dolphin.png",
          "fid": 56
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire hosts Web & Mobile Tech Meetup",
      "nid": 9,
      "alias": "/article/spinspire-hosts-web-mobile-tech-meetup",
      "slug": "spinspire-hosts-web-mobile-tech-meetup",
      "body": "<p>SpinSpire will host the first Web &amp; Mobile Tech meetup in Jacksonville on April 30, 2012 from 6 to 7PM.</p>\n\n<p><strong>Location: 9551 Baymeadows Rd, Suite 18 Jacksonville, FL 32256</strong></p>\n\n<p>This is a meetup for a group of people who are interested in mobile technology (native apps, mobile-web, phone-gap, titanium, HTML5, CSS3, jQuery-Mobile, etc.) and high performance web technology (node.js, mongodb, nginx, lighttpd, squid etc.) It is open to all. The goal is to share knowledge and learn from each other. Also, to convince stakeholders (our clients and bosses) that investing in this will give huge benefits in the long as well as short term.</p>\n",
      "changed": "2016-06-10T13:55:56+00:00",
      "created": "2012-04-26T03:22:34+00:00",
      "summary": "<p>SpinSpire will host the first Web &amp; Mobile Tech meetup in Jacksonville on April 30, 2012 from 6 to 7PM.</p>\n\n<p><strong>Location: 9551 Baymeadows Rd, Suite 18 Jacksonville, FL 32256</strong></p>\n\n<p>This is a meetup for a group of people who are interested in mobile technology (native apps, mobile-web, phone-gap, titanium, HTML5, CSS3, jQuery-Mobile, etc.) and high performance web technology (node.js, mongodb, nginx, lighttpd, squid etc.) It is open to all. The goal is to share knowledge and learn from each other. Also, to convince stakeholders (our clients and bosses) that investing in this will give huge benefits in the long as well as short term.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "75c2f37f-068d-4427-a6d1-0529ef8073db",
          "alt": "SpinSpire logo",
          "title": "SpinSpire logo",
          "url": "/sites/default/files/field/image/j.JPG",
          "fid": 17
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire to host Drupal meet",
      "nid": 11,
      "alias": "/article/spinspire-host-drupal-meet",
      "slug": "spinspire-host-drupal-meet",
      "body": "<p>SpinSpire will host the second Drupal meet in Jacksonville on April 17, 2012 from 6 to 7PM.  </p>\n\n<p class=\"MsoPlainText\">Meeting Agenda:</p>\n\n<ul>\n\t<li>Welcomes to new members/introductions</li>\n\t<li>DrupalCon Wrap up from Jitesh</li>\n\t<li>Site overviews of Florida Blue and Jacksonville.com</li>\n</ul>\n\n<p class=\"MsoPlainText\">Some snacks/soft-drinks will be available.</p>\n",
      "changed": "2016-06-10T13:55:56+00:00",
      "created": "2012-04-17T17:25:38+00:00",
      "summary": "<p>SpinSpire will host the second Drupal meet in Jacksonville on April 17, 2012 from 6 to 7PM.  </p>\n\n<p class=\"MsoPlainText\">Meeting Agenda:</p>\n\n<ul>\n\t<li>Welcomes to new members/introductions</li>\n\t<li>DrupalCon Wrap up from Jitesh</li>\n\t<li>Site overviews of Florida Blue and Jacksonville.com</li>\n</ul>\n\n<p class=\"MsoPlainText\">Some snacks/soft-drinks will be available.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "43c64fdf-1e2b-47a5-88b0-98d7543ecbf9",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_0.jpg",
          "fid": 19
        },
        {
          "id": "2cb53ec1-f258-4e29-9075-3a6e4045a103",
          "alt": "SpinSpire logo",
          "title": "SpinSpire logo",
          "url": "/sites/default/files/field/image/j_0.JPG",
          "fid": 20
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Limited supply options lists in webforms",
      "nid": 32,
      "alias": "/article/limited-supply-options-lists-webforms",
      "slug": "limited-supply-options-lists-webforms",
      "body": "<p>In Drupal webforms, often we come across situations where we have <em>select</em> component (displayed as select list, radio buttons or checkboxes) in a webform, but we don't want multiple submissions to use the same options. For example, when people are reserving seats for themselves using your webform, you don't want two people to reserve the same seats. This means you want options in the select component to start disappearing from the webform display once they are used in a webform submission. <a href=\"/sites/spinspire.com/files/downloads/webform_limited_list.zip\">Here is a nice little Drupal 6.x module</a> that does just that. All you have to do is ...</p>\n\n<p><!--break--></p>\n\n<ol>\n\t<li>Download, install and enable <a href=\"https://www.drupal.org/project/1439044/git-instructions\">this module</a>.</li>\n\t<li>Create a webform with a <em>select</em> component (it could be displayed as select list box, dropdown, array of radio buttons or checkboxes).</li>\n\t<li>In the above component's edit form, check the \"limited supply\" checkbox (that is introduced by this module). This will enable additional handlers which remove all options that were used in webform submissions so far.</li>\n</ol>\n\n<p>That's it. Now when you try to submit the webform, only unused select options will show up. See the attached screenshots for a little demo. Please note that at this point this module works only with Drupal 6.x, not 7.x.</p>\n\n<h2>How does it work?</h2>\n\n<p>Basically, we do the following things ...</p>\n\n<ol>\n\t<li>Use hook_form_alter to add a checkbox to the webform component edit form.\n\t<pre>\nfunction webform_limited_list_form_alter(&amp;$form, $form_state, $form_id) {\n  // add a checkbox to the webform component edit form\n  if($form_id == 'webform_component_edit_form') {\n    // the next line is a HACK. I don't know why the $component is supplied like this.\n    $component = $form['#parameters'][3];\n    if($form['type']['#value'] == 'select') {\n      $form['extra']['limited_supply'] = array(\n        '#type' =&gt; 'checkbox',\n        '#title' =&gt; t('Limited Supply'),\n        '#default_value' =&gt; $component['extra']['limited_supply'],\n        '#description' =&gt; t('Check this option if an option/radio/checkbox should be removed from the list once it has been used in a submission'),</pre>\n\n\t<pre>\n\n </pre>\n\n\t<pre>\n); } } // other stuff here ... }</pre>\n\t</li>\n\t<li>Use hook_form_alter to alter every Drupal form derived from a <em>webform</em> node and look for <em>select</em> components and ...\n\t<pre>\nfunction webform_limited_list_form_alter(&amp;$form, $form_state, $form_id) {\n  // other stuff here ...\n\n  $node = $form['#node'];\n  if(!empty($node) &amp;&amp; $node-&gt;type == 'webform') {\n    foreach($node-&gt;webform['components'] as $component) {\n      if($component['extra']['limited_supply']) {\n\n        _webform_limited_list_remove_used_options($node-&gt;nid, $component['cid'], $component['form_key'], &amp;$form);\n      }\n    }\n  }\n}\n</pre>\n\t</li>\n\t<li>... remove those options from them that have already been used in a previous submission.\n\t<pre>\nfunction _webform_limited_list_remove_used_options($nid, $cid, $cid_name, &amp;$form) {\n  $resource = db_query(\"SELECT data FROM {webform_submitted_data} WHERE nid = %s AND cid = %s\", $nid, $cid);\n  while($row = db_fetch_array($resource)) {\n    $value = $row['data'];\n    // remove this value from the $form option array\n    unset($form['submitted'][$cid_name]['#options'][$value]);\n  }\n}\n</pre>\n\t</li>\n</ol>\n\n<p>I hope you find this module useful.</p>\n\n<h2>Future Enhancements</h2>\n\n<p>At this point, this module removes an option from a select list as soon as it is used once in a webform submission. But it would be nice to be able to specify how many times each option can be used in a submission. That is useful when each option is a commodity that is limited in supply, but not only one unit each.</p>\n",
      "changed": "2016-06-10T13:55:56+00:00",
      "created": "2011-03-12T03:11:07+00:00",
      "summary": "<p>In Drupal webforms, often we come across situations where we have <em>select</em> component (displayed as select list, radio buttons or checkboxes) in a webform, but we don't want multiple submissions to use the same options. For example, when people are reserving seats for themselves using your webform, you don't want two people to reserve the same seats. This means you want options in the select component to start disappearing from the webform display once they are used in a webform submission. <a href=\"/sites/spinspire.com/files/downloads/webform_limited_list.zip\">Here is a nice little Drupal 6.x module</a> that does just that. All you have to do is ...</p>\n\n<p><!--break--></p>\n\n<ol>\n\t<li>Download, install and enable <a href=\"https://www.drupal.org/project/1439044/git-instructions\">this module</a>.</li>\n\t<li>Create a webform with a <em>select</em> component (it could be displayed as select list box, dropdown, array of radio buttons or checkboxes).</li>\n\t<li>In the above component's edit form, check the \"limited supply\" checkbox (that is introduced by this module). This will enable additional handlers which remove all options that were used in webform submissions so far.</li>\n</ol>\n\n<p>That's it. Now when you try to submit the webform, only unused select options will show up. See the attached screenshots for a little demo. Please note that at this point this module works only with Drupal 6.x, not 7.x.</p>\n\n<h2>How does it work?</h2>\n\n<p>Basically, we do the following things ...</p>\n\n<ol>\n\t<li>Use hook_form_alter to add a checkbox to the webform component edit form.\n\t<pre>\nfunction webform_limited_list_form_alter(&amp;$form, $form_state, $form_id) {\n  // add a checkbox to the webform component edit form\n  if($form_id == 'webform_component_edit_form') {\n    // the next line is a HACK. I don't know why the $component is supplied like this.\n    $component = $form['#parameters'][3];\n    if($form['type']['#value'] == 'select') {\n      $form['extra']['limited_supply'] = array(\n        '#type' =&gt; 'checkbox',\n        '#title' =&gt; t('Limited Supply'),\n        '#default_value' =&gt; $component['extra']['limited_supply'],\n        '#description' =&gt; t('Check this option if an option/radio/checkbox should be removed from the list once it has been used in a submission'),</pre>\n\n\t<pre>\n\n </pre>\n\n\t<pre>\n); } } // other stuff here ... }</pre>\n\t</li>\n\t<li>Use hook_form_alter to alter every Drupal form derived from a <em>webform</em> node and look for <em>select</em> components and ...\n\t<pre>\nfunction webform_limited_list_form_alter(&amp;$form, $form_state, $form_id) {\n  // other stuff here ...\n\n  $node = $form['#node'];\n  if(!empty($node) &amp;&amp; $node-&gt;type == 'webform') {\n    foreach($node-&gt;webform['components'] as $component) {\n      if($component['extra']['limited_supply']) {\n\n        _webform_limited_list_remove_used_options($node-&gt;nid, $component['cid'], $component['form_key'], &amp;$form);\n      }\n    }\n  }\n}\n</pre>\n\t</li>\n\t<li>... remove those options from them that have already been used in a previous submission.\n\t<pre>\nfunction _webform_limited_list_remove_used_options($nid, $cid, $cid_name, &amp;$form) {\n  $resource = db_query(\"SELECT data FROM {webform_submitted_data} WHERE nid = %s AND cid = %s\", $nid, $cid);\n  while($row = db_fetch_array($resource)) {\n    $value = $row['data'];\n    // remove this value from the $form option array\n    unset($form['submitted'][$cid_name]['#options'][$value]);\n  }\n}\n</pre>\n\t</li>\n</ol>\n\n<p>I hope you find this module useful.</p>\n\n<h2>Future Enhancements</h2>\n\n<p>At this point, this module removes an option from a select list as soon as it is used once in a webform submission. But it would be nice to be able to specify how many times each option can be used in a submission. That is useful when each option is a commodity that is limited in supply, but not only one unit each.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "8a265f25-8870-4fc4-916a-5e2b430364ad",
          "alt": "Enabling a \"limited supply\" option list in a Drupal webform component edit form",
          "title": "Enabling a \"limited supply\" option list in a Drupal webform component edit form",
          "url": "/sites/default/files/field/image/screenshot-webform-limited-list-00.png",
          "fid": 42
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire Drupal Training is in full swing",
      "nid": 12,
      "alias": "/article/spinspire-drupal-training-full-swing",
      "slug": "spinspire-drupal-training-full-swing",
      "body": "<p>SpinSpire's current batch of <a href=\"http://training.spinspire.com\">Drupal training</a> is at halfway point. We have completed 2 weeks of training and 2 weeks to go. The training teaches Drupal (content management, configuration &amp; coding), jQuery, JavaScript, Linux, Git, HTML/CSS and much more.</p>\n\n<p>The course content and discussion forum are publicly available. Check it out at http://training.spinspire.com/</p>\n",
      "changed": "2016-06-10T13:55:56+00:00",
      "created": "2012-04-06T13:10:44+00:00",
      "summary": "<p>SpinSpire's current batch of <a href=\"http://training.spinspire.com\">Drupal training</a> is at halfway point. We have completed 2 weeks of training and 2 weeks to go. The training teaches Drupal (content management, configuration &amp; coding), jQuery, JavaScript, Linux, Git, HTML/CSS and much more.</p>\n\n<p>The course content and discussion forum are publicly available. Check it out at http://training.spinspire.com/</p>\n",
      "field_tags": [
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "6714d957-bb22-447a-8395-02c16f2f5daa",
          "tid": 5,
          "name": "training",
          "alias": "/term/training"
        }
      ],
      "field_image": [
        {
          "id": "edcf483d-8aaf-407e-b17d-3856b87dd1d3",
          "alt": "SpinSpire logo",
          "title": "SpinSpire logo",
          "url": "/sites/default/files/field/image/j_1.JPG",
          "fid": 21
        },
        {
          "id": "7f014af7-3ef3-46e0-8f92-5eea710ea140",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_1.jpg",
          "fid": 22
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Presenting at DrupalCamp Atlanta",
      "nid": 50,
      "alias": "/article/presenting-drupalcamp-atlanta",
      "slug": "presenting-drupalcamp-atlanta",
      "body": "<p>I hope you're going to attend DrupalCamp Atlanta . It is less than two weeks from now - Oct 27th.</p>\n\n<p>There is a great lineup of presentation sessions. You can browse the list here . I also happen to be presenting -  Build a Complete Business App with Webform Module . Here's the abstract. I'll be posting the presentation slideshow and all source code here, after the event.</p>\n\n<p>See you at  DrupalCamp Atlanta !</p>\n\n<h1 id=\"page-title\">Build a Complete Business App with Webform Module</h1>\n\n<div>\n<div>\n<div>\n<p><a href=\"http://drupal.org/project/webform\">Webform </a>  is an amazing and very versatile Drupal module, and you can do a lot by just configuring it. But did you know that with just a little bit of code, you can do a lot more? Such as:</p>\n\n<ul>\n\t<li>Generating template-based PDFs from webform submission data</li>\n\t<li>Attaching the generated PDF to the outgoing webform email</li>\n\t<li>Adding custom attributes to webform components for all kinds of amazing functionality, such as:\n\t<ul>\n\t\t<li>Add configurable JavaScript behavior to webform components</li>\n\t\t<li>Add an additional CC/BCC address to an email address component (this address gets a copy of emails)</li>\n\t\t<li>Make a select option \"single use\" (e.g. a seat that goes out of inventory once selected in a webform submission)</li>\n\t\t<li>Attach a \"price\" to a webform option</li>\n\t\t<li>and much more ...</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>This session will walk you through the process of building an app by configuring webform module forms that model your business process (for example, taking orders on the web), write a small module to enhance your webform components (such as attaching price), and then generate template-based PDFs from the submitted webform data and attach them to the email that goes out.</p>\n</div>\n</div>\n</div>\n",
      "changed": "2016-06-10T13:55:56+00:00",
      "created": "2012-10-15T14:51:09+00:00",
      "summary": "<p>I hope you're going to attend DrupalCamp Atlanta . It is less than two weeks from now - Oct 27th.</p>\n\n<p>There is a great lineup of presentation sessions. You can browse the list here . I also happen to be presenting -  Build a Complete Business App with Webform Module . Here's the abstract. I'll be posting the presentation slideshow and all source code here, after the event.</p>\n\n<p>See you at  DrupalCamp Atlanta !</p>\n\n<h1 id=\"page-title\">Build a Complete Business App with Webform Module</h1>\n\n<div>\n<div>\n<div>\n<p><a href=\"http://drupal.org/project/webform\">Webform </a>  is an amazing and very versatile Drupal module, and you can do a lot by just configuring it. But did you know that with just a little bit of code, you can do a lot more? Such as:</p>\n\n<ul>\n\t<li>Generating template-based PDFs from webform submission data</li>\n\t<li>Attaching the generated PDF to the outgoing webform email</li>\n\t<li>Adding custom attributes to webform components for all kinds of amazing functionality, such as:\n\t<ul>\n\t\t<li>Add configurable JavaScript behavior to webform components</li>\n\t\t<li>Add an additional CC/BCC address to an email address component (this address gets a copy of emails)</li>\n\t\t<li>Make a select option \"single use\" (e.g. a seat that goes out of inventory once selected in a webform submission)</li>\n\t\t<li>Attach a \"price\" to a webform option</li>\n\t\t<li>and much more ...</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>This session will walk you through the process of building an app by configuring webform module forms that model your business process (for example, taking orders on the web), write a small module to enhance your webform components (such as attaching price), and then generate template-based PDFs from the submitted webform data and attach them to the email that goes out.</p>\n</div>\n</div>\n</div>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "3681ee3c-9b85-4e89-8785-6f8bf7cf1105",
          "alt": "Drupal Logo",
          "title": "Drupal Logo",
          "url": "/sites/default/files/field/image/images_17.jpg",
          "fid": 62
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire releases Webform Single Use Options module",
      "nid": 19,
      "alias": "/article/spinspire-releases-webform-single-use-options-module",
      "slug": "spinspire-releases-webform-single-use-options-module",
      "body": "<p>&lt;p&gt;SpinSpire is pleased to announce the beta release of our Webform Single Use Options Drupal module (see &lt;a href=&quot;<a href=\"http://drupal.org/sandbox/jitesh_doshi/1439044&quot;&gt;here\">http://drupal.org/sandbox/jitesh_doshi/1439044&quot;&gt;here</a> to view&lt;/a&gt;). Webform module is a very useful and versatile module that we have used in many situations. But sometimes you need a webform select list to start removing options once they have been used in a submission. Typical examples are when a ticketing system issues tickets for a given seat number, that seat number should not be available as a choice anymore. This module - Webform Single Use Options - does just that. It turns regular webform options into &quot;single use&quot; options. All you have to do is check a checkbox in the webform component&#039;s configuration form.&lt;/p&gt;&lt;p&gt;This is free software under GNU GPL, and you are welcome to download the code and use it as per the instructions on this page - &lt;a href=&quot;<a href=\"http://drupal.org/sandbox/jitesh_doshi/1439044&quot;&gt;http://drupal.org/sandbox/jitesh_doshi/1439044&lt;/a&amp;gt\">http://drupal.org/sandbox/jitesh_doshi/1439044&quot;&gt;http://drupal.org/sandb…</a>;. And &lt;a href=&quot;<a href=\"http://spinspire.com/contact&quot;&gt;drop\">http://spinspire.com/contact&quot;&gt;drop</a> us a line&lt;/a&gt; if you have any questions.&lt;/p&gt;&lt;p&gt;&lt;!--break--&gt;&lt;/p&gt;</p>\n",
      "changed": "2016-06-10T13:55:56+00:00",
      "created": "2012-02-29T18:14:36+00:00",
      "summary": "<p>&lt;p&gt;SpinSpire is pleased to announce the beta release of our Webform Single Use Options Drupal module (see &lt;a href=&quot;<a href=\"http://drupal.org/sandbox/jitesh_doshi/1439044&quot;&gt;here\">http://drupal.org/sandbox/jitesh_doshi/1439044&quot;&gt;here</a> to view&lt;/a&gt;). Webform module is a very useful and versatile module that we have used in many situations. But sometimes you need a webform select list to start removing options once they have been used in a submission. Typical examples are when a ticketing system issues tickets for a given seat number, that seat number should not be available as a choice anymore. This module - Webform Single Use Options - does just that. It turns regular webform options into &quot;single use&quot; options. All you have to do is check a checkbox in the webform component&#039;s configuration form.&lt;/p&gt;&lt;p&gt;This is free software under GNU GPL, and you are welcome to download the code and use it as per the instructions on this page - &lt;a href=&quot;<a href=\"http://drupal.org/sandbox/jitesh_doshi/1439044&quot;&gt;http://drupal.org/sandbox/jitesh_doshi/1439044&lt;/a&amp;gt\">http://drupal.org/sandbox/jitesh_doshi/1439044&quot;&gt;http://drupal.org/sandb…</a>;. And &lt;a href=&quot;<a href=\"http://spinspire.com/contact&quot;&gt;drop\">http://spinspire.com/contact&quot;&gt;drop</a> us a line&lt;/a&gt; if you have any questions.&lt;/p&gt;&lt;p&gt;&lt;!--break--&gt;&lt;/p&gt;</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "26233e1c-5180-4dc4-afee-39b93a47fc0c",
          "alt": "",
          "title": "",
          "url": "/sites/default/files/field/image/5928005974_7c58632c50_z.jpg",
          "fid": 29
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Florida Drupal Camp 2013",
      "nid": 64,
      "alias": "/article/florida-drupal-camp-2013",
      "slug": "florida-drupal-camp-2013",
      "body": "<p>SpinSpire participated in the <a href=\"http://fldrupalcamp.org/\" target=\"_blank\" title=\"Florida Drupal Camp 2013\">Florida Drupal Camp 2013</a> on April 20, 2013 with presentations on ...</p>\n\n<ol>\n\t<li><a href=\"http://fldrupalcamp.org/session/build-complete-business-app-webform-module\" target=\"_blank\">\"Build a Complete Business App with Webform Module\"</a> by <a href=\"http://www.linkedin.com/in/jiteshdoshi\">Jitesh Doshi</a></li>\n\t<li><a href=\"http://fldrupalcamp.org/session/data-visualization\" target=\"_blank\">\"Data Visualization\"</a> by <a href=\"http://www.linkedin.com/in/pramodjain\">Pramod Jain</a></li>\n</ol>\n\n<p> </p>\n",
      "changed": "2016-06-10T13:31:59+00:00",
      "created": "2013-04-24T11:33:09+00:00",
      "summary": "<p>SpinSpire participated in the <a href=\"http://fldrupalcamp.org/\" target=\"_blank\" title=\"Florida Drupal Camp 2013\">Florida Drupal Camp 2013</a> on April 20, 2013 with presentations on ...</p>\n\n<ol>\n\t<li><a href=\"http://fldrupalcamp.org/session/build-complete-business-app-webform-module\" target=\"_blank\">\"Build a Complete Business App with Webform Module\"</a> by <a href=\"http://www.linkedin.com/in/jiteshdoshi\">Jitesh Doshi</a></li>\n\t<li><a href=\"http://fldrupalcamp.org/session/data-visualization\" target=\"_blank\">\"Data Visualization\"</a> by <a href=\"http://www.linkedin.com/in/pramodjain\">Pramod Jain</a></li>\n</ol>\n\n<p> </p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "1e36848d-fb3d-4e9f-8b77-8f0e07e3efde",
          "alt": "drupal logo",
          "title": "drupal logo",
          "url": "/sites/default/files/field/image/images_23.jpg",
          "fid": 79
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "tikkits.com bags ticketing and seat selection for 3 Shankar-Ehsaan-Loy shows",
      "nid": 65,
      "alias": "/article/tikkitscom-bags-ticketing-and-seat-selection-3-shankar-ehsaan-loy-shows",
      "slug": "tikkitscom-bags-ticketing-and-seat-selection-3-shankar-ehsaan-loy-shows",
      "body": "<p><a href=\"http://aapi.tikkits.com\" target=\"_blank\">Tikkits.com</a> will be the exclusive online point-n-click seat selection and ticketing service for Shankar-Ehsaan-Loy shows in Los Angeles (June 2, 2013), Atlanta (June 23) and <span>Tampa (June 29)</span><span>.</span> <a href=\"http://aapi.tikkits.com\" target=\"_blank\">Tikkits.com</a> thanks the American Association of Physicians of Indian Origin (AAPI) and Paracha Entertainment for their continued trust in the <a href=\"http://aapi.tikkits.com\" target=\"_blank\">Tikkits.com</a> team.</p>\n",
      "changed": "2016-06-10T13:31:48+00:00",
      "created": "2013-05-02T14:22:09+00:00",
      "summary": "<p><a href=\"http://aapi.tikkits.com\" target=\"_blank\">Tikkits.com</a> will be the exclusive online point-n-click seat selection and ticketing service for Shankar-Ehsaan-Loy shows in Los Angeles (June 2, 2013), Atlanta (June 23) and <span>Tampa (June 29)</span><span>.</span> <a href=\"http://aapi.tikkits.com\" target=\"_blank\">Tikkits.com</a> thanks the American Association of Physicians of Indian Origin (AAPI) and Paracha Entertainment for their continued trust in the <a href=\"http://aapi.tikkits.com\" target=\"_blank\">Tikkits.com</a> team.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "4b1a8662-37df-4db7-8dd0-6af0049f9046",
          "alt": "SEL concert",
          "title": "SEL concert",
          "url": "/sites/default/files/field/image/SEL%20Designs-sm.jpg",
          "fid": 80
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire is proud to be JAXICS Diamond Sponsor",
      "nid": 87,
      "alias": "/article/spinspire-proud-be-jaxics-diamond-sponsor",
      "slug": "spinspire-proud-be-jaxics-diamond-sponsor",
      "body": "<p>SpinSpire is delighted to support <a href=\"http://jaxics.org/\" target=\"_blank\">Indian Culturual Society of Jacksonville (JAXICS)</a> with a cash donation of $2,500 and become their first Diamond level annual sponsor for year 2014. Indian Cultural Society of Jacksonville is a 501(c)(3) certified organization dedicated to serving the Jacksonville South Asian community and promoting and sharing Indian culture throughout the region.</p>\n\n<p>Jitesh Doshi, the president of SpinSpire, has been a longstanding supporter and organizer of JAXICS and has served as president (2011), vice-president (2010, 2014), committee member (2008) and active volunteer (2007, 2009, 2013). He has also served several times as the Director of Sponsorship for JAXICS and thus spearheaded several successful fundraising efforts for the organization. In the year 2011, when he was president, he increased JAXICS reserves by $35,500 - highest ever raised in a single year.</p>\n\n<p>With thi sponsorship, SpinSpire has taken another step in the direction of supporting their local community not just with technology and organizing, but also with financial support. Addtionally, SpinSpire will continue to impart free technical education to local community and provide free technology services to non-profit organizations.</p>\n",
      "changed": "2016-06-10T13:31:00+00:00",
      "created": "2014-07-31T02:02:29+00:00",
      "summary": "<p>SpinSpire is delighted to support <a href=\"http://jaxics.org/\" target=\"_blank\">Indian Culturual Society of Jacksonville (JAXICS)</a> with a cash donation of $2,500 and become their first Diamond level annual sponsor for year 2014. Indian Cultural Society of Jacksonville is a 501(c)(3) certified organization dedicated to serving the Jacksonville South Asian community and promoting and sharing Indian culture throughout the region.</p>\n\n<p>Jitesh Doshi, the president of SpinSpire, has been a longstanding supporter and organizer of JAXICS and has served as president (2011), vice-president (2010, 2014), committee member (2008) and active volunteer (2007, 2009, 2013). He has also served several times as the Director of Sponsorship for JAXICS and thus spearheaded several successful fundraising efforts for the organization. In the year 2011, when he was president, he increased JAXICS reserves by $35,500 - highest ever raised in a single year.</p>\n\n<p>With thi sponsorship, SpinSpire has taken another step in the direction of supporting their local community not just with technology and organizing, but also with financial support. Addtionally, SpinSpire will continue to impart free technical education to local community and provide free technology services to non-profit organizations.</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "e54c659c-8566-4d0d-92e8-ade8e3c4ef3f",
          "alt": "JAXICS logo",
          "title": "JAXICS logo",
          "url": "/sites/default/files/field/image/ics.jpg",
          "fid": 107
        },
        {
          "id": "45801380-8d59-4537-8ef9-6544b7239efa",
          "alt": "SpinSpire Diamond sponsor logo",
          "title": "SpinSpire Diamond sponsor logo",
          "url": "/sites/default/files/field/image/spinspire-logo.png",
          "fid": 108
        }
      ],
      "uid": {
        "id": "860e2c0e-639d-4f13-8762-d556757814ae",
        "uid": 6,
        "display_name": "Priya Ganesan",
        "name": "Priya Ganesan",
        "bio": "<ul>\n\t<li>Advanced knowledge of Drupal 6 &amp; 7 configuration and module development</li>\n\t<li>Well-versed in databases, reporting</li>\n\t<li>Advanced knowledge of Ubercart, CiviCRM, Views, Migrate and other Drupal subsystems</li>\n</ul>",
        "alias": "/user/priya-ganesan"
      }
    },
    {
      "title": "SpinSpire.com redesign",
      "nid": 101,
      "alias": "/article/spinspirecom-redesign",
      "slug": "spinspirecom-redesign",
      "body": "<p>Welcome to the newly redesigned SpinSpire.com. It was on Drupal and it is still on Drupal, only better. We here at SpinSpire believe in eating our own dogfood. So we re-built our own site the way we would (re)build a client's site.</p>\n\n<ol>\n\t<li>The site is fully responsive. Made with mobile in mind. Try viewing it on your mobile phone. Here's the QR code in case you're feeling too lazy to type the URL into your phone ;-)<br />\n\t<img alt=\"QR code to https://spinspire.com/\" src=\"http://zxing.org/w/chart?cht=qr&amp;chs=120x120&amp;chld=L&amp;choe=UTF-8&amp;chl=https%3A%2F%2Fspinspire.com%2F\" /></li>\n\t<li>All previous articles, users, tags and images were migrated using the excellent <a href=\"http://drupal.org/project/migrate\">migrate module</a>. Our migration code can update the new site from old one any number of times.</li>\n\t<li>We used the <a href=\"http://drupal.org/project/bootstrap\">bootstrap theme</a> as our starting point, sub-themed it, and then customized it heavily.</li>\n\t<li>All configuration is packaged using the <a href=\"http://drupal.org/project/features\">features module</a>, so that it can be reproduced anywhere else and version controlled using Git.</li>\n\t<li>All modules, themes and libraries etc. are downloaded using <a href=\"http://drush.ws/docs/make.txt\">drush make</a> files.</li>\n\t<li>Like all our other sites, we have a script (initialize.sh) that rebuilds the site from scratch with a single command in any new environment. Very handy for creating stage, dev and local copies.</li>\n</ol>\n\n<pre class=\"true; codetag\">\n#!/bin/bash\n\nif [ ! -d modules/contrib ]; then\n  chmod +w .\n  drush make --no-core --contrib-destination=. drush.make .\nfi\n\n#The following works only after you have correct done site-install once\ndrush site-install\n\ndrush pm-disable -y update,overlay,dashboard,comment,rdf,toolbar,shortcut,search\ndrush pm-enable  -y admin_menu_toolbar,module_filter\n\n#Enable packaged features\ndrush pm-enable -y spinspire_config\ndrush pm-enable -y spinspire_content\n\n#compile from SCSS to CSS\n(cd themes/spinstrap &amp;&amp; compass compile)\n\n#enable the default theme\ndrush -y en spinstrap\n\n#disable other themes\ndrush -y dis bartik\n\n#revert config because some features dont stick\ndrush features-revert -y spinspire_config\n\n# All lines below are dev use only\n\n#enable useful developer modules (in non-PROD only)\n#drush en -y features_diff\n#drush en -y devel\n#drush en -y devel_generate\n\nread -s -p \"Enter admin password:\" password\ndrush user-password admin --password=\"$password\"\necho \"admin password changed\"\n\necho \"Please run content migration with ...\"\necho \"drush -y en sp_migrate &amp;&amp; drush migrate-status &amp;&amp; drush migrate-import UserPicture,User,ArticleTag,Article\"</pre>\n\n<p>A script like this helps us keep our site and our client's sites clean, optimized, easy to rebuild, and thus easy to debug and troubleshoot.</p>\n\n<p>I'm sure there are many rough edges to be smoothed, but overall, I'm quite happy with the result! I hope you like it too.</p>\n",
      "changed": "2016-06-10T13:29:57+00:00",
      "created": "2014-10-03T20:23:55+00:00",
      "summary": "<p>Welcome to the newly redesigned SpinSpire.com. It was on Drupal and it is still on Drupal, only better. We here at SpinSpire believe in eating our own dogfood. So we re-built our own site the way we would (re)build a client's site.</p>\n\n<ol>\n\t<li>The site is fully responsive. Made with mobile in mind. Try viewing it on your mobile phone. Here's the QR code in case you're feeling too lazy to type the URL into your phone ;-)<br />\n\t<img alt=\"QR code to https://spinspire.com/\" src=\"http://zxing.org/w/chart?cht=qr&amp;chs=120x120&amp;chld=L&amp;choe=UTF-8&amp;chl=https%3A%2F%2Fspinspire.com%2F\" /></li>\n\t<li>All previous articles, users, tags and images were migrated using the excellent <a href=\"http://drupal.org/project/migrate\">migrate module</a>. Our migration code can update the new site from old one any number of times.</li>\n\t<li>We used the <a href=\"http://drupal.org/project/bootstrap\">bootstrap theme</a> as our starting point, sub-themed it, and then customized it heavily.</li>\n\t<li>All configuration is packaged using the <a href=\"http://drupal.org/project/features\">features module</a>, so that it can be reproduced anywhere else and version controlled using Git.</li>\n\t<li>All modules, themes and libraries etc. are downloaded using <a href=\"http://drush.ws/docs/make.txt\">drush make</a> files.</li>\n\t<li>Like all our other sites, we have a script (initialize.sh) that rebuilds the site from scratch with a single command in any new environment. Very handy for creating stage, dev and local copies.</li>\n</ol>\n\n<pre class=\"true; codetag\">\n#!/bin/bash\n\nif [ ! -d modules/contrib ]; then\n  chmod +w .\n  drush make --no-core --contrib-destination=. drush.make .\nfi\n\n#The following works only after you have correct done site-install once\ndrush site-install\n\ndrush pm-disable -y update,overlay,dashboard,comment,rdf,toolbar,shortcut,search\ndrush pm-enable  -y admin_menu_toolbar,module_filter\n\n#Enable packaged features\ndrush pm-enable -y spinspire_config\ndrush pm-enable -y spinspire_content\n\n#compile from SCSS to CSS\n(cd themes/spinstrap &amp;&amp; compass compile)\n\n#enable the default theme\ndrush -y en spinstrap\n\n#disable other themes\ndrush -y dis bartik\n\n#revert config because some features dont stick\ndrush features-revert -y spinspire_config\n\n# All lines below are dev use only\n\n#enable useful developer modules (in non-PROD only)\n#drush en -y features_diff\n#drush en -y devel\n#drush en -y devel_generate\n\nread -s -p \"Enter admin password:\" password\ndrush user-password admin --password=\"$password\"\necho \"admin password changed\"\n\necho \"Please run content migration with ...\"\necho \"drush -y en sp_migrate &amp;&amp; drush migrate-status &amp;&amp; drush migrate-import UserPicture,User,ArticleTag,Article\"</pre>\n\n<p>A script like this helps us keep our site and our client's sites clean, optimized, easy to rebuild, and thus easy to debug and troubleshoot.</p>\n\n<p>I'm sure there are many rough edges to be smoothed, but overall, I'm quite happy with the result! I hope you like it too.</p>\n",
      "field_tags": [
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "50a73c3c-57b2-48b8-a5db-2077031d31df",
          "tid": 78,
          "name": "development",
          "alias": "/term/development"
        }
      ],
      "field_image": [
        {
          "id": "51c4778b-c5d1-4d00-a548-b57f2ad9be18",
          "alt": "SpinSpire Logo",
          "title": "SpinSpire Logo",
          "url": "/sites/default/files/field/image/SpinSpire-logo.png",
          "fid": 144
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "hiding user \"history\" and \"member for\" information from prying eyes",
      "nid": 102,
      "alias": "/article/hiding-user-history-and-member-information-prying-eyes",
      "slug": "hiding-user-history-and-member-information-prying-eyes",
      "body": "<p>In Drupal, sometimes, you want to share user profiles with the world, but then they can also see the \"History\" and the \"Member for\" information about your users. If that information is not what you want to show the world, then all you have to do is implement <em>hook_preprocess_user_profile</em> and apply appropriate permissions to it.</p>\n\n<pre class=\"true; codetag\" title=\"hook_preprocess_user_profile implementation\">\nfunction mymoduleorthemename_preprocess_user_profile(&amp;$vars) {\n  $vars['user_profile']['summary']['#access'] = user_access('administer users');\n}\n</pre>\n\n<p>In the above, function name, just replace \"mymoduleorthemename\" with the machine-name of the module or theme you are writing the above code in. That's it!</p>\n\n<p>Also, you may want a different permission from 'administer users' above. You choose what is appropriate for you.</p>\n",
      "changed": "2016-06-10T13:29:23+00:00",
      "created": "2014-10-08T02:16:09+00:00",
      "summary": "<p>In Drupal, sometimes, you want to share user profiles with the world, but then they can also see the \"History\" and the \"Member for\" information about your users. If that information is not what you want to show the world, then all you have to do is implement <em>hook_preprocess_user_profile</em> and apply appropriate permissions to it.</p>\n\n<pre class=\"true; codetag\" title=\"hook_preprocess_user_profile implementation\">\nfunction mymoduleorthemename_preprocess_user_profile(&amp;$vars) {\n  $vars['user_profile']['summary']['#access'] = user_access('administer users');\n}\n</pre>\n\n<p>In the above, function name, just replace \"mymoduleorthemename\" with the machine-name of the module or theme you are writing the above code in. That's it!</p>\n\n<p>Also, you may want a different permission from 'administer users' above. You choose what is appropriate for you.</p>\n",
      "field_tags": [
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        }
      ],
      "field_image": [
        {
          "id": "172485b6-0275-4516-9db3-487a3a792184",
          "alt": "Drupal user history showing \"member for\"",
          "title": "Drupal user history showing \"member for\"",
          "url": "/sites/default/files/field/image/drupal-user-history-member-for.png",
          "fid": 145
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Modern Web Applications",
      "nid": 107,
      "alias": "/article/modern-web-applications",
      "slug": "modern-web-applications",
      "body": "<p dir=\"ltr\"><span>The way we (should) architect web applications today (circa 2014) is very different from how we architected them only a couple of years back. Different people give it different names, but they mean the same thing (I think):</span></p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">SPA (Single Page App) - I don't like this name because it overemphasizes a trivial detail (a single index.html) that may not even be true in many cases.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Rich Web App</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Modern Web App</p>\n\t</li>\n</ul>\n\n<p><span>Rather than spending time on bad-mouthing the past (that's the nature of progress - past teaches us the experiences for a better future), or even trying to contrast the present from the past, I'll dive straight into some of the characteristics of modern web applications.</span></p>\n\n<p dir=\"ltr\"><img alt=\"Figure: Modern Web Applications\" src=\"https://spinspire.com/sites/spinspire.com/files/field/image/Modern%20Web%20Applications.png\" /></p>\n\n<p dir=\"ltr\">Figure: Modern Web Application Architecture</p>\n\n<ol>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">All dynamic templating (injecting dynamic data into static boilerplate HTML) is done the client instead of the server.</p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">JavaScript MVC frameworks on the client side, such as Angular, KnockOut, Ember</p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">UI is completely static, therefore highly cacheable.</p>\n\t\t</li>\n\t</ol>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">The only dynamic bytes -- bytes that are generated only at the time of the HTTP request -- are data, usually out of a database, formatted in JSON.</p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">JSON over HTTP for client-server communication. JSON is not an absolute requirement, but it is so convenient because it is the native language of the front-end (JavaScript). Any other data format (such as XML) would require a bit of more effort. Plus JSON involves much less ceremony compared to XML.</p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">Every server-side language stack has very good implementation options here -  Java (JAX-RS/Spring-MVC), JavaScript (node.js), C#/.Net, Golang, Python, PHP, etc.</p>\n\t\t</li>\n\t</ol>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">JavaScript plays a large role on the browser in not just UI interaction, but also server communication (AJAX).</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Third-party services are used for all non-core functionality, such as analytics, ad-serving, mapping, payment processing, transactional-emails etc.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Token based authentication for security</p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">OAuth</p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">JWT - JSON web token</p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">API keys for server-to-server</p>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n<p><span>And then some additional optional elements:</span></p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Deployment in the cloud. Linux is preferable, but Windows would work too.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Relational or Document-based (NoSQL) databases (MongoDB, Cassandra etc.)</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">File uploads to the cloud (like Amazon S3 or Google Cloud Storage)</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Static file serving from CDN (content delivery network)</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Real-time, bi-directional communication with websockets.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Team collaboration in cloud with GitHub, BitBucket, Trello, <a href=\"http://tpondemand.com/\">TargetProcess</a>.</p>\n\t</li>\n</ul>\n\n<p dir=\"ltr\">Benefits:</p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Faster apps: The user gets the responsiveness of a desktop app in the browser. All static stuff is cached. Dynamic data is fetched from the server, but that also can be cached to some extent, and the requests are small, which can further be multiplexed over a single HTTP connection.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Faster development on server: Pick a server-side language of your choice (I'm picking Java). Exposing Java objects as JSON over REST services requires zero lines of code in JAX-RS. Also, your server-side code is simpler, because it has no presentation concerns at all. It just finds the data it is requested and returns it. JAX-RS binds incoming request parameters to function arguments and function return values to REST JSON/HTTP responses.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Faster development on client: Consuming those REST services in the browser requires very few lines of code in AngularJS. Embedding that fetched data into HTML via two-way binding is also as simple as using ng-bind or {{}} (double-curly braces) in your HTML.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Automation &amp; Integration for free: The same REST API that the browser uses can be used for integration and automation. Other systems can call your REST API just like the browser can. And scripts can use \"curl\" to call your API to upload / download / manipulate data.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Mobile on the cheap: Either use the same browser app directly on the mobile, or create a native mobile app. Either way, you call same REST APIs from mobile-web/mobile-native. The only thing you re-implement is the client-side.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Simpler management: Cloud simplifies runtime management as well as app development. Distributed teams are more efficient. Provision a new server in minutes, discard when development complete and move to prod. Add people to the project in the cloud. Even resource scheduling, billing/invoicing and payment etc. gets done in the cloud.</p>\n\t</li>\n</ul>\n",
      "changed": "2016-06-10T13:28:44+00:00",
      "created": "2014-12-27T17:33:20+00:00",
      "summary": "<p dir=\"ltr\"><span>The way we (should) architect web applications today (circa 2014) is very different from how we architected them only a couple of years back. Different people give it different names, but they mean the same thing (I think):</span></p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">SPA (Single Page App) - I don't like this name because it overemphasizes a trivial detail (a single index.html) that may not even be true in many cases.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Rich Web App</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Modern Web App</p>\n\t</li>\n</ul>\n\n<p><span>Rather than spending time on bad-mouthing the past (that's the nature of progress - past teaches us the experiences for a better future), or even trying to contrast the present from the past, I'll dive straight into some of the characteristics of modern web applications.</span></p>\n\n<p dir=\"ltr\"><img alt=\"Figure: Modern Web Applications\" src=\"https://spinspire.com/sites/spinspire.com/files/field/image/Modern%20Web%20Applications.png\" /></p>\n\n<p dir=\"ltr\">Figure: Modern Web Application Architecture</p>\n\n<ol>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">All dynamic templating (injecting dynamic data into static boilerplate HTML) is done the client instead of the server.</p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">JavaScript MVC frameworks on the client side, such as Angular, KnockOut, Ember</p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">UI is completely static, therefore highly cacheable.</p>\n\t\t</li>\n\t</ol>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">The only dynamic bytes -- bytes that are generated only at the time of the HTTP request -- are data, usually out of a database, formatted in JSON.</p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">JSON over HTTP for client-server communication. JSON is not an absolute requirement, but it is so convenient because it is the native language of the front-end (JavaScript). Any other data format (such as XML) would require a bit of more effort. Plus JSON involves much less ceremony compared to XML.</p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">Every server-side language stack has very good implementation options here -  Java (JAX-RS/Spring-MVC), JavaScript (node.js), C#/.Net, Golang, Python, PHP, etc.</p>\n\t\t</li>\n\t</ol>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">JavaScript plays a large role on the browser in not just UI interaction, but also server communication (AJAX).</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Third-party services are used for all non-core functionality, such as analytics, ad-serving, mapping, payment processing, transactional-emails etc.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Token based authentication for security</p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">OAuth</p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">JWT - JSON web token</p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\">API keys for server-to-server</p>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n<p><span>And then some additional optional elements:</span></p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Deployment in the cloud. Linux is preferable, but Windows would work too.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Relational or Document-based (NoSQL) databases (MongoDB, Cassandra etc.)</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">File uploads to the cloud (like Amazon S3 or Google Cloud Storage)</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Static file serving from CDN (content delivery network)</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Real-time, bi-directional communication with websockets.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Team collaboration in cloud with GitHub, BitBucket, Trello, <a href=\"http://tpondemand.com/\">TargetProcess</a>.</p>\n\t</li>\n</ul>\n\n<p dir=\"ltr\">Benefits:</p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Faster apps: The user gets the responsiveness of a desktop app in the browser. All static stuff is cached. Dynamic data is fetched from the server, but that also can be cached to some extent, and the requests are small, which can further be multiplexed over a single HTTP connection.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Faster development on server: Pick a server-side language of your choice (I'm picking Java). Exposing Java objects as JSON over REST services requires zero lines of code in JAX-RS. Also, your server-side code is simpler, because it has no presentation concerns at all. It just finds the data it is requested and returns it. JAX-RS binds incoming request parameters to function arguments and function return values to REST JSON/HTTP responses.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Faster development on client: Consuming those REST services in the browser requires very few lines of code in AngularJS. Embedding that fetched data into HTML via two-way binding is also as simple as using ng-bind or {{}} (double-curly braces) in your HTML.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Automation &amp; Integration for free: The same REST API that the browser uses can be used for integration and automation. Other systems can call your REST API just like the browser can. And scripts can use \"curl\" to call your API to upload / download / manipulate data.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Mobile on the cheap: Either use the same browser app directly on the mobile, or create a native mobile app. Either way, you call same REST APIs from mobile-web/mobile-native. The only thing you re-implement is the client-side.</p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\">Simpler management: Cloud simplifies runtime management as well as app development. Distributed teams are more efficient. Provision a new server in minutes, discard when development complete and move to prod. Add people to the project in the cloud. Even resource scheduling, billing/invoicing and payment etc. gets done in the cloud.</p>\n\t</li>\n</ul>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "b8559d2c-bb7a-4ea8-8d9f-ff024c725a88",
          "alt": "Modern Web Applications",
          "title": "Modern Web Applications",
          "url": "/sites/default/files/field/image/Modern%20Web%20Applications.png",
          "fid": 173
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Using Colorbox to show your node images in Drupal 7",
      "nid": 8,
      "alias": "/article/using-colorbox-show-your-node-images-drupal-7",
      "slug": "using-colorbox-show-your-node-images-drupal-7",
      "body": "<p>Drupal 6 is very good. But Drupal 7 is even better. Much cleaner user interface (UI), and much cleaner application programming interface (API) as well.</p>\n\n<p>Today, I'm going to talk about Colobox integration in Drupal 7. With Colorbox in D7, you can show your attached images in a very user-friendly (and nice looking manner).</p>\n\n<p>Let's say you want to enhance the \"Article\" content type with Colorbox images (\"Article\" content type in D7 replaces \"Story\" content type from D6).</p>\n\n<ol>\n\t<li>Install D7 version of Colorbox on your D7 site from http://drupal.org/project/colorbox. Make sure you follow the instructions correctly for not just installing the module, but also the colorbox jQuery plugin (perhaps in sites/all/libraries).</li>\n\t<li>Goto Structure &gt; Content Types &gt; Article &gt; Manage Fields, and add a new field named \"Images\" of field type \"Image\"</li>\n\t<li>Goto Structure &gt; Content Types &gt; Article &gt; Manage Display, make sure \"Images\" field is not hidden and then change the display \"Format\" to \"Colorbox\"</li>\n\t<li>Click on the \"gear\" icon and set \"Node image style\" to \"thumbnail\" while leaving \"Colorbox image style\" to \"Original\"</li>\n</ol>\n\n<p>See the attacscreenshot for how it looks after configuration. In fact, this site itself uses colorbox. So when you click on the screenshot thumbnail below, you'll see colorbox in action.</p>\n\n<p>That's it. Now your Article nodes will start showing a list of images attached to them as thumbnails. And when you click the thumbnail a colorbox comes up with shows the original image and also lets you cycle through all the other attached images.</p>\n",
      "changed": "2016-05-10T13:36:01+00:00",
      "created": "2011-03-12T14:48:29+00:00",
      "summary": "<p>Drupal 6 is very good. But Drupal 7 is even better. Much cleaner user interface (UI), and much cleaner application programming interface (API) as well.</p>\n\n<p>Today, I'm going to talk about Colobox integration in Drupal 7. With Colorbox in D7, you can show your attached images in a very user-friendly (and nice looking manner).</p>\n\n<p>Let's say you want to enhance the \"Article\" content type with Colorbox images (\"Article\" content type in D7 replaces \"Story\" content type from D6).</p>\n\n<ol>\n\t<li>Install D7 version of Colorbox on your D7 site from http://drupal.org/project/colorbox. Make sure you follow the instructions correctly for not just installing the module, but also the colorbox jQuery plugin (perhaps in sites/all/libraries).</li>\n\t<li>Goto Structure &gt; Content Types &gt; Article &gt; Manage Fields, and add a new field named \"Images\" of field type \"Image\"</li>\n\t<li>Goto Structure &gt; Content Types &gt; Article &gt; Manage Display, make sure \"Images\" field is not hidden and then change the display \"Format\" to \"Colorbox\"</li>\n\t<li>Click on the \"gear\" icon and set \"Node image style\" to \"thumbnail\" while leaving \"Colorbox image style\" to \"Original\"</li>\n</ol>\n\n<p>See the attacscreenshot for how it looks after configuration. In fact, this site itself uses colorbox. So when you click on the screenshot thumbnail below, you'll see colorbox in action.</p>\n\n<p>That's it. Now your Article nodes will start showing a list of images attached to them as thumbnails. And when you click the thumbnail a colorbox comes up with shows the original image and also lets you cycle through all the other attached images.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "c5c3e34d-c2aa-4edb-b1e6-911e0b7e9af0",
          "tid": 3,
          "name": "image",
          "alias": "/term/image"
        }
      ],
      "field_image": [
        {
          "id": "0bc053b7-8d00-4f41-98db-ba657505348c",
          "alt": "Image field display settings",
          "title": "Image field display settings",
          "url": "/sites/default/files/field/image/screenshot-colorbox-00.png",
          "fid": 16
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SMTP relay via Mandrill Service",
      "nid": 72,
      "alias": "/article/smtp-relay-mandrill-service",
      "slug": "smtp-relay-mandrill-service",
      "body": "<p>If you have ever tried to send emails from your dedicated server in the cloud to either a mailing list or to individual users of your site, you would know that it is not as simple as it sounds. Depending upon the reputation of the IP address asigned to your server, many large email providers might block your emails - even though you have a perfectly legitimate reason to send this email, and your company has never spammed anyone. The solution we implemented was subscribing to the excellent Mandrill transactional email server from https://mandrillapp.com/ and sending all our emails via them. The problem then is how to makes sure all your emails as routed (relayed) through them? For your Drupal emails, you can use the <a href=\"https://drupal.org/project/mandrill\" target=\"_blank\">Mandrill module</a>, but that covers only Drupal (and has other issues). So what we really did was route emails to Mandrill at SMTP MTA (Mail Transport Agent) configuration level itself. The rest of the article describes how.<!--break-->We use Debian Linux, which uses <em>exim4</em> as the default MTA. To reconfigure it, just run <em>sudo dpkg-reconfigure exim4-config</em>, and follow the screens. You can take the defaults, except in the following three cases:</p>\n\n<ul>\n\t<li>Type of mail configuration - <strong>mail sent by smarthost; no local mail</strong></li>\n\t<li>System mail name - <strong>yourdomain.com</strong> (or whatever your primary domain name is)</li>\n\t<li>IP address or host name of the outgoing smarthost - <strong>smtp.mandrillapp.com::587</strong> (this is most important)</li>\n</ul>\n\n<p><img alt=\"Exim4 - Type of mail configuration\" height=\"153\" src=\"/sites/spinspire.com/files/field/image/exim4-config-1.png\" title=\"Exim4 - Type of mail configuration\" width=\"755\" /></p>\n\n<p><img alt=\"Exim4 - System mail name\" height=\"85\" src=\"/sites/spinspire.com/files/field/image/exim4-config-2.png\" title=\"Exim4 - System mail name\" width=\"696\" /></p>\n\n<p><img alt=\"Exim4 - Outgoing smarthost\" height=\"86\" src=\"/sites/spinspire.com/files/field/image/exim4-config-3.png\" title=\"Exim4 - Outgoing smarthost\" width=\"731\" /></p>\n\n<p>Exit the configuration program and then there is one more VERY IMPORTANT thing. You must edit <em>/etc/exim4/passwd.client</em> file (as <em>root</em> or using <em>sudo</em>) and add the following line to it:</p>\n\n<p><strong>*.mandrillapp.com:your-mandrill-username@yourdomain.com:your-mandrill-api-key</strong></p>\n\n<p>You can find your Mandrill API from <a href=\"https://mandrillapp.com/settings/index\">https://mandrillapp.com/settings/index</a> after logging in.</p>\n\n<p>That's it. Now all emails going out of your server will be relayed through Mandrill, and thus (hopefully) not rejected by your recepient's email providers. Happy emailing!</p>\n",
      "changed": "2016-05-10T13:31:03+00:00",
      "created": "2014-01-10T17:26:28+00:00",
      "summary": "<p>If you have ever tried to send emails from your dedicated server in the cloud to either a mailing list or to individual users of your site, you would know that it is not as simple as it sounds. Depending upon the reputation of the IP address asigned to your server, many large email providers might block your emails - even though you have a perfectly legitimate reason to send this email, and your company has never spammed anyone. The solution we implemented was subscribing to the excellent Mandrill transactional email server from https://mandrillapp.com/ and sending all our emails via them. The problem then is how to makes sure all your emails as routed (relayed) through them? For your Drupal emails, you can use the <a href=\"https://drupal.org/project/mandrill\" target=\"_blank\">Mandrill module</a>, but that covers only Drupal (and has other issues). So what we really did was route emails to Mandrill at SMTP MTA (Mail Transport Agent) configuration level itself. The rest of the article describes how.<!--break-->We use Debian Linux, which uses <em>exim4</em> as the default MTA. To reconfigure it, just run <em>sudo dpkg-reconfigure exim4-config</em>, and follow the screens. You can take the defaults, except in the following three cases:</p>\n\n<ul>\n\t<li>Type of mail configuration - <strong>mail sent by smarthost; no local mail</strong></li>\n\t<li>System mail name - <strong>yourdomain.com</strong> (or whatever your primary domain name is)</li>\n\t<li>IP address or host name of the outgoing smarthost - <strong>smtp.mandrillapp.com::587</strong> (this is most important)</li>\n</ul>\n\n<p><img alt=\"Exim4 - Type of mail configuration\" height=\"153\" src=\"/sites/spinspire.com/files/field/image/exim4-config-1.png\" title=\"Exim4 - Type of mail configuration\" width=\"755\" /></p>\n\n<p><img alt=\"Exim4 - System mail name\" height=\"85\" src=\"/sites/spinspire.com/files/field/image/exim4-config-2.png\" title=\"Exim4 - System mail name\" width=\"696\" /></p>\n\n<p><img alt=\"Exim4 - Outgoing smarthost\" height=\"86\" src=\"/sites/spinspire.com/files/field/image/exim4-config-3.png\" title=\"Exim4 - Outgoing smarthost\" width=\"731\" /></p>\n\n<p>Exit the configuration program and then there is one more VERY IMPORTANT thing. You must edit <em>/etc/exim4/passwd.client</em> file (as <em>root</em> or using <em>sudo</em>) and add the following line to it:</p>\n\n<p><strong>*.mandrillapp.com:your-mandrill-username@yourdomain.com:your-mandrill-api-key</strong></p>\n\n<p>You can find your Mandrill API from <a href=\"https://mandrillapp.com/settings/index\">https://mandrillapp.com/settings/index</a> after logging in.</p>\n\n<p>That's it. Now all emails going out of your server will be relayed through Mandrill, and thus (hopefully) not rejected by your recepient's email providers. Happy emailing!</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "903ea072-9d4a-467a-be58-640e53b7b589",
          "alt": "Exim4 - Type of mail configuration",
          "title": "Exim4 - Type of mail configuration",
          "url": "/sites/default/files/field/image/exim4-config-1.png",
          "fid": 88
        },
        {
          "id": "f3b84d66-10dd-4db8-afde-407360c31dcc",
          "alt": "Exim4 - System mail name",
          "title": "Exim4 - System mail name",
          "url": "/sites/default/files/field/image/exim4-config-2.png",
          "fid": 89
        },
        {
          "id": "4a0d628b-855a-4a95-ba8e-fd7c7ec48715",
          "alt": "Exim4 - Outgoing smarthost",
          "title": "Exim4 - Outgoing smarthost",
          "url": "/sites/default/files/field/image/exim4-config-3.png",
          "fid": 90
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "DrupalCamp Atlanta presentation - Build a Complete Business App with Webform Module",
      "nid": 53,
      "alias": "/article/drupalcamp-atlanta-presentation-build-complete-business-app-webform-module",
      "slug": "drupalcamp-atlanta-presentation-build-complete-business-app-webform-module",
      "body": "<p>I had the pleasure of giving the following <a href=\"https://www.drupalcampatlanta.com/session/build-complete-business-app-webform-module\" target=\"_blank\" title=\"DcAtl presentation abstract\">presenation at DrupalCamp Atlanta</a>.</p>\n\n<ul>\n\t<li>The complete presentation PDF is <a href=\"http://spinspire.com/sites/spinspire.com/files/downloads/Business%20Apps%20with%20Drupal%27s%20webform%20module.pdf\" target=\"_blank\" title=\"DcAtl webform app presenatation\">here</a>.</li>\n\t<li>The source code for the wfdemo module is <a href=\"http://drupal.org/sandbox/jitesh_doshi/1811566\" target=\"_blank\" title=\"wfdemo module source code\">here</a>.</li>\n</ul>\n\n<p>And the following is the abstract of the presentation ...</p>\n\n<h1 id=\"page-title\">Build a Complete Business App with Webform Module</h1>\n\n<div>\n<p><a href=\"http://drupal.org/project/webform\">Webform</a> is an amazing and very versatile Drupal module, and you can do a lot by just configuring it. But did you know that with just a little bit of code, you can do a lot more? Such as:</p>\n\n<ul>\n\t<li>Generating template-based PDFs from webform submission data</li>\n\t<li>Attaching the generated PDF to the outgoing webform email</li>\n\t<li>Adding custom attributes to webform components for all kinds of amazing functionality, such as:\n\t<ul>\n\t\t<li>Add configurable JavaScript behavior to webform components</li>\n\t\t<li>Add an additional CC/BCC address to an email address component (this address gets a copy of emails)</li>\n\t\t<li>Make a select option \"single use\" (e.g. a seat that goes out of inventory once selected in a webform submission)</li>\n\t\t<li>Attach a \"price\" to a webform option</li>\n\t\t<li>and much more ...</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>This session will walk you through the process of building an app by configuring webform module forms that model your business process (for example, taking orders on the web), write a small module to enhance your webform components (such as attaching price), and then generate template-based PDFs from the submitted webform data and attach them to the email that goes out.</p>\n</div>\n",
      "changed": "2016-05-10T13:29:31+00:00",
      "created": "2012-10-27T19:39:04+00:00",
      "summary": "<p>I had the pleasure of giving the following <a href=\"https://www.drupalcampatlanta.com/session/build-complete-business-app-webform-module\" target=\"_blank\" title=\"DcAtl presentation abstract\">presenation at DrupalCamp Atlanta</a>.</p>\n\n<ul>\n\t<li>The complete presentation PDF is <a href=\"http://spinspire.com/sites/spinspire.com/files/downloads/Business%20Apps%20with%20Drupal%27s%20webform%20module.pdf\" target=\"_blank\" title=\"DcAtl webform app presenatation\">here</a>.</li>\n\t<li>The source code for the wfdemo module is <a href=\"http://drupal.org/sandbox/jitesh_doshi/1811566\" target=\"_blank\" title=\"wfdemo module source code\">here</a>.</li>\n</ul>\n\n<p>And the following is the abstract of the presentation ...</p>\n\n<h1 id=\"page-title\">Build a Complete Business App with Webform Module</h1>\n\n<div>\n<p><a href=\"http://drupal.org/project/webform\">Webform</a> is an amazing and very versatile Drupal module, and you can do a lot by just configuring it. But did you know that with just a little bit of code, you can do a lot more? Such as:</p>\n\n<ul>\n\t<li>Generating template-based PDFs from webform submission data</li>\n\t<li>Attaching the generated PDF to the outgoing webform email</li>\n\t<li>Adding custom attributes to webform components for all kinds of amazing functionality, such as:\n\t<ul>\n\t\t<li>Add configurable JavaScript behavior to webform components</li>\n\t\t<li>Add an additional CC/BCC address to an email address component (this address gets a copy of emails)</li>\n\t\t<li>Make a select option \"single use\" (e.g. a seat that goes out of inventory once selected in a webform submission)</li>\n\t\t<li>Attach a \"price\" to a webform option</li>\n\t\t<li>and much more ...</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>This session will walk you through the process of building an app by configuring webform module forms that model your business process (for example, taking orders on the web), write a small module to enhance your webform components (such as attaching price), and then generate template-based PDFs from the submitted webform data and attach them to the email that goes out.</p>\n</div>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        },
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "5b9c02ec-4acd-4e4b-b039-ee92dfe2fccd",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_19.jpg",
          "fid": 65
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Automating Drupal user login and maintaining session in curl",
      "nid": 63,
      "alias": "/article/automating-drupal-user-login-and-maintaining-session-curl",
      "slug": "automating-drupal-user-login-and-maintaining-session-curl",
      "body": "<p>Using the <a href=\"http://drupal.org/project/services\">services module</a> in Drupal to expose CRUD operations on nodes is a great way to expose RESTful service from Drupal. All you have to do is to enable rest_server sub-module and create a REST server in it. Now you start fetching your nodes in XML, JSON or many other formats. Now for testing, the '<a href=\"http://curl.haxx.se/\">curl</a>' command line browser was used to make HTTP requests in an automated fashion. Making read-only requests to fetch nodes as JSON was easy. Just run <code>curl http://localhost/rest/node</code> to get a list of nodes. But updating or creating nodes requires not just logging in, but also maintaining session across 'curl' requests.</p>\n\n<p>That's where the <code>--cookie-jar</code> and <code>--cookie</code> options come in. Just login using<br />\n<br />\n<code>curl --cookie-jar cookie.txt \"name=myusername&amp;pass=mypassword&amp;form_id=user_login\" http://localhost/user/login</code></p>\n\n<p>If login succeeds, this will save a session cookie in the cookie.txt file. Now you can use this cookie, and thus the session, with</p>\n\n<p><code>curl --cookie cookie.txt http://localhost/some/path/that/needs/logged/in/session</code></p>\n\n<p>and voila! Your command-line browser, curl, is interactive with Drupal as a logged in user!</p>\n\n<p><strong>But wait, there's more!</strong></p>\n\n<p>If you're not happy about having to put the actual password of the user in plain-text on the curl command-line above, the solution is to use <a href=\"http://drupal.org/project/drush\">Drush</a>. With drush, you can generate a link that automatically logs you in, without providing the password. Just run</p>\n\n<p><code>drush -l http://localhost user-login myusername</code></p>\n\n<p>This will print a URL (that looks like <em>http://localhost/user/reset/.../.../.../login</em>) that you can paste into a browser and get logged in instantly. But instead of pasting it into a browser, you can pass it to curl - like this</p>\n\n<p><code>curl --cookie-jar cookie.txt <em>temporary-login-url</em></code></p>\n\n<p>and that logs curl in without a password.  So the above two can be combined into ...</p>\n\n<p><code><em>curl --cookie-jar cookie.txt `</em><em>drush -l http://localhost user-login myusername`</em></code></p>\n\n<p>(notice the reverse-quotes), and that saves a cookie in the cookie.txt file which can be used in subsequent curl requests with the --cookie option. That will make curl act as if it is logged in as myusername.</p>\n",
      "changed": "2016-05-10T13:28:41+00:00",
      "created": "2013-04-05T02:04:45+00:00",
      "summary": "<p>Using the <a href=\"http://drupal.org/project/services\">services module</a> in Drupal to expose CRUD operations on nodes is a great way to expose RESTful service from Drupal. All you have to do is to enable rest_server sub-module and create a REST server in it. Now you start fetching your nodes in XML, JSON or many other formats. Now for testing, the '<a href=\"http://curl.haxx.se/\">curl</a>' command line browser was used to make HTTP requests in an automated fashion. Making read-only requests to fetch nodes as JSON was easy. Just run <code>curl http://localhost/rest/node</code> to get a list of nodes. But updating or creating nodes requires not just logging in, but also maintaining session across 'curl' requests.</p>\n\n<p>That's where the <code>--cookie-jar</code> and <code>--cookie</code> options come in. Just login using<br />\n<br />\n<code>curl --cookie-jar cookie.txt \"name=myusername&amp;pass=mypassword&amp;form_id=user_login\" http://localhost/user/login</code></p>\n\n<p>If login succeeds, this will save a session cookie in the cookie.txt file. Now you can use this cookie, and thus the session, with</p>\n\n<p><code>curl --cookie cookie.txt http://localhost/some/path/that/needs/logged/in/session</code></p>\n\n<p>and voila! Your command-line browser, curl, is interactive with Drupal as a logged in user!</p>\n\n<p><strong>But wait, there's more!</strong></p>\n\n<p>If you're not happy about having to put the actual password of the user in plain-text on the curl command-line above, the solution is to use <a href=\"http://drupal.org/project/drush\">Drush</a>. With drush, you can generate a link that automatically logs you in, without providing the password. Just run</p>\n\n<p><code>drush -l http://localhost user-login myusername</code></p>\n\n<p>This will print a URL (that looks like <em>http://localhost/user/reset/.../.../.../login</em>) that you can paste into a browser and get logged in instantly. But instead of pasting it into a browser, you can pass it to curl - like this</p>\n\n<p><code>curl --cookie-jar cookie.txt <em>temporary-login-url</em></code></p>\n\n<p>and that logs curl in without a password.  So the above two can be combined into ...</p>\n\n<p><code><em>curl --cookie-jar cookie.txt `</em><em>drush -l http://localhost user-login myusername`</em></code></p>\n\n<p>(notice the reverse-quotes), and that saves a cookie in the cookie.txt file which can be used in subsequent curl requests with the --cookie option. That will make curl act as if it is logged in as myusername.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "e1f57d94-19cb-47b1-80a7-fd3392406fb0",
          "tid": 40,
          "name": "rest",
          "alias": "/term/rest"
        }
      ],
      "field_image": [
        {
          "id": "50484ffe-6add-425a-82a9-86af2a5f7271",
          "alt": "drupal logo",
          "title": "drupal logo",
          "url": "/sites/default/files/field/image/images_22.jpg",
          "fid": 78
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Drupal Module Folder Organization",
      "nid": 81,
      "alias": "/article/drupal-module-folder-organization",
      "slug": "drupal-module-folder-organization",
      "body": "<p>Organization is important for any Drupal site larger than the simplest of blogs. It is paramount for multi-site installations that are already bulky with numerous site folders, themes and subthemes. I have observed that if I don’t maintain a good organizational format within my multisite structure, I can very quickly become lost locating specific files and lose precious productive time. Drupal 7.x does a pretty good job of organizing its own data by creating separate theme and module folders for “all” sites but when it comes to multisite installs, a little early and continuing housekeeping goes a very long way.</p>\n\n<p>Every site that I create in a Drupal multisite install includes the standard folders: files, modules and themes. These serve to organize my sites pretty good, however, as my sites grow and I become a more advanced “drupaler”, I find myself using more and more contributed modules, creating my own custom modules, and installing many modules to specific sites. Therefore, the primary focus for organization centers on a sites module folder.</p>\n\n<p>Drupal keeps track of its core modules in a modules folder residing in its root folder. It also graciously keeps track of all of our additional modules in the /sites/all/modules folder, which may be just fine for a simple, single-site install. For a more complex single-site install or multi-site Drupal installations this folder can very quickly become a disorganized mess of contributed modules, custom modules and features. In order to prevent this disorganization, I follow a seemingly popular convention regarding module folders; all of my sites/all/modules folders contain at least these three subfolders:</p>\n\n<ul>\n\t<li>custom – for all of the custom modules that I write</li>\n\t<li>contrib – for all of the contributed modules that I download from Drupal.org</li>\n\t<li>features – for all of the features (for specific use cases) that I export with the features module</li>\n</ul>\n\n<p>*Important*: In a multi-site installation the sites/all/modules folder and subfolders are used only for those modules installed in all of the sites. In this scenario, I also create the same custom, contrib and features folders in each individual site folder to contain modules specific to individual sites.</p>\n\n<p>Additionally, I also include the following subfolders in my modules folders on an as needed basis:</p>\n\n<ul>\n\t<li>dev-tools – in case I may be taking a site from development to live – this makes it easy to remove these modules</li>\n\t<li>patches – in case I have patched any of my custom modules – it’s better to maintain these patches near the modules that I have patched rather than a local hard drive somewhere.</li>\n</ul>\n\n<p>This organization convention may not be the best solution for every Drupal install, or other developers may have good or even better suggestions, but whatever convention you may choose to use, organization is always better and more productive than no organization at all.</p>\n",
      "changed": "2016-05-10T13:28:14+00:00",
      "created": "2014-07-28T19:16:43+00:00",
      "summary": "<p>Organization is important for any Drupal site larger than the simplest of blogs. It is paramount for multi-site installations that are already bulky with numerous site folders, themes and subthemes. I have observed that if I don’t maintain a good organizational format within my multisite structure, I can very quickly become lost locating specific files and lose precious productive time. Drupal 7.x does a pretty good job of organizing its own data by creating separate theme and module folders for “all” sites but when it comes to multisite installs, a little early and continuing housekeeping goes a very long way.</p>\n\n<p>Every site that I create in a Drupal multisite install includes the standard folders: files, modules and themes. These serve to organize my sites pretty good, however, as my sites grow and I become a more advanced “drupaler”, I find myself using more and more contributed modules, creating my own custom modules, and installing many modules to specific sites. Therefore, the primary focus for organization centers on a sites module folder.</p>\n\n<p>Drupal keeps track of its core modules in a modules folder residing in its root folder. It also graciously keeps track of all of our additional modules in the /sites/all/modules folder, which may be just fine for a simple, single-site install. For a more complex single-site install or multi-site Drupal installations this folder can very quickly become a disorganized mess of contributed modules, custom modules and features. In order to prevent this disorganization, I follow a seemingly popular convention regarding module folders; all of my sites/all/modules folders contain at least these three subfolders:</p>\n\n<ul>\n\t<li>custom – for all of the custom modules that I write</li>\n\t<li>contrib – for all of the contributed modules that I download from Drupal.org</li>\n\t<li>features – for all of the features (for specific use cases) that I export with the features module</li>\n</ul>\n\n<p>*Important*: In a multi-site installation the sites/all/modules folder and subfolders are used only for those modules installed in all of the sites. In this scenario, I also create the same custom, contrib and features folders in each individual site folder to contain modules specific to individual sites.</p>\n\n<p>Additionally, I also include the following subfolders in my modules folders on an as needed basis:</p>\n\n<ul>\n\t<li>dev-tools – in case I may be taking a site from development to live – this makes it easy to remove these modules</li>\n\t<li>patches – in case I have patched any of my custom modules – it’s better to maintain these patches near the modules that I have patched rather than a local hard drive somewhere.</li>\n</ul>\n\n<p>This organization convention may not be the best solution for every Drupal install, or other developers may have good or even better suggestions, but whatever convention you may choose to use, organization is always better and more productive than no organization at all.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "5b19ab0f-68cd-4f06-829d-2c63bfa0eeb4",
          "tid": 71,
          "name": "folder organization",
          "alias": "/term/folder-organization"
        },
        {
          "id": "fa91475a-1ace-4e2f-a58a-29e834ffaac2",
          "tid": 72,
          "name": "drupal installation",
          "alias": "/term/drupal-installation"
        },
        {
          "id": "7765eef6-8391-4908-b978-03087c6a8eea",
          "tid": 73,
          "name": "modules",
          "alias": "/term/modules"
        }
      ],
      "field_image": [
        {
          "id": "a5de690d-8701-4b7e-aea5-c51a9f7824cd",
          "alt": "Drupal Icon",
          "title": "Drupal Icon",
          "url": "/sites/default/files/field/image/images_16_0.jpg",
          "fid": 101
        }
      ],
      "uid": {
        "id": "8cb634c6-60e3-40b8-a91e-45d063552d0a",
        "display_name": "Dan Slater"
      }
    },
    {
      "title": "nginx+php-fpm+Drupal on Linux",
      "nid": 10,
      "alias": "/article/nginxphp-fpmdrupal-linux",
      "slug": "nginxphp-fpmdrupal-linux",
      "body": "<p><a href=\"http://nginx.com/\">Nginx </a>is a high performance lightweight web-server that is visibly faster than Apache and takes less memory. On my machine, Drupal's module list page (admin/modules) comes up within 2 seconds on Nginx, while on Apache 2.2 it takes over 4 seconds (as measured in Chrome's developer tools / network tab).</p>\n\n<p>Setting it up for Drupal is also very easy. This is how I set it up on Ubuntu Linux 11.04 (should be same for most Linuxen).</p>\n\n<ol>\n\t<li>Shutdown Apache, so that it relinquishes port 80.<br />\n\t<code>sudo service apache2 stop</code><br />\n\tLater on, once you're happy with nginx (you will be), then you can disable Apache with ...<br />\n\tsudo update-rc.d apache2 disable</li>\n\t<li>Install nginx server.<br />\n\tsudo apt-get install nginx</li>\n\t<li>Install CGI version of PHP (as opposed to mod_php that Apache uses)<br />\n\tsudo apt-get install php5-cgi</li>\n\t<li>Install FPM that runs PHP as a FastCGI process, instead of an embedded module (as with Apache) or a CGI process.<br />\n\tsudo apt-get install php5-fpm</li>\n</ol>\n\n<p>Now to run Drupal with it, you will have to edit /etc/nginx/sites-enabled/default as follows:</p>\n\n<ol>\n\t<li>set 'root' to the path where you have installed Drupal.</li>\n\t<li>Find the section that starts with \"location / {\" and replace it with ...\n\t<pre>\n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to index.html, finally drupal\n                try_files $uri $uri/ /index.html @drupal;\n        }\n\n        location @drupal {\n          # Some modules enforce no slash (/) at the end of the URL\n          # Else this rewrite block wouldn't be needed (GlobalRedirect)\n          rewrite ^/(.*)$ /index.php?q=$1;\n        }\n</pre>\n\t</li>\n\t<li>Add or uncomment the following section to enable FastCGI/FPM\n\t<pre>\n        location ~ \\.php$ {\n                fastcgi_pass 127.0.0.1:9000;\n                fastcgi_index index.php;\n                include fastcgi_params;\n        }</pre>\n\t</li>\n\t<li>Restart nginx<br />\n\tsudo service nginx restart</li>\n</ol>\n\n<p>That's it, you're done.</p>\n\n<p>References:</p>\n\n<ol>\n\t<li><a href=\"http://www.systemseed.com/blog/drupal-nginx-fastcgi-setup-and-configuration\">http://www.systemseed.com/blog/drupal-nginx-fastcgi-setup-and-configuration</a></li>\n\t<li><a href=\"http://tomasz.sterna.tv/2009/04/php-fastcgi-with-nginx-on-ubuntu/\">http://tomasz.sterna.tv/2009/04/php-fastcgi-with-nginx-on-ubuntu/</a></li>\n\t<li><a href=\"http://drupal.org/node/976392\">http://drupal.org/node/976392</a></li>\n\t<li><a href=\"http://nginx.org/en/docs/\">http://nginx.org/en/docs/</a></li>\n</ol>\n",
      "changed": "2016-05-10T13:27:55+00:00",
      "created": "2012-04-26T03:06:25+00:00",
      "summary": "<p><a href=\"http://nginx.com/\">Nginx </a>is a high performance lightweight web-server that is visibly faster than Apache and takes less memory. On my machine, Drupal's module list page (admin/modules) comes up within 2 seconds on Nginx, while on Apache 2.2 it takes over 4 seconds (as measured in Chrome's developer tools / network tab).</p>\n\n<p>Setting it up for Drupal is also very easy. This is how I set it up on Ubuntu Linux 11.04 (should be same for most Linuxen).</p>\n\n<ol>\n\t<li>Shutdown Apache, so that it relinquishes port 80.<br />\n\t<code>sudo service apache2 stop</code><br />\n\tLater on, once you're happy with nginx (you will be), then you can disable Apache with ...<br />\n\tsudo update-rc.d apache2 disable</li>\n\t<li>Install nginx server.<br />\n\tsudo apt-get install nginx</li>\n\t<li>Install CGI version of PHP (as opposed to mod_php that Apache uses)<br />\n\tsudo apt-get install php5-cgi</li>\n\t<li>Install FPM that runs PHP as a FastCGI process, instead of an embedded module (as with Apache) or a CGI process.<br />\n\tsudo apt-get install php5-fpm</li>\n</ol>\n\n<p>Now to run Drupal with it, you will have to edit /etc/nginx/sites-enabled/default as follows:</p>\n\n<ol>\n\t<li>set 'root' to the path where you have installed Drupal.</li>\n\t<li>Find the section that starts with \"location / {\" and replace it with ...\n\t<pre>\n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to index.html, finally drupal\n                try_files $uri $uri/ /index.html @drupal;\n        }\n\n        location @drupal {\n          # Some modules enforce no slash (/) at the end of the URL\n          # Else this rewrite block wouldn't be needed (GlobalRedirect)\n          rewrite ^/(.*)$ /index.php?q=$1;\n        }\n</pre>\n\t</li>\n\t<li>Add or uncomment the following section to enable FastCGI/FPM\n\t<pre>\n        location ~ \\.php$ {\n                fastcgi_pass 127.0.0.1:9000;\n                fastcgi_index index.php;\n                include fastcgi_params;\n        }</pre>\n\t</li>\n\t<li>Restart nginx<br />\n\tsudo service nginx restart</li>\n</ol>\n\n<p>That's it, you're done.</p>\n\n<p>References:</p>\n\n<ol>\n\t<li><a href=\"http://www.systemseed.com/blog/drupal-nginx-fastcgi-setup-and-configuration\">http://www.systemseed.com/blog/drupal-nginx-fastcgi-setup-and-configuration</a></li>\n\t<li><a href=\"http://tomasz.sterna.tv/2009/04/php-fastcgi-with-nginx-on-ubuntu/\">http://tomasz.sterna.tv/2009/04/php-fastcgi-with-nginx-on-ubuntu/</a></li>\n\t<li><a href=\"http://drupal.org/node/976392\">http://drupal.org/node/976392</a></li>\n\t<li><a href=\"http://nginx.org/en/docs/\">http://nginx.org/en/docs/</a></li>\n</ol>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "480e6d70-7c1f-448c-addb-cff3943b9095",
          "alt": "nginx logo",
          "title": "nginx logo",
          "url": "/sites/default/files/field/image/images.jpg",
          "fid": 18
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Altering Email template in CiviCRM module of Drupal",
      "nid": 31,
      "alias": "/article/altering-email-template-civicrm-module-drupal",
      "slug": "altering-email-template-civicrm-module-drupal",
      "body": "<p><a href=\"http://civicrm.org/\">CiviCRM</a> uses a server-side scripting language called <a href=\"http://www.smarty.net/\">Smarty </a>in order to access server-side variables, perform logic and work with a template to generate a webpage.  The overall flow is:  All the business logic is done by PHP and all the presentation logic is done by Smarty.   So the PHP pages do the database updates and selects, access session variables, create data structures particular webpage or email template and then hand over the data structures to a Smarty page.  By the way, Smarty allows embedding of PHP code inside a webpage. Reader may wonder what the need for two scripting languages.  The reason is that CiviCRM standalone was developed using Smarty and when it was integrated with Drupal, the frontend stayed with Smarty. In this article, a simple task will be performed to illustrate the working of Smarty.  The task is to change an email template that is tied to event registration.  The change involved merging data elements.  Lets start with an existing piece of code in the email template:</p>\n\n<blockquote>\n<p> </p>\n\n<div>{if $amount &amp;&amp; !$lineItem}</div>\n\n<div>    {foreach from=$amount item=amnt key=level}</div>\n\n<div>        &lt;tr&gt;&lt;td colspan=\"2\" {$valueStyle}&gt;  {$amnt.amount|crmMoney} &lt;br&gt;&lt;h3&gt; {$amnt.label|regex_replace:\"/(- \\d+)/\":\"\\1&lt;/h3&gt;&lt;br&gt;&lt;h3&gt;\"}</div>\n\n<div>        &lt;/h3&gt;&lt;/td&gt;&lt;/tr&gt;</div>\n\n<div>{/foreach}</div>\n\n<div>{/if}</div>\n</blockquote>\n\n<p>Assume a scenario in which a user registers for an event and purchases 4 tickets for the entire family. In the above code, a row is generated for each person in the family that is registered for the event.  Data is extracted from the array: $amount[i][\"amount\"], $amount[i][\"label\"], where i=0,1,2,3.  Smarty code is written inside {...}.  amount contains the dollar value of ticket (there are different types of tickets--VIP, normal, etc.--of different amounts). Later part of the email template contained the following code.  Notice the comments {* ... *} that indicate the change made to the code:     </p>\n\n<blockquote>\n<p>     {if $customProfile}</p>\n\n<div>      {foreach from=$customProfile item=value key=customName}</div>\n\n<div>       &lt;tr&gt;</div>\n\n<div>        &lt;th {$headerStyle}&gt;</div>\n\n<div>         {ts 1=$customName+1}Participant %1{/ts}.  </div>\n\n<div> {*  THIS CODE HAS BEEN ADDED ... START *}</div>\n\n<div> {$amount[$customName].label}. Amount paid: {$amount[$customName].amount|crmMoney}</div>\n\n<div> {*  END *} </div>\n\n<div>        &lt;/th&gt;</div>\n\n<div>       &lt;tr&gt;</div>\n\n<div>  {* Loop for each member of family on the ticket *} </div>\n\n<div>       {foreach from=$value item=val key=field}</div>\n\n<div>        {if $field eq 'additionalCustomPre' or $field eq 'additionalCustomPost'}</div>\n\n<div>         &lt;tr&gt;</div>\n\n<div>          &lt;td colspan=\"2\" {$labelStyle}&gt;</div>\n\n<div>           {if $field eq 'additionalCustomPre'}</div>\n\n<div>            {$additionalCustomPre_grouptitle}</div>\n\n<div>           {else}</div>\n\n<div>            {$additionalCustomPost_grouptitle}</div>\n\n<div>           {/if}</div>\n\n<div>          &lt;/td&gt;</div>\n\n<div>         &lt;/tr&gt;</div>\n\n<div>{*  Printing First Name and Last Name in two separate rows *} </div>\n\n<div>         {foreach from=$val item=v key=f}</div>\n\n<div>          &lt;tr&gt;</div>\n\n<div>           &lt;td {$labelStyle}&gt;</div>\n\n<div>            {$f}</div>\n\n<div>           &lt;/td&gt;</div>\n\n<div>           &lt;td {$valueStyle}&gt;</div>\n\n<div>            {$v}</div>\n\n<div>           &lt;/td&gt;</div>\n\n<div>          &lt;/tr&gt;</div>\n\n<div>         {/foreach}</div>\n\n<div>        {/if}</div>\n\n<div>       {/foreach}</div>\n\n<div>      {/foreach}</div>\n\n<div>     {/if}</div>\n\n<div> </div>\n\n<p>  </p>\n</blockquote>\n\n<p>The above code creates, again, rows for each person in the family and lists firstName and lastName.  The code additionally moves the value of ticket above the rows where first and last name are printed.  </p>\n",
      "changed": "2016-05-10T13:27:39+00:00",
      "created": "2011-03-10T14:37:10+00:00",
      "summary": "<p><a href=\"http://civicrm.org/\">CiviCRM</a> uses a server-side scripting language called <a href=\"http://www.smarty.net/\">Smarty </a>in order to access server-side variables, perform logic and work with a template to generate a webpage.  The overall flow is:  All the business logic is done by PHP and all the presentation logic is done by Smarty.   So the PHP pages do the database updates and selects, access session variables, create data structures particular webpage or email template and then hand over the data structures to a Smarty page.  By the way, Smarty allows embedding of PHP code inside a webpage. Reader may wonder what the need for two scripting languages.  The reason is that CiviCRM standalone was developed using Smarty and when it was integrated with Drupal, the frontend stayed with Smarty. In this article, a simple task will be performed to illustrate the working of Smarty.  The task is to change an email template that is tied to event registration.  The change involved merging data elements.  Lets start with an existing piece of code in the email template:</p>\n\n<blockquote>\n<p> </p>\n\n<div>{if $amount &amp;&amp; !$lineItem}</div>\n\n<div>    {foreach from=$amount item=amnt key=level}</div>\n\n<div>        &lt;tr&gt;&lt;td colspan=\"2\" {$valueStyle}&gt;  {$amnt.amount|crmMoney} &lt;br&gt;&lt;h3&gt; {$amnt.label|regex_replace:\"/(- \\d+)/\":\"\\1&lt;/h3&gt;&lt;br&gt;&lt;h3&gt;\"}</div>\n\n<div>        &lt;/h3&gt;&lt;/td&gt;&lt;/tr&gt;</div>\n\n<div>{/foreach}</div>\n\n<div>{/if}</div>\n</blockquote>\n\n<p>Assume a scenario in which a user registers for an event and purchases 4 tickets for the entire family. In the above code, a row is generated for each person in the family that is registered for the event.  Data is extracted from the array: $amount[i][\"amount\"], $amount[i][\"label\"], where i=0,1,2,3.  Smarty code is written inside {...}.  amount contains the dollar value of ticket (there are different types of tickets--VIP, normal, etc.--of different amounts). Later part of the email template contained the following code.  Notice the comments {* ... *} that indicate the change made to the code:     </p>\n\n<blockquote>\n<p>     {if $customProfile}</p>\n\n<div>      {foreach from=$customProfile item=value key=customName}</div>\n\n<div>       &lt;tr&gt;</div>\n\n<div>        &lt;th {$headerStyle}&gt;</div>\n\n<div>         {ts 1=$customName+1}Participant %1{/ts}.  </div>\n\n<div> {*  THIS CODE HAS BEEN ADDED ... START *}</div>\n\n<div> {$amount[$customName].label}. Amount paid: {$amount[$customName].amount|crmMoney}</div>\n\n<div> {*  END *} </div>\n\n<div>        &lt;/th&gt;</div>\n\n<div>       &lt;tr&gt;</div>\n\n<div>  {* Loop for each member of family on the ticket *} </div>\n\n<div>       {foreach from=$value item=val key=field}</div>\n\n<div>        {if $field eq 'additionalCustomPre' or $field eq 'additionalCustomPost'}</div>\n\n<div>         &lt;tr&gt;</div>\n\n<div>          &lt;td colspan=\"2\" {$labelStyle}&gt;</div>\n\n<div>           {if $field eq 'additionalCustomPre'}</div>\n\n<div>            {$additionalCustomPre_grouptitle}</div>\n\n<div>           {else}</div>\n\n<div>            {$additionalCustomPost_grouptitle}</div>\n\n<div>           {/if}</div>\n\n<div>          &lt;/td&gt;</div>\n\n<div>         &lt;/tr&gt;</div>\n\n<div>{*  Printing First Name and Last Name in two separate rows *} </div>\n\n<div>         {foreach from=$val item=v key=f}</div>\n\n<div>          &lt;tr&gt;</div>\n\n<div>           &lt;td {$labelStyle}&gt;</div>\n\n<div>            {$f}</div>\n\n<div>           &lt;/td&gt;</div>\n\n<div>           &lt;td {$valueStyle}&gt;</div>\n\n<div>            {$v}</div>\n\n<div>           &lt;/td&gt;</div>\n\n<div>          &lt;/tr&gt;</div>\n\n<div>         {/foreach}</div>\n\n<div>        {/if}</div>\n\n<div>       {/foreach}</div>\n\n<div>      {/foreach}</div>\n\n<div>     {/if}</div>\n\n<div> </div>\n\n<p>  </p>\n</blockquote>\n\n<p>The above code creates, again, rows for each person in the family and lists firstName and lastName.  The code additionally moves the value of ticket above the rows where first and last name are printed.  </p>\n",
      "field_tags": [
        {
          "id": "97eeed87-8748-41f4-8027-20080f2a65dc",
          "tid": 12,
          "name": "civicrm",
          "alias": "/term/civicrm"
        },
        {
          "id": "b2d46581-b2e5-495a-9fe7-480e65311c4e",
          "tid": 13,
          "name": "smarty",
          "alias": "/term/smarty"
        },
        {
          "id": "f4c849eb-a2a6-4b13-8e27-411b035ee088",
          "tid": 14,
          "name": "email",
          "alias": "/term/email"
        },
        {
          "id": "733aee8b-b0a8-41c3-b7d9-9ae0c10987ba",
          "tid": 15,
          "name": "event",
          "alias": "/term/event"
        },
        {
          "id": "8e893de7-c302-446b-9cea-3cf3c92625dd",
          "tid": 16,
          "name": "tickets",
          "alias": "/term/tickets"
        }
      ],
      "field_image": [
        {
          "id": "8c4bfce8-ba5c-42d4-b9b2-9c813390a4b5",
          "alt": "civiCRM logo",
          "title": "civiCRM logo",
          "url": "/sites/default/files/field/image/top-logo_2.png",
          "fid": 41
        }
      ],
      "uid": {
        "id": "be429efe-e9f7-418a-9795-c17cc887a91f",
        "display_name": "Pramod Jain"
      }
    },
    {
      "title": "Go language runtime on Google App Engine",
      "nid": 48,
      "alias": "/article/go-language-runtime-google-app-engine",
      "slug": "go-language-runtime-google-app-engine",
      "body": "<p>I am beginning to play with Go language runtime on Google App Engine. I am sharing the source code of this app at <a href=\"https://bitbucket.org/jitesh_doshi/gogae\">https://bitbucket.org/jitesh_doshi/gogae</a>, and I have deployed it at <a href=\"http://gogae.spinspire.com/\" target=\"_blank\" title=\"Sample Go app hosted on Google App Engine\">http://gogae.spinspire.com/</a> for you to test/visit.</p>\n\n<p>Requirements:</p>\n\n<ol>\n\t<li>Learn <a href=\"http://golang.org/\" target=\"_blank\">Go</a>.</li>\n\t<li>Learn <a href=\"https://developers.google.com/appengine/docs/go/gettingstarted\" target=\"_blank\">Google Appengine Runtime for Go</a>.</li>\n\t<li>Download <a href=\"https://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_Go\" target=\"_blank\">GAE SDK for Go</a>.</li>\n\t<li>Create a <a href=\"https://developers.google.com/appengine/docs/go/gettingstarted/helloworld\" target=\"_blank\">sample app for GAE in Go</a>.</li>\n\t<li><a href=\"https://developers.google.com/appengine/docs/go/gettingstarted/uploading\" target=\"_blank\">Deploy </a>and test.</li>\n</ol>\n\n<p>So far, both Go and GAE look very interesting. I'll keep you posted.</p>\n\n<p>PS: Here's <a href=\"http://golangtutorials.blogspot.com/2011/10/analysing-google-appenginge-for-go.html\" target=\"_blank\">another person talking about the same topic</a>.</p>\n",
      "changed": "2016-05-10T13:27:19+00:00",
      "created": "2012-09-01T23:44:04+00:00",
      "summary": "<p>I am beginning to play with Go language runtime on Google App Engine. I am sharing the source code of this app at <a href=\"https://bitbucket.org/jitesh_doshi/gogae\">https://bitbucket.org/jitesh_doshi/gogae</a>, and I have deployed it at <a href=\"http://gogae.spinspire.com/\" target=\"_blank\" title=\"Sample Go app hosted on Google App Engine\">http://gogae.spinspire.com/</a> for you to test/visit.</p>\n\n<p>Requirements:</p>\n\n<ol>\n\t<li>Learn <a href=\"http://golang.org/\" target=\"_blank\">Go</a>.</li>\n\t<li>Learn <a href=\"https://developers.google.com/appengine/docs/go/gettingstarted\" target=\"_blank\">Google Appengine Runtime for Go</a>.</li>\n\t<li>Download <a href=\"https://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_Go\" target=\"_blank\">GAE SDK for Go</a>.</li>\n\t<li>Create a <a href=\"https://developers.google.com/appengine/docs/go/gettingstarted/helloworld\" target=\"_blank\">sample app for GAE in Go</a>.</li>\n\t<li><a href=\"https://developers.google.com/appengine/docs/go/gettingstarted/uploading\" target=\"_blank\">Deploy </a>and test.</li>\n</ol>\n\n<p>So far, both Go and GAE look very interesting. I'll keep you posted.</p>\n\n<p>PS: Here's <a href=\"http://golangtutorials.blogspot.com/2011/10/analysing-google-appenginge-for-go.html\" target=\"_blank\">another person talking about the same topic</a>.</p>\n",
      "field_tags": [
        {
          "id": "356f8415-f383-4320-8e9e-d1d51edcc207",
          "tid": 31,
          "name": "appengine",
          "alias": "/term/appengine"
        },
        {
          "id": "5b8a604c-4a5c-41cc-8700-204544709fdb",
          "tid": 32,
          "name": "go",
          "alias": "/term/go"
        }
      ],
      "field_image": [
        {
          "id": "1391c325-54ed-4bcb-97d8-0e7aad0b537a",
          "alt": "go lang mascot",
          "title": "go lang mascot",
          "url": "/sites/default/files/field/image/download.jpg",
          "fid": 60
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Enabling Drupal website for access by mobile devices",
      "nid": 33,
      "alias": "/article/enabling-drupal-website-access-mobile-devices",
      "slug": "enabling-drupal-website-access-mobile-devices",
      "body": "<p>Rich content of a Drupal website looks good on a large screen, but is, at best, difficult to read and use on a small screen of a smart phone. This article will describe a way to customize a drupal website so that it works well on both big and small screens.  Following a list of desired functionality:</p>\n\n<ol>\n\t<li>Ability to detect that a website is being accessed by a mobile device</li>\n\t<li>Switch to a \"mobile\" theme when access by mobile device is detected</li>\n\t<li>Administrative/developer tools to specify which content should be displayed and how when site is accessed by a mobile device. </li>\n</ol>\n\n<p>Two modules are required to achieve the desired functionality:  <a href=\"http://drupal.org/project/mobile_tools\">Mobile_tools</a> and <a href=\"http://drupal.org/project/browscap\">Browscap</a>.  In addition, a theme is required, we will choose Nokia_mobile.  Browscap provides the first functionality; Mobile_tools provides the second functionality; and <a href=\"http://drupal.org/project/nokia_mobile\">Nokia_mobile</a> provides the mobile theme and the third functionality. Install modules and themes using the normal drupal process, and enable them.  Next go to Admin -&gt; Site Configuration to configure the two modules:  </p>\n\n<ol>\n\t<li>Browscap has a single checkbox for \"Monitor Browsers.\"  It will monitor all user agents that visit the site</li>\n\t<li>Mobile_tools configuration.\n\t<ol>\n\t\t<li>General Configuration.  There are two options: Theme switching without redirection, and Redirection.  In both cases, this module detects if the request is coming from a mobile site.  This configuration is to setup the action after a mobile user has been detected.\n\t\t<ul>\n\t\t\t<li>In the first option, the theme of the website is changed to a specified mobile theme.  There is no redirection.</li>\n\t\t\t<li>In the second option, all mobile users will be redirected to a subdomain or domain that specifically hosts mobile pages of your website.  For example, if you want all your mobile users to use: m.mysite.com, then this option will redirect all mobile users that come to mysite.com to m.mysite.com</li>\n\t\t</ul>\n\t\t</li>\n\t\t<li>Extra.  In this section of configuration specify the landing page for a mobile user.  If your desktop website has a splashy frontpage with graphics, then you should specify an alternate page for the mobile user.  Another item that should be configured is the number of posts; by default it is set to 10, you may want to limit to 2.</li>\n\t</ol>\n\t</li>\n</ol>\n\n<p>In order to configure Nokia Mobile go to Admin -&gt; Site Building -&gt; Themes:</p>\n\n<ol>\n\t<li>On the Themes page, Enable Nokia_Mobile theme.  Save the configuration</li>\n\t<li>Click on the \"Configure\" link adjacent to the \"Nokia_Mobile\" theme.  Make sure only basic items are checked on like:  Logo, Search Box and Primary Links.  If the desktop logo is large, consider uploading a new smaller logo for mobile sites</li>\n\t<li>Next go to Admin -&gt; Site Building -&gt; Blocks.  Click on Nokia_Mobile\n\t<ol>\n\t\t<li>Choose only the bare minimum number of essential blocks to display</li>\n\t\t<li>In the Region column choose \"Content\" for all the essential blocks</li>\n\t\t<li>In the Region column choose \"none\" for all the non-essential blocks</li>\n\t\t<li>Change the weights to adjust the sequence of display</li>\n\t\t<li>For further refinements to display setting of a block, click on the \"configure\" link</li>\n\t\t<li>Finally Save Blocks configuration</li>\n\t</ol>\n\t</li>\n\t<li>Test the theme settings from a mobile device or you may test from a desktop using Firefox browser with <a href=\"http://chrispederick.com/work/user-agent-switcher/\">Agent User Switcher</a> extension.  Pay close attention to the primary menu, logo size, and content, to ensure good usability</li>\n</ol>\n\n<p> </p>\n",
      "changed": "2016-05-10T13:26:58+00:00",
      "created": "2011-03-10T15:28:40+00:00",
      "summary": "<p>Rich content of a Drupal website looks good on a large screen, but is, at best, difficult to read and use on a small screen of a smart phone. This article will describe a way to customize a drupal website so that it works well on both big and small screens.  Following a list of desired functionality:</p>\n\n<ol>\n\t<li>Ability to detect that a website is being accessed by a mobile device</li>\n\t<li>Switch to a \"mobile\" theme when access by mobile device is detected</li>\n\t<li>Administrative/developer tools to specify which content should be displayed and how when site is accessed by a mobile device. </li>\n</ol>\n\n<p>Two modules are required to achieve the desired functionality:  <a href=\"http://drupal.org/project/mobile_tools\">Mobile_tools</a> and <a href=\"http://drupal.org/project/browscap\">Browscap</a>.  In addition, a theme is required, we will choose Nokia_mobile.  Browscap provides the first functionality; Mobile_tools provides the second functionality; and <a href=\"http://drupal.org/project/nokia_mobile\">Nokia_mobile</a> provides the mobile theme and the third functionality. Install modules and themes using the normal drupal process, and enable them.  Next go to Admin -&gt; Site Configuration to configure the two modules:  </p>\n\n<ol>\n\t<li>Browscap has a single checkbox for \"Monitor Browsers.\"  It will monitor all user agents that visit the site</li>\n\t<li>Mobile_tools configuration.\n\t<ol>\n\t\t<li>General Configuration.  There are two options: Theme switching without redirection, and Redirection.  In both cases, this module detects if the request is coming from a mobile site.  This configuration is to setup the action after a mobile user has been detected.\n\t\t<ul>\n\t\t\t<li>In the first option, the theme of the website is changed to a specified mobile theme.  There is no redirection.</li>\n\t\t\t<li>In the second option, all mobile users will be redirected to a subdomain or domain that specifically hosts mobile pages of your website.  For example, if you want all your mobile users to use: m.mysite.com, then this option will redirect all mobile users that come to mysite.com to m.mysite.com</li>\n\t\t</ul>\n\t\t</li>\n\t\t<li>Extra.  In this section of configuration specify the landing page for a mobile user.  If your desktop website has a splashy frontpage with graphics, then you should specify an alternate page for the mobile user.  Another item that should be configured is the number of posts; by default it is set to 10, you may want to limit to 2.</li>\n\t</ol>\n\t</li>\n</ol>\n\n<p>In order to configure Nokia Mobile go to Admin -&gt; Site Building -&gt; Themes:</p>\n\n<ol>\n\t<li>On the Themes page, Enable Nokia_Mobile theme.  Save the configuration</li>\n\t<li>Click on the \"Configure\" link adjacent to the \"Nokia_Mobile\" theme.  Make sure only basic items are checked on like:  Logo, Search Box and Primary Links.  If the desktop logo is large, consider uploading a new smaller logo for mobile sites</li>\n\t<li>Next go to Admin -&gt; Site Building -&gt; Blocks.  Click on Nokia_Mobile\n\t<ol>\n\t\t<li>Choose only the bare minimum number of essential blocks to display</li>\n\t\t<li>In the Region column choose \"Content\" for all the essential blocks</li>\n\t\t<li>In the Region column choose \"none\" for all the non-essential blocks</li>\n\t\t<li>Change the weights to adjust the sequence of display</li>\n\t\t<li>For further refinements to display setting of a block, click on the \"configure\" link</li>\n\t\t<li>Finally Save Blocks configuration</li>\n\t</ol>\n\t</li>\n\t<li>Test the theme settings from a mobile device or you may test from a desktop using Firefox browser with <a href=\"http://chrispederick.com/work/user-agent-switcher/\">Agent User Switcher</a> extension.  Pay close attention to the primary menu, logo size, and content, to ensure good usability</li>\n</ol>\n\n<p> </p>\n",
      "field_tags": [
        {
          "id": "904e2ce8-1785-4627-b09b-5f5413331ec6",
          "tid": 17,
          "name": "mobile",
          "alias": "/term/mobile"
        },
        {
          "id": "bb928fcf-4bdb-437b-af95-4995c06bf871",
          "tid": 18,
          "name": "smart phones",
          "alias": "/term/smart-phones"
        },
        {
          "id": "95677187-8b96-492c-840d-d70a61c32f97",
          "tid": 36,
          "name": "android",
          "alias": "/term/android"
        },
        {
          "id": "d1c2a9ae-3995-460f-83b9-8ee046851443",
          "tid": 19,
          "name": "ios",
          "alias": "/term/ios"
        }
      ],
      "field_image": [
        {
          "id": "f76c6c70-aec8-4e56-9563-f0e786903e42",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_11.jpg",
          "fid": 43
        }
      ],
      "uid": {
        "id": "be429efe-e9f7-418a-9795-c17cc887a91f",
        "display_name": "Pramod Jain"
      }
    },
    {
      "title": "Adding Simple Payment Processing to Drupal Site",
      "nid": 29,
      "alias": "/article/adding-simple-payment-processing-drupal-site",
      "slug": "adding-simple-payment-processing-drupal-site",
      "body": "<p>I had a need to add simple payment processing to a Drupal website; I did not want to use <a href=\"Ubercart.org\" target=\"_blank\">Ubercart</a> or any other eCommerce modules, or <a href=\"civicrm.org\" target=\"_blank\">CiviCRM</a>.  Here were my basic requirements:</p>\n\n<ul>\n\t<li>Users register for a course using a web form page</li>\n\t<li>After registration user is taken to a payment page</li>\n\t<li>Payment is then processed by Paypal</li>\n\t<li>After payment is processed, user is directed back to the site</li>\n</ul>\n\n<p>In this simple payment processing example, I did not want any payment confirmation.  For example, if a user registers and then does not complete payment then in this simple method, there would be no automated check or flag; the admin would have to manually check and match the registration and payment records. In order to accomplish this, I looked at two modules: <a href=\"http://drupal.org/project/simple_paypal\">Simple_Paypal</a> and <a href=\"http://drupal.org/project/lm_paypal\">LM_Paypal</a>.  Simple_Paypal is till in test mode for Drupal 6, so it is not ready for deployment.  LM_Paypal was used for this example.  Following steps were used:</p>\n\n<ol>\n\t<li>Install lm_paypal module in normal location (/sites/all/modules/)</li>\n\t<li>Enable the module at http://mysite..../admin/build/modules</li>\n\t<li>Configure the module at http://mysite.../admin/settings/lm_paypal/settings</li>\n\t<li>The first field is LM PayPal Business/Premier Email:\n\t<ul>\n\t\t<li>Create an account with Paypal and use the email address registered with Paypal</li>\n\t</ul>\n\t</li>\n\t<li>Use default values for the next 2 fields.  Use the sandbox address while testing</li>\n\t<li>While testing check on the two checkboxes</li>\n\t<li>Last step in configuration is to go to http://mysite.../admin/settings/lm_paypal/donations_settings.  Here enter a URL; this URL is used by Paypal after the payment processing is complete.</li>\n\t<li>Next, we need to put a \"Pay\" link on a webpage.  Here is the code:</li>\n</ol>\n\n<p><code>'; // The amount is a one element array so an text input with the one value as // default // print 'Write your own amount to give, we suggest $5' . // lm_paypal_donate(array(5), 'USD', 'donation to example.com') . '<br />\n'; // The amount is a multi element array so a select will be used. Note if one // of the elements is itself an array that will be the default selection // The final two parameters are an alternative button (here we use the default) // and a replacement label before the amount // print 'We would really like a $10, or more, donation ' . // lm_paypal_donate(array(5,array(10),15), 'USD', 'donation to example.com', '', 'Donation') .'<br />\n'; } ?&gt;</code></p>\n\n<p>This completes the setup of simple payment processing.</p>\n",
      "changed": "2016-05-10T13:26:08+00:00",
      "created": "2011-04-14T21:35:18+00:00",
      "summary": "<p>I had a need to add simple payment processing to a Drupal website; I did not want to use <a href=\"Ubercart.org\" target=\"_blank\">Ubercart</a> or any other eCommerce modules, or <a href=\"civicrm.org\" target=\"_blank\">CiviCRM</a>.  Here were my basic requirements:</p>\n\n<ul>\n\t<li>Users register for a course using a web form page</li>\n\t<li>After registration user is taken to a payment page</li>\n\t<li>Payment is then processed by Paypal</li>\n\t<li>After payment is processed, user is directed back to the site</li>\n</ul>\n\n<p>In this simple payment processing example, I did not want any payment confirmation.  For example, if a user registers and then does not complete payment then in this simple method, there would be no automated check or flag; the admin would have to manually check and match the registration and payment records. In order to accomplish this, I looked at two modules: <a href=\"http://drupal.org/project/simple_paypal\">Simple_Paypal</a> and <a href=\"http://drupal.org/project/lm_paypal\">LM_Paypal</a>.  Simple_Paypal is till in test mode for Drupal 6, so it is not ready for deployment.  LM_Paypal was used for this example.  Following steps were used:</p>\n\n<ol>\n\t<li>Install lm_paypal module in normal location (/sites/all/modules/)</li>\n\t<li>Enable the module at http://mysite..../admin/build/modules</li>\n\t<li>Configure the module at http://mysite.../admin/settings/lm_paypal/settings</li>\n\t<li>The first field is LM PayPal Business/Premier Email:\n\t<ul>\n\t\t<li>Create an account with Paypal and use the email address registered with Paypal</li>\n\t</ul>\n\t</li>\n\t<li>Use default values for the next 2 fields.  Use the sandbox address while testing</li>\n\t<li>While testing check on the two checkboxes</li>\n\t<li>Last step in configuration is to go to http://mysite.../admin/settings/lm_paypal/donations_settings.  Here enter a URL; this URL is used by Paypal after the payment processing is complete.</li>\n\t<li>Next, we need to put a \"Pay\" link on a webpage.  Here is the code:</li>\n</ol>\n\n<p><code>'; // The amount is a one element array so an text input with the one value as // default // print 'Write your own amount to give, we suggest $5' . // lm_paypal_donate(array(5), 'USD', 'donation to example.com') . '<br />\n'; // The amount is a multi element array so a select will be used. Note if one // of the elements is itself an array that will be the default selection // The final two parameters are an alternative button (here we use the default) // and a replacement label before the amount // print 'We would really like a $10, or more, donation ' . // lm_paypal_donate(array(5,array(10),15), 'USD', 'donation to example.com', '', 'Donation') .'<br />\n'; } ?&gt;</code></p>\n\n<p>This completes the setup of simple payment processing.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "d006383f-8eaa-42ca-89a0-6258fbe9ed98",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/drupal_icon_02_by_steven07-d31pz7q_0.png",
          "fid": 39
        },
        {
          "id": "69815138-9bb1-41fd-8653-c7131e281e50",
          "alt": "civiCRM logo",
          "title": "civiCRM logo",
          "url": "/sites/default/files/field/image/CiviCRM_Logo.png",
          "fid": 40
        }
      ],
      "uid": {
        "id": "be429efe-e9f7-418a-9795-c17cc887a91f",
        "display_name": "Pramod Jain"
      }
    },
    {
      "title": "Developing your first iOS Application",
      "nid": 82,
      "alias": "/article/developing-your-first-ios-application",
      "slug": "developing-your-first-ios-application",
      "body": "<p class=\"MsoNormal\">Developing an iOS application may seem like a daunting task for one to complete, especially if you are not familiar with the Objective-C language and its syntax. However it’s actually not all that difficult to create a basic hello world like application with very little knowledge of the language. If you are familiar with the C programming language the code should look somewhat familiar. If you are at all familiar with programming and would like a crash course in the Objective-C language I have found a good one <a href=\"http://www.raywenderlich.com/21320/objectively-speaking-a-crash-course-in-objective-c-ios6\" target=\"_blank\" title=\"here\">here</a>. Since the IDE used to write the application only works on Macs you need to have one yourself or know someone who will lend you their computer to write the program. </p>\n\n<p class=\"MsoNormal\">The first step in creating the application is to launch Xcode. Once you have made it to the first screen you should click on create new Xcode project and then choose the “Empty Application” option and hit next. You can then fill in the various fields with information as you choose and once complete click next and tell Xcode where to store your project. After the program has loaded up your new application template you can try it out by clicking on the play button in the top left corner (or command + r).</p>\n\n<p class=\"MsoNormal\">The application will show up as a simple white screen since you have not written any code. Now that you have seen your application in action you will next create a new class file (command + n) and chose the Objective-C class. This file will be the view controller and this should be named like (Projecetname)ViewController and the UIViewController should be chosen from the subclass drop down menu. Before you hit next make sure the “With XIB for user interface” is checked. Xcode will now take you to the interface building tool.</p>\n\n<p class=\"MsoNormal\">In the bottom right corner you should see a list of available UI elements that can be added. Look for the button element and then click and drag the object onto the canvas where you’d like to place it. Once you have the button where you’d like it double-click on the button and change the label to something like “tap this”. Before the button can be displayed in the application a few lines a code must be written to link the new files you just made to the existing interface. The first line of code should be written after the other import statement in the AppDelegate.m file</p>\n\n<pre class=\"true; codetag\">\n    #import \"HelloWorldViewController.h\"\n</pre>\n\n<p class=\"MsoNormal\">Next add the following lines to the first method in the file after the “self.window.backgroundColor…” line:</p>\n\n<pre class=\"true; codetag\">\n    HelloWorldViewController *viewController = [[HelloWorldViewControlleralloc] initWithNibName:@\"HelloWorldViewController\"\n    bundle:nil]; self.window.rootViewController = viewController;\n</pre>\n\n<p>These lines of code have loaded the xib file and set it as the root view controller. If you try running your application now you should see the button on the screen, however we have not programmed any logic therefore nothing will happen if you tap on it.</p>\n\n<p>Now to it’s time to make the button preform an action when pressed. You will begin by adding the following line to the ViewController.h file just before the @end line:</p>\n\n<pre class=\"true; codetag\">\n    -(IBAction)showmessage;</pre>\n\n<p class=\"MsoNormal\">Next you will add the following lines to the ViewController.m file just before the @end:</p>\n\n<pre class=\"true; codetag\">\n    (IBAction)showmessage \n     {\n       UIAlertView *helloWorldAlert = [[UIAlert alloc] initWithTitle:@”My first App”\n       message:@”Hello, World!” delegate:nil cancelButtonTitle:@”OK” other\n       [helloWorldAlert show];\n     }\n</pre>\n\n<p class=\"MsoNormal\">The line of code in the header file is the method call. The IBAction is a property that marks a method as something that can have an action connected to it in the UI. In the second block of code a UIAlertView object is created and the fields are filled with appropriate strings (\"initWithTitle\" is the title of the alert, \"message\" is the message that will be displayed, etc.) The final line calls the show method so iOS displays the pop-up message.</p>\n\n<p><xml> <o documentproperties=\"\"> <o revision=\"\"> 0 </o> <o totaltime=\"\"> 0 </o> <o pages=\"\"> 1 </o> <o words=\"\"> 640 </o> <o characters=\"\"> 3653 </o> <o company=\"\"> Tcraw Inc </o> <o lines=\"\"> 30 </o> <o paragraphs=\"\"> 8 </o> <o characterswithspaces=\"\"> 4285 </o> <o version=\"\"> 14.0 </o> </o> <o officedocumentsettings=\"\"> <o allowpng=\"\"> </o> </o> </xml> <xml> <w worddocument=\"\"> <w view=\"\"> Normal </w> <w zoom=\"\"> 0 </w> <w trackmoves=\"\"> </w> <w trackformatting=\"\"> </w> <w punctuationkerning=\"\"> </w> <w validateagainstschemas=\"\"> </w> <w saveifxmlinvalid=\"\"> false </w> <w ignoremixedcontent=\"\"> false </w> <w alwaysshowplaceholdertext=\"\"> false </w> <w donotpromoteqf=\"\"> </w> <w lidthemeother=\"\"> EN-US </w> <w lidthemeasian=\"\"> JA </w> <w lidthemecomplexscript=\"\"> X-NONE </w> <w compatibility=\"\"> <w breakwrappedtables=\"\"> </w> <w snaptogridincell=\"\"> </w> <w wraptextwithpunct=\"\"> </w> <w useasianbreakrules=\"\"> </w> <w dontgrowautofit=\"\"> </w> <w splitpgbreakandparamark=\"\"> </w> <w enableopentypekerning=\"\"> </w> <w dontflipmirrorindents=\"\"> </w> <w overridetablestylehps=\"\"> </w> <w usefelayout=\"\"> </w> </w> <m mathpr=\"\"> <m mathfont=\"\" val=\"Cambria Math\"> </m> <m brkbin=\"\" val=\"before\"> </m> <m brkbinsub=\"\" val=\"--\"> </m> <m smallfrac=\"\" val=\"off\"> </m> <m dispdef=\"\"> </m> <m lmargin=\"\" val=\"0\"> </m> <m rmargin=\"\" val=\"0\"> </m> <m defjc=\"\" val=\"centerGroup\"> </m> <m val=\"1440\" wrapindent=\"\"> </m> <m intlim=\"\" val=\"subSup\"> </m> <m narylim=\"\" val=\"undOvr\"> </m> </m> </w> </xml> <xml> <w deflockedstate=\"false\" defpriority=\"99\" defqformat=\"false\" defsemihidden=\"true\" defunhidewhenused=\"true\" latentstylecount=\"276\" latentstyles=\"\"> <w locked=\"false\" lsdexception=\"\" name=\"Normal\" priority=\"0\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 1\" priority=\"9\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 2\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 3\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 4\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 5\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 6\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 7\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 8\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 9\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 1\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 2\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 3\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 4\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 5\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 6\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 7\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 8\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 9\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"caption\" priority=\"35\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Title\" priority=\"10\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Default Paragraph Font\" priority=\"1\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Subtitle\" priority=\"11\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Strong\" priority=\"22\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Emphasis\" priority=\"20\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Table Grid\" priority=\"59\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Placeholder Text\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"No Spacing\" priority=\"1\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 1\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 1\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 1\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 1\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 1\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 1\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Revision\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"List Paragraph\" priority=\"34\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Quote\" priority=\"29\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Intense Quote\" priority=\"30\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 1\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 1\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 1\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 1\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 1\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 1\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 1\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 1\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 2\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 2\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 2\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 2\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 2\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 2\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 2\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 2\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 2\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 2\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 2\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 2\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 2\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 2\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 3\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 3\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 3\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 3\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 3\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 3\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 3\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 3\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 3\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 3\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 3\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 3\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 3\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 3\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 4\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 4\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 4\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 4\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 4\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 4\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 4\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 4\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 4\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 4\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 4\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 4\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 4\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 4\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 5\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 5\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 5\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 5\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 5\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 5\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 5\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 5\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 5\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 5\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 5\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 5\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 5\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 5\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 6\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 6\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 6\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 6\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 6\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 6\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 6\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 6\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 6\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 6\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 6\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 6\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 6\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 6\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Subtle Emphasis\" priority=\"19\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Intense Emphasis\" priority=\"21\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Subtle Reference\" priority=\"31\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Intense Reference\" priority=\"32\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Book Title\" priority=\"33\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Bibliography\" priority=\"37\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"TOC Heading\" priority=\"39\" qformat=\"true\"> </w> </w> </xml> /* Style Definitions */ table.MsoNormalTable {mso-style-name:\"Table Normal\"; mso-tstyle-rowband-size:0; mso-tstyle-colband-size:0; mso-style-noshow:yes; mso-style-priority:99; mso-style-parent:\"\"; mso-padding-alt:0in 5.4pt 0in 5.4pt; mso-para-margin:0in; mso-para-margin-bottom:.0001pt; mso-pagination:widow-orphan; font-size:12.0pt; font-family:Cambria; mso-ascii-font-family:Cambria; mso-ascii-theme-font:minor-latin; mso-hansi-font-family:Cambria; mso-hansi-theme-font:minor-latin;} <!--StartFragment--> <!--EndFragment--></p>\n\n<p class=\"MsoNormal\">The only thing left to do is establish a connection between the button you made earlier and the show message method. Open the ViewController.xib file and press and hold the command key. Next click on the button and drag your cursor to the File’s Owner item in the left-side panel. Once you let go click on the showMessage option. Now you can compile and run (command + r) the application one more time and this time the application should be fully functioning.</p>\n\n<p class=\"MsoNormal\"><img alt=\"Hello World\" src=\"http://i.imgur.com/k27EOlQ.png\" /></p>\n",
      "changed": "2016-05-10T13:25:40+00:00",
      "created": "2014-07-28T20:04:50+00:00",
      "summary": "<p class=\"MsoNormal\">Developing an iOS application may seem like a daunting task for one to complete, especially if you are not familiar with the Objective-C language and its syntax. However it’s actually not all that difficult to create a basic hello world like application with very little knowledge of the language. If you are familiar with the C programming language the code should look somewhat familiar. If you are at all familiar with programming and would like a crash course in the Objective-C language I have found a good one <a href=\"http://www.raywenderlich.com/21320/objectively-speaking-a-crash-course-in-objective-c-ios6\" target=\"_blank\" title=\"here\">here</a>. Since the IDE used to write the application only works on Macs you need to have one yourself or know someone who will lend you their computer to write the program. </p>\n\n<p class=\"MsoNormal\">The first step in creating the application is to launch Xcode. Once you have made it to the first screen you should click on create new Xcode project and then choose the “Empty Application” option and hit next. You can then fill in the various fields with information as you choose and once complete click next and tell Xcode where to store your project. After the program has loaded up your new application template you can try it out by clicking on the play button in the top left corner (or command + r).</p>\n\n<p class=\"MsoNormal\">The application will show up as a simple white screen since you have not written any code. Now that you have seen your application in action you will next create a new class file (command + n) and chose the Objective-C class. This file will be the view controller and this should be named like (Projecetname)ViewController and the UIViewController should be chosen from the subclass drop down menu. Before you hit next make sure the “With XIB for user interface” is checked. Xcode will now take you to the interface building tool.</p>\n\n<p class=\"MsoNormal\">In the bottom right corner you should see a list of available UI elements that can be added. Look for the button element and then click and drag the object onto the canvas where you’d like to place it. Once you have the button where you’d like it double-click on the button and change the label to something like “tap this”. Before the button can be displayed in the application a few lines a code must be written to link the new files you just made to the existing interface. The first line of code should be written after the other import statement in the AppDelegate.m file</p>\n\n<pre class=\"true; codetag\">\n    #import \"HelloWorldViewController.h\"\n</pre>\n\n<p class=\"MsoNormal\">Next add the following lines to the first method in the file after the “self.window.backgroundColor…” line:</p>\n\n<pre class=\"true; codetag\">\n    HelloWorldViewController *viewController = [[HelloWorldViewControlleralloc] initWithNibName:@\"HelloWorldViewController\"\n    bundle:nil]; self.window.rootViewController = viewController;\n</pre>\n\n<p>These lines of code have loaded the xib file and set it as the root view controller. If you try running your application now you should see the button on the screen, however we have not programmed any logic therefore nothing will happen if you tap on it.</p>\n\n<p>Now to it’s time to make the button preform an action when pressed. You will begin by adding the following line to the ViewController.h file just before the @end line:</p>\n\n<pre class=\"true; codetag\">\n    -(IBAction)showmessage;</pre>\n\n<p class=\"MsoNormal\">Next you will add the following lines to the ViewController.m file just before the @end:</p>\n\n<pre class=\"true; codetag\">\n    (IBAction)showmessage \n     {\n       UIAlertView *helloWorldAlert = [[UIAlert alloc] initWithTitle:@”My first App”\n       message:@”Hello, World!” delegate:nil cancelButtonTitle:@”OK” other\n       [helloWorldAlert show];\n     }\n</pre>\n\n<p class=\"MsoNormal\">The line of code in the header file is the method call. The IBAction is a property that marks a method as something that can have an action connected to it in the UI. In the second block of code a UIAlertView object is created and the fields are filled with appropriate strings (\"initWithTitle\" is the title of the alert, \"message\" is the message that will be displayed, etc.) The final line calls the show method so iOS displays the pop-up message.</p>\n\n<p><xml> <o documentproperties=\"\"> <o revision=\"\"> 0 </o> <o totaltime=\"\"> 0 </o> <o pages=\"\"> 1 </o> <o words=\"\"> 640 </o> <o characters=\"\"> 3653 </o> <o company=\"\"> Tcraw Inc </o> <o lines=\"\"> 30 </o> <o paragraphs=\"\"> 8 </o> <o characterswithspaces=\"\"> 4285 </o> <o version=\"\"> 14.0 </o> </o> <o officedocumentsettings=\"\"> <o allowpng=\"\"> </o> </o> </xml> <xml> <w worddocument=\"\"> <w view=\"\"> Normal </w> <w zoom=\"\"> 0 </w> <w trackmoves=\"\"> </w> <w trackformatting=\"\"> </w> <w punctuationkerning=\"\"> </w> <w validateagainstschemas=\"\"> </w> <w saveifxmlinvalid=\"\"> false </w> <w ignoremixedcontent=\"\"> false </w> <w alwaysshowplaceholdertext=\"\"> false </w> <w donotpromoteqf=\"\"> </w> <w lidthemeother=\"\"> EN-US </w> <w lidthemeasian=\"\"> JA </w> <w lidthemecomplexscript=\"\"> X-NONE </w> <w compatibility=\"\"> <w breakwrappedtables=\"\"> </w> <w snaptogridincell=\"\"> </w> <w wraptextwithpunct=\"\"> </w> <w useasianbreakrules=\"\"> </w> <w dontgrowautofit=\"\"> </w> <w splitpgbreakandparamark=\"\"> </w> <w enableopentypekerning=\"\"> </w> <w dontflipmirrorindents=\"\"> </w> <w overridetablestylehps=\"\"> </w> <w usefelayout=\"\"> </w> </w> <m mathpr=\"\"> <m mathfont=\"\" val=\"Cambria Math\"> </m> <m brkbin=\"\" val=\"before\"> </m> <m brkbinsub=\"\" val=\"--\"> </m> <m smallfrac=\"\" val=\"off\"> </m> <m dispdef=\"\"> </m> <m lmargin=\"\" val=\"0\"> </m> <m rmargin=\"\" val=\"0\"> </m> <m defjc=\"\" val=\"centerGroup\"> </m> <m val=\"1440\" wrapindent=\"\"> </m> <m intlim=\"\" val=\"subSup\"> </m> <m narylim=\"\" val=\"undOvr\"> </m> </m> </w> </xml> <xml> <w deflockedstate=\"false\" defpriority=\"99\" defqformat=\"false\" defsemihidden=\"true\" defunhidewhenused=\"true\" latentstylecount=\"276\" latentstyles=\"\"> <w locked=\"false\" lsdexception=\"\" name=\"Normal\" priority=\"0\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 1\" priority=\"9\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 2\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 3\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 4\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 5\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 6\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 7\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 8\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"heading 9\" priority=\"9\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 1\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 2\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 3\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 4\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 5\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 6\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 7\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 8\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"toc 9\" priority=\"39\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"caption\" priority=\"35\" qformat=\"true\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Title\" priority=\"10\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Default Paragraph Font\" priority=\"1\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Subtitle\" priority=\"11\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Strong\" priority=\"22\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Emphasis\" priority=\"20\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Table Grid\" priority=\"59\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Placeholder Text\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"No Spacing\" priority=\"1\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 1\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 1\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 1\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 1\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 1\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 1\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Revision\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"List Paragraph\" priority=\"34\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Quote\" priority=\"29\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Intense Quote\" priority=\"30\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 1\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 1\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 1\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 1\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 1\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 1\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 1\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 1\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 2\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 2\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 2\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 2\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 2\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 2\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 2\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 2\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 2\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 2\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 2\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 2\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 2\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 2\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 3\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 3\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 3\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 3\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 3\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 3\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 3\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 3\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 3\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 3\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 3\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 3\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 3\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 3\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 4\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 4\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 4\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 4\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 4\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 4\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 4\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 4\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 4\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 4\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 4\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 4\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 4\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 4\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 5\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 5\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 5\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 5\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 5\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 5\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 5\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 5\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 5\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 5\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 5\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 5\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 5\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 5\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Shading Accent 6\" priority=\"60\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light List Accent 6\" priority=\"61\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Light Grid Accent 6\" priority=\"62\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 1 Accent 6\" priority=\"63\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Shading 2 Accent 6\" priority=\"64\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 1 Accent 6\" priority=\"65\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium List 2 Accent 6\" priority=\"66\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 1 Accent 6\" priority=\"67\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 2 Accent 6\" priority=\"68\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Medium Grid 3 Accent 6\" priority=\"69\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Dark List Accent 6\" priority=\"70\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Shading Accent 6\" priority=\"71\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful List Accent 6\" priority=\"72\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Colorful Grid Accent 6\" priority=\"73\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Subtle Emphasis\" priority=\"19\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Intense Emphasis\" priority=\"21\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Subtle Reference\" priority=\"31\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Intense Reference\" priority=\"32\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Book Title\" priority=\"33\" qformat=\"true\" semihidden=\"false\" unhidewhenused=\"false\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"Bibliography\" priority=\"37\"> </w> <w locked=\"false\" lsdexception=\"\" name=\"TOC Heading\" priority=\"39\" qformat=\"true\"> </w> </w> </xml> /* Style Definitions */ table.MsoNormalTable {mso-style-name:\"Table Normal\"; mso-tstyle-rowband-size:0; mso-tstyle-colband-size:0; mso-style-noshow:yes; mso-style-priority:99; mso-style-parent:\"\"; mso-padding-alt:0in 5.4pt 0in 5.4pt; mso-para-margin:0in; mso-para-margin-bottom:.0001pt; mso-pagination:widow-orphan; font-size:12.0pt; font-family:Cambria; mso-ascii-font-family:Cambria; mso-ascii-theme-font:minor-latin; mso-hansi-font-family:Cambria; mso-hansi-theme-font:minor-latin;} <!--StartFragment--> <!--EndFragment--></p>\n\n<p class=\"MsoNormal\">The only thing left to do is establish a connection between the button you made earlier and the show message method. Open the ViewController.xib file and press and hold the command key. Next click on the button and drag your cursor to the File’s Owner item in the left-side panel. Once you let go click on the showMessage option. Now you can compile and run (command + r) the application one more time and this time the application should be fully functioning.</p>\n\n<p class=\"MsoNormal\"><img alt=\"Hello World\" src=\"http://i.imgur.com/k27EOlQ.png\" /></p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "d1c2a9ae-3995-460f-83b9-8ee046851443",
          "tid": 19,
          "name": "ios",
          "alias": "/term/ios"
        },
        {
          "id": "779d623a-0cc1-4458-8e1a-84be0f8a79d8",
          "tid": 74,
          "name": "objective-c",
          "alias": "/term/objective-c"
        }
      ],
      "field_image": [
        {
          "id": "b714f50d-d811-46d0-a368-775281063fe3",
          "alt": "xcode logo",
          "title": "xcode logo",
          "url": "/sites/default/files/field/image/tumblr_m5bvsxASUx1ql8frk.png",
          "fid": 102
        }
      ],
      "uid": {
        "id": "98695740-449a-40fb-85f1-4ad13e3633c6",
        "uid": 33,
        "display_name": "Christian Crawford",
        "name": "Christian Crawford",
        "bio": "<ul>\n\t<li>Drupal 7 &amp; 8 site building, module development, theming</li>\n\t<li>Java and C</li>\n\t<li>SQL (MySQL and Oracle), NoSQL (MongoDB)</li>\n\t<li>HTML, CSS, SASS/LESS</li>\n\t<li>ReactJS, AngularJS, jQuery, NodeJS, ES6</li>\n\t<li>Nginx and Apache Stacks</li>\n</ul>",
        "alias": "/user/christian-crawford"
      }
    },
    {
      "title": "MySQL Server has gone away!",
      "nid": 49,
      "alias": "/article/mysql-server-has-gone-away",
      "slug": "mysql-server-has-gone-away",
      "body": "<p>While using or coding Drupal, if you come across an error to the effect \"mysql server has gone away\", right in the middle of a request, you may need to do the following.</p>\n\n<p>Find the my.ini file under MySQL server installation directory (mine is under \"data\" subdirectory), and in the \"[mysqld]\" section add the following line (or replace the value if it already exists):</p>\n\n<p><code>max_allowed_packet=16M</code></p>\n\n<p>Now restart MySQL server and try again. It should work. If it doesn't, try a value higher than 16M.</p>\n",
      "changed": "2016-05-10T13:25:21+00:00",
      "created": "2012-09-21T17:45:15+00:00",
      "summary": "<p>While using or coding Drupal, if you come across an error to the effect \"mysql server has gone away\", right in the middle of a request, you may need to do the following.</p>\n\n<p>Find the my.ini file under MySQL server installation directory (mine is under \"data\" subdirectory), and in the \"[mysqld]\" section add the following line (or replace the value if it already exists):</p>\n\n<p><code>max_allowed_packet=16M</code></p>\n\n<p>Now restart MySQL server and try again. It should work. If it doesn't, try a value higher than 16M.</p>\n",
      "field_tags": [
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "18b7f0a8-d5ee-4328-abc8-93471c27be8f",
          "tid": 33,
          "name": "mysql",
          "alias": "/term/mysql"
        },
        {
          "id": "0367a022-7f97-44d2-9c8e-0918a2a2ab75",
          "tid": 34,
          "name": "php",
          "alias": "/term/php"
        }
      ],
      "field_image": [
        {
          "id": "562fc705-c932-41cb-9797-6caeef74736f",
          "alt": "MySQL logo",
          "title": "MySQL logo",
          "url": "/sites/default/files/field/image/images_16.jpg",
          "fid": 61
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "RESTfully creating a repository in BitBucket.org",
      "nid": 66,
      "alias": "/article/restfully-creating-repository-bitbucketorg",
      "slug": "restfully-creating-repository-bitbucketorg",
      "body": "<p>Creating a  Git repository is simple, using the excellent <a href=\"http://bitbucket.org/\">BitBucket.org</a> service. It can be a chore to go to the bitbucket website and manually creating new repositories every time, though. Since it is bitbucket, and Atlassian, they have exposed a very nice RESTful API on top their service offering. Below is an example of how to create a new repository from 'curl' command-line ...</p>\n\n<pre class=\"true; codetag\">\n curl --user login:pass https://api.bitbucket.org/1.0/repositories/ --data name=REPO_NAME </pre>\n\n<p>The above creates a 'public' repository. If you want a 'private' repository, then just add --data is_private='true'. Like this ...</p>\n\n<pre class=\"true; codetag\">\n curl --user login:pass https://api.bitbucket.org/1.0/repositories/ --data name=REPO_NAME --data is_private=true </pre>\n\n<p>(source: <a href=\"http://stackoverflow.com/questions/13788485/create-new-repo-on-bitbucket-from-git\">http://stackoverflow.com/questions/13788485/create-new-repo-on-bitbucket-from-git</a>)</p>\n\n<p> </p>\n",
      "changed": "2016-05-10T13:24:44+00:00",
      "created": "2013-06-02T16:01:21+00:00",
      "summary": "<p>Creating a  Git repository is simple, using the excellent <a href=\"http://bitbucket.org/\">BitBucket.org</a> service. It can be a chore to go to the bitbucket website and manually creating new repositories every time, though. Since it is bitbucket, and Atlassian, they have exposed a very nice RESTful API on top their service offering. Below is an example of how to create a new repository from 'curl' command-line ...</p>\n\n<pre class=\"true; codetag\">\n curl --user login:pass https://api.bitbucket.org/1.0/repositories/ --data name=REPO_NAME </pre>\n\n<p>The above creates a 'public' repository. If you want a 'private' repository, then just add --data is_private='true'. Like this ...</p>\n\n<pre class=\"true; codetag\">\n curl --user login:pass https://api.bitbucket.org/1.0/repositories/ --data name=REPO_NAME --data is_private=true </pre>\n\n<p>(source: <a href=\"http://stackoverflow.com/questions/13788485/create-new-repo-on-bitbucket-from-git\">http://stackoverflow.com/questions/13788485/create-new-repo-on-bitbucket-from-git</a>)</p>\n\n<p> </p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "cbe76345-284a-4a7f-89f1-aa69376593b1",
          "tid": 6,
          "name": "git",
          "alias": "/term/git"
        },
        {
          "id": "af270761-7619-418c-8df5-fd33314fcce7",
          "tid": 52,
          "name": "api",
          "alias": "/term/api"
        },
        {
          "id": "f952265e-4548-41f5-ab66-4c34bf31b62d",
          "tid": 53,
          "name": "version control",
          "alias": "/term/version-control"
        }
      ],
      "field_image": [
        {
          "id": "1bfb95c3-a402-43c6-84bc-db5b333d7d8c",
          "alt": "Bitbucket Atlassian logo",
          "title": "Bitbucket Atlassian logo",
          "url": "/sites/default/files/field/image/images_24.jpg",
          "fid": 81
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "How Drupal can cut time and cost for Enterprise Applications",
      "nid": 34,
      "alias": "/article/how-drupal-can-cut-time-and-cost-enterprise-applications",
      "slug": "how-drupal-can-cut-time-and-cost-enterprise-applications",
      "body": "<p>When I first discovered Drupal, I thought it was a very usable CMS (Content Management System) for building dynamic websites. I discovered that it was even truer than I had first thought. Drupal does an excellent job as a CMS. The multitude of modules the <a href=\"http://drupal.org/projects\" target=\"_blank\">Drupal ecosystem</a> provides is amazing. But then I discovered something even better - these modules can be combined to create very powerful applications with complex data models, workflows and screenflows. And when no module provides exactly what you need, you can write your own modules with minimal difficulty. And as I started writing my own Drupal modules, I discovered how powerful and well thought-out the Drupal architecture is. New modules can change the face (and function) of Drupal almost beyond recognition without changing a single line of code in the existing modules. The <a href=\"http://api.drupal.org/api/drupal/includes--module.inc/group/hooks/6\" target=\"_blank\">hook system</a> of Drupal allows you to insert/append your own functions at almost any point in the processing. This gives you a way of manipulating Drupal's behavior in a very non-intrusive manner. The result of all this is that Drupal-based enterprise application development cuts time and cost in a big way. Let me repeat that, because it's worth repeating - <strong>Drupal-based enterprise application development cuts time and cost in a BIG way</strong>.</p>\n\n<ul>\n\t<li>To begin with, Drupal core provides a huge amount of functionality that almost all typical web-applications need. In Drupal 6, you had to use CCK to build your own content types from the browser UI. But with Drupal 7, even that has now been moved into the core - in a very elegant manner.</li>\n\t<li>The great number, variety and quality of <a href=\"http://drupal.org/projects\" target=\"_blank\">Drupal modules</a> provides for most other needs that most web-applications have. You don't have to include them all. Just take what you need.</li>\n\t<li>And finally, writing your own modules using <a href=\"http://api.drupal.org/api/drupal/includes--module.inc/group/hooks/6\" target=\"_blank\">Drupal API and hooks</a> allows you to add the functionality that is specific to your application.</li>\n</ul>\n\n<p>Now, the seasoned IT Pros among you might snicker a bit since you have probably heard this pitch before. There have been hundreds of web-application development frameworks or platforms or libraries that were supposed to have solved the problem of writing web-applications. But Drupal is all of those, plus a fully functioning CMS right out of the box. It actually is quite surprising that this kind of innovation didn't come from other well-entrenched web-application technologies first (such as Java and .Net). To be sure, they are watching the success of Drupal and trying to emulate it with their own similar systems. But at this point, they are far behind. So in the meanwhile, we have Drupal.</p>\n\n<p>SpinSpire has the expertise and the experience to quickly understand your enterprise application needs, turn them into requirements, and come up with a functional design. And once that is done, converting that into a robust, working application is made quite manageable (I won't say <em>easy</em>) by Drupal. So <a href=\"/contact\">contact us and ask us</a> how we can help.</p>\n",
      "changed": "2016-05-10T13:23:42+00:00",
      "created": "2011-03-06T20:49:20+00:00",
      "summary": "<p>When I first discovered Drupal, I thought it was a very usable CMS (Content Management System) for building dynamic websites. I discovered that it was even truer than I had first thought. Drupal does an excellent job as a CMS. The multitude of modules the <a href=\"http://drupal.org/projects\" target=\"_blank\">Drupal ecosystem</a> provides is amazing. But then I discovered something even better - these modules can be combined to create very powerful applications with complex data models, workflows and screenflows. And when no module provides exactly what you need, you can write your own modules with minimal difficulty. And as I started writing my own Drupal modules, I discovered how powerful and well thought-out the Drupal architecture is. New modules can change the face (and function) of Drupal almost beyond recognition without changing a single line of code in the existing modules. The <a href=\"http://api.drupal.org/api/drupal/includes--module.inc/group/hooks/6\" target=\"_blank\">hook system</a> of Drupal allows you to insert/append your own functions at almost any point in the processing. This gives you a way of manipulating Drupal's behavior in a very non-intrusive manner. The result of all this is that Drupal-based enterprise application development cuts time and cost in a big way. Let me repeat that, because it's worth repeating - <strong>Drupal-based enterprise application development cuts time and cost in a BIG way</strong>.</p>\n\n<ul>\n\t<li>To begin with, Drupal core provides a huge amount of functionality that almost all typical web-applications need. In Drupal 6, you had to use CCK to build your own content types from the browser UI. But with Drupal 7, even that has now been moved into the core - in a very elegant manner.</li>\n\t<li>The great number, variety and quality of <a href=\"http://drupal.org/projects\" target=\"_blank\">Drupal modules</a> provides for most other needs that most web-applications have. You don't have to include them all. Just take what you need.</li>\n\t<li>And finally, writing your own modules using <a href=\"http://api.drupal.org/api/drupal/includes--module.inc/group/hooks/6\" target=\"_blank\">Drupal API and hooks</a> allows you to add the functionality that is specific to your application.</li>\n</ul>\n\n<p>Now, the seasoned IT Pros among you might snicker a bit since you have probably heard this pitch before. There have been hundreds of web-application development frameworks or platforms or libraries that were supposed to have solved the problem of writing web-applications. But Drupal is all of those, plus a fully functioning CMS right out of the box. It actually is quite surprising that this kind of innovation didn't come from other well-entrenched web-application technologies first (such as Java and .Net). To be sure, they are watching the success of Drupal and trying to emulate it with their own similar systems. But at this point, they are far behind. So in the meanwhile, we have Drupal.</p>\n\n<p>SpinSpire has the expertise and the experience to quickly understand your enterprise application needs, turn them into requirements, and come up with a functional design. And once that is done, converting that into a robust, working application is made quite manageable (I won't say <em>easy</em>) by Drupal. So <a href=\"/contact\">contact us and ask us</a> how we can help.</p>\n",
      "field_tags": [
        {
          "id": "8d280257-35a0-4178-8130-f9560a00bc8f",
          "tid": 20,
          "name": "enterprise",
          "alias": "/term/enterprise"
        },
        {
          "id": "d83d05a0-c509-4b6c-84ca-bd12aac26c2f",
          "tid": 21,
          "name": "value proposition",
          "alias": "/term/value-proposition"
        }
      ],
      "field_image": [
        {
          "id": "5bb75983-4a59-49de-adfe-797da31b987b",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_12.jpg",
          "fid": 44
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "installing git-flow on Ubuntu Linux",
      "nid": 14,
      "alias": "/article/installing-git-flow-ubuntu-linux",
      "slug": "installing-git-flow-ubuntu-linux",
      "body": "<p>If you have heard of Git Flow, and you use <a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=8&amp;cad=rja&amp;ved=0CFIQFjAH&amp;url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FUbuntu_(operating_system)&amp;ei=nhC6Uer2L5LK9QSujIDgCA&amp;usg=AFQjCNFuFteYOyueC5-YxZRcJlWgptUkGg&amp;sig2=qw6efgN3B206CV_MP5tAHA&amp;bvm=bv.47883778,d.eWU\" target=\"_blank\">Ubunut Linux</a>, then you can install it using the following instructions.</p>\n\n<p>Download the latest .deb package file from <a href=\"https://launchpad.net/ubuntu/precise/i386/git-flow/\">https://launchpad.net/ubuntu/precise/i386/git-flow/</a>, and then install it thus ...</p>\n\n<pre>\n<code>wget -P ~/Downloads http://launchpadlibrarian.net/84618376/git-flow_0.4.1-2_all.deb\n sudo dpkg -i ~/Downloads/git-flow_0.4.1-2_all.deb</code></pre>\n\n<p>If you haven't heard of Git Flow, then read all about it at http://nvie.com/posts/a-successful-git-branching-model/. If you haven't heard of Git, then you're either not a developer (in that case, ignore it), or you need to <a href=\"http://www.google.com/?q=git\">Google it.</a></p>\n",
      "changed": "2016-05-10T13:22:59+00:00",
      "created": "2012-03-16T01:31:15+00:00",
      "summary": "<p>If you have heard of Git Flow, and you use <a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=8&amp;cad=rja&amp;ved=0CFIQFjAH&amp;url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FUbuntu_(operating_system)&amp;ei=nhC6Uer2L5LK9QSujIDgCA&amp;usg=AFQjCNFuFteYOyueC5-YxZRcJlWgptUkGg&amp;sig2=qw6efgN3B206CV_MP5tAHA&amp;bvm=bv.47883778,d.eWU\" target=\"_blank\">Ubunut Linux</a>, then you can install it using the following instructions.</p>\n\n<p>Download the latest .deb package file from <a href=\"https://launchpad.net/ubuntu/precise/i386/git-flow/\">https://launchpad.net/ubuntu/precise/i386/git-flow/</a>, and then install it thus ...</p>\n\n<pre>\n<code>wget -P ~/Downloads http://launchpadlibrarian.net/84618376/git-flow_0.4.1-2_all.deb\n sudo dpkg -i ~/Downloads/git-flow_0.4.1-2_all.deb</code></pre>\n\n<p>If you haven't heard of Git Flow, then read all about it at http://nvie.com/posts/a-successful-git-branching-model/. If you haven't heard of Git, then you're either not a developer (in that case, ignore it), or you need to <a href=\"http://www.google.com/?q=git\">Google it.</a></p>\n",
      "field_tags": [
        {
          "id": "cbe76345-284a-4a7f-89f1-aa69376593b1",
          "tid": 6,
          "name": "git",
          "alias": "/term/git"
        },
        {
          "id": "e003f77f-7f1b-42f9-bdaa-3213082f63f3",
          "tid": 7,
          "name": "linux",
          "alias": "/term/linux"
        },
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "ffe2c15c-4e3b-4252-b953-e7eb9fc7ea82",
          "alt": "Ubuntu logo",
          "title": "Ubuntu logo",
          "url": "/sites/default/files/field/image/images_2.jpg",
          "fid": 24
        },
        {
          "id": "a3d2fd39-477b-4cba-b36b-58fe989b3d77",
          "alt": "Git logo",
          "title": "Git logo",
          "url": "/sites/default/files/field/image/images_3.jpg",
          "fid": 25
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "change default comment color in vim",
      "nid": 68,
      "alias": "/article/change-default-comment-color-vim",
      "slug": "change-default-comment-color-vim",
      "body": "<p>On Debian systems (and perhaps on other linux distros as well), the foreground color of comments is blue by default. This looks quite unreadable on black background, which is the case for most terminal windows.</p>\n\n<p><img alt=\"dark blue text  unreadable in black background\" height=\"176\" src=\"/sites/spinspire.com/files/field/image/spvm%20-%20PuTTY_2013-06-09_15-43-51.png\" title=\"dark blue text  unreadable in black background\" width=\"531\" /></p>\n\n<p>As you can see, the above is quite unreadable. But the fix is quite simple. Let's say you want to make all comments show in 'green' instead. Just add the following line to your <code>~/.vimrc</code> (or <code>/etc/vim/vimrc.local</code> if you want to change it for everyone on your linux box).</p>\n\n<p><code>highlight Comment ctermfg=green</code></p>\n\n<p>Now the colors look far more readable. See below.</p>\n\n<p><img alt=\"green text readable in black background\" height=\"176\" src=\"/sites/spinspire.com/files/field/image/spvm%20-%20PuTTY_2013-06-09_15-55-28.png\" title=\"green text readable in black background\" width=\"531\" /></p>\n",
      "changed": "2016-05-10T13:22:36+00:00",
      "created": "2013-04-09T19:56:44+00:00",
      "summary": "<p>On Debian systems (and perhaps on other linux distros as well), the foreground color of comments is blue by default. This looks quite unreadable on black background, which is the case for most terminal windows.</p>\n\n<p><img alt=\"dark blue text  unreadable in black background\" height=\"176\" src=\"/sites/spinspire.com/files/field/image/spvm%20-%20PuTTY_2013-06-09_15-43-51.png\" title=\"dark blue text  unreadable in black background\" width=\"531\" /></p>\n\n<p>As you can see, the above is quite unreadable. But the fix is quite simple. Let's say you want to make all comments show in 'green' instead. Just add the following line to your <code>~/.vimrc</code> (or <code>/etc/vim/vimrc.local</code> if you want to change it for everyone on your linux box).</p>\n\n<p><code>highlight Comment ctermfg=green</code></p>\n\n<p>Now the colors look far more readable. See below.</p>\n\n<p><img alt=\"green text readable in black background\" height=\"176\" src=\"/sites/spinspire.com/files/field/image/spvm%20-%20PuTTY_2013-06-09_15-55-28.png\" title=\"green text readable in black background\" width=\"531\" /></p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "fbc4b85b-7272-4bd6-a3ac-050751ac3d2f",
          "alt": "dark blue text unreadable in black background",
          "title": "dark blue text unreadable in black background",
          "url": "/sites/default/files/field/image/spvm%20-%20PuTTY_2013-06-09_15-43-51.png",
          "fid": 83
        },
        {
          "id": "2b987955-9dc7-42eb-8d7e-b5d75f4175c0",
          "alt": "green text readable in black background",
          "title": "green text readable in black background",
          "url": "/sites/default/files/field/image/spvm%20-%20PuTTY_2013-06-09_15-55-28.png",
          "fid": 84
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Automatic Drupal site deployment with git",
      "nid": 15,
      "alias": "/article/automatic-drupal-site-deployment-git",
      "slug": "automatic-drupal-site-deployment-git",
      "body": "<p>In this article I will show how to setup git and Drupal in such a way that you can keep editing your site's modules, themes and libraries on your local machines and every time to do 'git push' it automatically deploys to your pubilc Drupal site - without having to login into your webhosting provider and doing checkout/reset on your working tree.</p>\n\n<p>Assumptions</p>\n\n<ol>\n\t<li>You're using Git for version control and Drupal for site hosting.</li>\n\t<li>You're hosted in a place where you have ssh access and git installed on the server.</li>\n\t<li>You already know the basics of Git and Drupal.</li>\n</ol>\n\n<p>Setup</p>\n\n<ol>\n\t<li>Your site is example.com hosted on a remote server (Linux).</li>\n\t<li>Your Drupal site directory on the remote server is ~/drupal/sites/example.com.</li>\n\t<li>You have some modules/themes/libraries etc. in ~/drupal/sites/example.com.</li>\n</ol>\n\n<p>Steps</p>\n\n<p>On remote server:</p>\n\n<blockquote>\n<p>cd &lt;drupal-root&gt;/sites/example.com<br />\ngit init</p>\n</blockquote>\n\n<p>This turns your site-dir into a git repository and a git working directory (non-bare). Now on your local machine:</p>\n\n<blockquote>\n<p>git clone ssh-username@example.com:~/drupal/sites/example.com</p>\n</blockquote>\n\n<p>Make some code changes, commit locally, and then try to push.</p>\n\n<blockquote>\n<p>... make changes ...<br />\ngit commit -am'your commit message'<br />\ngit push</p>\n</blockquote>\n\n<p>Oops! Push is rejected, with a bad error message. That's because a non-bare Git repository does not accept pushes automatically. To fix that do this on remote server (git repo:</p>\n\n<blockquote>\n<p>cd ~/drupal/sites/example.com<br />\ngit config<br />\ngit config receive.denyCurrentBranch ignore</p>\n</blockquote>\n\n<p>Now push again. On local machine:</p>\n\n<blockquote>\n<p>git push</p>\n</blockquote>\n\n<p>It should work this time. Now your remote repository has your changes, but those changes are sitting in the repository database, not in the working directory. For automatic deployment, you need every push from local machine to also cause the server to update the working directory.</p>\n\n<p>That is where Git hooks come in. One of the Git hooks is post-receive hook. It executes every time a push is accepted. On the remote server, put the following in ~/drupal/sites/example.com/.git/hooks/post-receive</p>\n\n<pre class=\"true; codetag\">\n#!/bin/sh\n\n# all hook scripts start out in repo-dir/.git, so cd to repo-dir\ncd ..\n\n# set the directory that contains git metadata\nGIT_DIR='.git'\n \n# protect files before creating them and then to reset --hard to checkout\numask 002 &amp;&amp; git reset --hard\n\n# now clear Drupal cache\nexport DRUSH_PHP=/usr/local/bin/php5\n~/drush/drush cc all </pre>\n\n<p>In the above script we are checking out the files in the working directory (Drupal site-dir) and then clearing Drupal cache using Drush. That last step is optional, in case you prefer clearing cache from browser UI.</p>\n\n<div>That's it. From here on, you can make changes to your local Git repository and every time you do git push, your changes are reflected in the live site (remote git repository).</div>\n",
      "changed": "2016-05-10T13:21:40+00:00",
      "created": "2012-02-18T14:51:10+00:00",
      "summary": "<p>In this article I will show how to setup git and Drupal in such a way that you can keep editing your site's modules, themes and libraries on your local machines and every time to do 'git push' it automatically deploys to your pubilc Drupal site - without having to login into your webhosting provider and doing checkout/reset on your working tree.</p>\n\n<p>Assumptions</p>\n\n<ol>\n\t<li>You're using Git for version control and Drupal for site hosting.</li>\n\t<li>You're hosted in a place where you have ssh access and git installed on the server.</li>\n\t<li>You already know the basics of Git and Drupal.</li>\n</ol>\n\n<p>Setup</p>\n\n<ol>\n\t<li>Your site is example.com hosted on a remote server (Linux).</li>\n\t<li>Your Drupal site directory on the remote server is ~/drupal/sites/example.com.</li>\n\t<li>You have some modules/themes/libraries etc. in ~/drupal/sites/example.com.</li>\n</ol>\n\n<p>Steps</p>\n\n<p>On remote server:</p>\n\n<blockquote>\n<p>cd &lt;drupal-root&gt;/sites/example.com<br />\ngit init</p>\n</blockquote>\n\n<p>This turns your site-dir into a git repository and a git working directory (non-bare). Now on your local machine:</p>\n\n<blockquote>\n<p>git clone ssh-username@example.com:~/drupal/sites/example.com</p>\n</blockquote>\n\n<p>Make some code changes, commit locally, and then try to push.</p>\n\n<blockquote>\n<p>... make changes ...<br />\ngit commit -am'your commit message'<br />\ngit push</p>\n</blockquote>\n\n<p>Oops! Push is rejected, with a bad error message. That's because a non-bare Git repository does not accept pushes automatically. To fix that do this on remote server (git repo:</p>\n\n<blockquote>\n<p>cd ~/drupal/sites/example.com<br />\ngit config<br />\ngit config receive.denyCurrentBranch ignore</p>\n</blockquote>\n\n<p>Now push again. On local machine:</p>\n\n<blockquote>\n<p>git push</p>\n</blockquote>\n\n<p>It should work this time. Now your remote repository has your changes, but those changes are sitting in the repository database, not in the working directory. For automatic deployment, you need every push from local machine to also cause the server to update the working directory.</p>\n\n<p>That is where Git hooks come in. One of the Git hooks is post-receive hook. It executes every time a push is accepted. On the remote server, put the following in ~/drupal/sites/example.com/.git/hooks/post-receive</p>\n\n<pre class=\"true; codetag\">\n#!/bin/sh\n\n# all hook scripts start out in repo-dir/.git, so cd to repo-dir\ncd ..\n\n# set the directory that contains git metadata\nGIT_DIR='.git'\n \n# protect files before creating them and then to reset --hard to checkout\numask 002 &amp;&amp; git reset --hard\n\n# now clear Drupal cache\nexport DRUSH_PHP=/usr/local/bin/php5\n~/drush/drush cc all </pre>\n\n<p>In the above script we are checking out the files in the working directory (Drupal site-dir) and then clearing Drupal cache using Drush. That last step is optional, in case you prefer clearing cache from browser UI.</p>\n\n<div>That's it. From here on, you can make changes to your local Git repository and every time you do git push, your changes are reflected in the live site (remote git repository).</div>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "cbe76345-284a-4a7f-89f1-aa69376593b1",
          "tid": 6,
          "name": "git",
          "alias": "/term/git"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        }
      ],
      "field_image": [
        {
          "id": "d63a70aa-745d-4826-87e9-789e97bcbfe1",
          "alt": "git logo",
          "title": "git logo",
          "url": "/sites/default/files/field/image/images_4.jpg",
          "fid": 26
        },
        {
          "id": "f2966e8a-4fc5-4cdf-b797-1d35f36e3095",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_5.jpg",
          "fid": 27
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Adding roles to users on account creation",
      "nid": 16,
      "alias": "/article/adding-roles-users-account-creation",
      "slug": "adding-roles-users-account-creation",
      "body": "<p>On one of the Drupal 6 projects we had the need to assign a specific role to all users who create their own account (by visiting 'user/register'). Let's say the role is 'abc' and the role id (rid) is 3. So every new user should have the 'abc' role automatically. After much reseach I found the winning formula :-)</p>\n\n<p><!--break--></p>\n\n<p>The obvious part is that we have to implement the <a href=\"http://api.drupal.org/api/drupal/developer%21hooks%21core.php/function/hook_user/6\" target=\"_blank\">hook_user</a> in a custom module. But what </p>\n\n<p>is not obvious is which $op to attach to, and then which of the parameters to manipulate and how. Here's the code for my implementation.</p>\n\n<pre>\nfunction mymodule_user($op, &amp;$edit, &amp;$account, $category = NULL){\n  global $user;\n  // if the user is anonymous and creating a new account.\n  if($op == 'insert' &amp;&amp; $user-&gt;uid == 0) {\n    $edit['roles'][3] = TRUE;\n  }\n}\n</pre>\n\n<p>In the above code, the name of my module is 'mymodule' and it is implementing the <a href=\"http://api.drupal.org/api/drupal/developer%21hooks%21core.php/function/hook_user/6\" target=\"_blank\">hook_user</a>. Inside the hook, we access the $user global to check that the current user is anonymous ($user-&gt;uid == 0), so that we do not interfere with an administrator creating a new user and choosing roles for them. The $op we attach to is 'insert' because that is the $op executed when a new account is created. The trickiest part of all is the fact that instead of manipulating the $account param, or even calling <a href=\"http://api.drupal.org/api/drupal/modules%21user%21user.module/function/user_multiple_role_edit/6\" target=\"_blank\">user_multiple_role_edit</a>, we manipulate $edit because that is the data that is being persisted to the database. Also, the structure of roles within $edit is peculiar, in that it needs use the role id (rid) as the index and boolean TRUE as the value, in order to assign a role to the user.</p>\n\n<p>Hope someone finds this useful.</p>\n\n<p> </p>\n",
      "changed": "2016-05-10T13:20:54+00:00",
      "created": "2012-03-03T20:31:04+00:00",
      "summary": "<p>On one of the Drupal 6 projects we had the need to assign a specific role to all users who create their own account (by visiting 'user/register'). Let's say the role is 'abc' and the role id (rid) is 3. So every new user should have the 'abc' role automatically. After much reseach I found the winning formula :-)</p>\n\n<p><!--break--></p>\n\n<p>The obvious part is that we have to implement the <a href=\"http://api.drupal.org/api/drupal/developer%21hooks%21core.php/function/hook_user/6\" target=\"_blank\">hook_user</a> in a custom module. But what </p>\n\n<p>is not obvious is which $op to attach to, and then which of the parameters to manipulate and how. Here's the code for my implementation.</p>\n\n<pre>\nfunction mymodule_user($op, &amp;$edit, &amp;$account, $category = NULL){\n  global $user;\n  // if the user is anonymous and creating a new account.\n  if($op == 'insert' &amp;&amp; $user-&gt;uid == 0) {\n    $edit['roles'][3] = TRUE;\n  }\n}\n</pre>\n\n<p>In the above code, the name of my module is 'mymodule' and it is implementing the <a href=\"http://api.drupal.org/api/drupal/developer%21hooks%21core.php/function/hook_user/6\" target=\"_blank\">hook_user</a>. Inside the hook, we access the $user global to check that the current user is anonymous ($user-&gt;uid == 0), so that we do not interfere with an administrator creating a new user and choosing roles for them. The $op we attach to is 'insert' because that is the $op executed when a new account is created. The trickiest part of all is the fact that instead of manipulating the $account param, or even calling <a href=\"http://api.drupal.org/api/drupal/modules%21user%21user.module/function/user_multiple_role_edit/6\" target=\"_blank\">user_multiple_role_edit</a>, we manipulate $edit because that is the data that is being persisted to the database. Also, the structure of roles within $edit is peculiar, in that it needs use the role id (rid) as the index and boolean TRUE as the value, in order to assign a role to the user.</p>\n\n<p>Hope someone finds this useful.</p>\n\n<p> </p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        }
      ],
      "field_image": [
        {
          "id": "8d0375a8-5b6b-463c-9278-d8a8d77a3d96",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_6.jpg",
          "fid": 28
        }
      ],
      "uid": {
        "id": "860e2c0e-639d-4f13-8762-d556757814ae",
        "uid": 6,
        "display_name": "Priya Ganesan",
        "name": "Priya Ganesan",
        "bio": "<ul>\n\t<li>Advanced knowledge of Drupal 6 &amp; 7 configuration and module development</li>\n\t<li>Well-versed in databases, reporting</li>\n\t<li>Advanced knowledge of Ubercart, CiviCRM, Views, Migrate and other Drupal subsystems</li>\n</ul>",
        "alias": "/user/priya-ganesan"
      }
    },
    {
      "title": "We are hiring!",
      "nid": 70,
      "alias": "/article/we-are-hiring",
      "slug": "we-are-hiring",
      "body": "<p>We are in need of smart and motivated developers to come and join our team. We do not ask for any specific skill-set. That's because <strong>we train you!</strong> The only requirements are ...</p>\n\n<ol>\n\t<li>You are smart. That means strong analytical abilities. You know, the kind of person who can figure out how a system works, and troubleshoot a problem.</li>\n\t<li>You are motivated to learn. You love learning for its own sake. You spend your weekends and evenings reading technical books or watching technical videos.</li>\n\t<li>You know at least one programming language, plus HTML.</li>\n</ol>\n\n<p><strong>We will train you!</strong></p>\n\n<p>That's right. Our leadership team comprises of top-notch developers who love coding and teaching. So you'll learn from the best how to write \"High Performance Web &amp; Mobile\" applications using HTML5, CSS3, JavaScript, Java, PHP and a host of other technologies such as Linux, Android, PhoneGap, nginx, git, ssh, MySQL, MongoDB, Firebase, AngularJS, bootstrap and more.</p>\n\n<p><strong>How to apply.</strong></p>\n\n<p>Just send an email with your phone number, resume/profile, and -- most importantly -- your story describing your background, your motivations and your value-system to - jobs@spinspire.com. We will call you back within a couple of days.</p>\n",
      "changed": "2016-05-10T13:20:15+00:00",
      "created": "2013-08-16T02:33:06+00:00",
      "summary": "<p>We are in need of smart and motivated developers to come and join our team. We do not ask for any specific skill-set. That's because <strong>we train you!</strong> The only requirements are ...</p>\n\n<ol>\n\t<li>You are smart. That means strong analytical abilities. You know, the kind of person who can figure out how a system works, and troubleshoot a problem.</li>\n\t<li>You are motivated to learn. You love learning for its own sake. You spend your weekends and evenings reading technical books or watching technical videos.</li>\n\t<li>You know at least one programming language, plus HTML.</li>\n</ol>\n\n<p><strong>We will train you!</strong></p>\n\n<p>That's right. Our leadership team comprises of top-notch developers who love coding and teaching. So you'll learn from the best how to write \"High Performance Web &amp; Mobile\" applications using HTML5, CSS3, JavaScript, Java, PHP and a host of other technologies such as Linux, Android, PhoneGap, nginx, git, ssh, MySQL, MongoDB, Firebase, AngularJS, bootstrap and more.</p>\n\n<p><strong>How to apply.</strong></p>\n\n<p>Just send an email with your phone number, resume/profile, and -- most importantly -- your story describing your background, your motivations and your value-system to - jobs@spinspire.com. We will call you back within a couple of days.</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "d99b4959-d997-4903-8381-6c8ed4d77619",
          "alt": "We are hiring.",
          "title": "We are hiring.",
          "url": "/sites/default/files/field/image/Were-Hiring.jpg",
          "fid": 86
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "implementing hook_flag_access for controlling what the user can flag",
      "nid": 38,
      "alias": "/article/implementing-hookflagaccess-controlling-what-user-can-flag",
      "slug": "implementing-hookflagaccess-controlling-what-user-can-flag",
      "body": "<p>Recently, a client wanted their site users to be able to show their support for certain content nodes in Drupal. This can be done very nicely with the <a href=\"http://drupal.org/project/flag\" target=\"_blank\">flag module</a>. In case you missed it, flag module is a very useful module that has many applications - such as <em>flag as offensive</em>, <em>like</em>, <em>friend</em>, etc.</p>\n\n<p>So it was very natural for us to use the flag module to let the users flag a node if they want to support it. But the client requirement was that a user should not be able to support more than one node at a time. That means we have to implement an upper limit of 1 on the number of nodes a user can <em>support</em>. This feature does not come with the flag module. But the 2.x version of this module does provide a special hook called <span>hook_flag_access</span> that can help implement this feature in your own module.</p>\n\n<pre>\n/**\n * Implementation of hook_flag_access()\n */\nfunction MYMODULE_flag_access($flag, $content_id, $action, $account) {\n  if($flag-&gt;name == 'membersupport' &amp;&amp; $action == 'flag') {\n    if($flag-&gt;get_user_count($GLOBALS['user']-&gt;uid) &gt; 0) {\n      return FALSE;\n    }\n  }\n}\n</pre>\n\n<p>In the code above, when the flag being flagged is a certain one ('membersupport') and the action is 'flag', we check the number of nodes this user has already flagged with the same flag. If that number is greater than zero, then they are not allowed to flag any more.</p>\n",
      "changed": "2016-05-10T13:19:59+00:00",
      "created": "2011-02-23T03:17:23+00:00",
      "summary": "<p>Recently, a client wanted their site users to be able to show their support for certain content nodes in Drupal. This can be done very nicely with the <a href=\"http://drupal.org/project/flag\" target=\"_blank\">flag module</a>. In case you missed it, flag module is a very useful module that has many applications - such as <em>flag as offensive</em>, <em>like</em>, <em>friend</em>, etc.</p>\n\n<p>So it was very natural for us to use the flag module to let the users flag a node if they want to support it. But the client requirement was that a user should not be able to support more than one node at a time. That means we have to implement an upper limit of 1 on the number of nodes a user can <em>support</em>. This feature does not come with the flag module. But the 2.x version of this module does provide a special hook called <span>hook_flag_access</span> that can help implement this feature in your own module.</p>\n\n<pre>\n/**\n * Implementation of hook_flag_access()\n */\nfunction MYMODULE_flag_access($flag, $content_id, $action, $account) {\n  if($flag-&gt;name == 'membersupport' &amp;&amp; $action == 'flag') {\n    if($flag-&gt;get_user_count($GLOBALS['user']-&gt;uid) &gt; 0) {\n      return FALSE;\n    }\n  }\n}\n</pre>\n\n<p>In the code above, when the flag being flagged is a certain one ('membersupport') and the action is 'flag', we check the number of nodes this user has already flagged with the same flag. If that number is greater than zero, then they are not allowed to flag any more.</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "56d8b033-a0e5-42fc-b560-0072afff630f",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_13.jpg",
          "fid": 49
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire launches CMCrossRoads for TechWell",
      "nid": 71,
      "alias": "/article/spinspire-launches-cmcrossroads-techwell",
      "slug": "spinspire-launches-cmcrossroads-techwell",
      "body": "<p><span>In January 2013, S</span><span>pinSpire launched </span><a href=\"http://www.cmcrossroads.com/\">CMCrossRoads.com</a><span>, an online community serving Configuration Management professionals.  </span><span>CMCrossRoads has a community of tens of thousands of users and thousands of content nodes.</span></p>\n\n<div>\n<p>\"CMCrossRoads.com brings together the latest CM ideas and practices from experienced software professionals and thought leaders. CMCrossRoads.com is one of <a href=\"http://techwell.com/\" target=\"_blank\">TechWell's </a>online communities serving the software industry.\"</p>\n\n<p>SpinSpire thanks TechWell for the opportunity to work on such a large Drupal-based content-management project.</p>\n</div>\n",
      "changed": "2016-05-10T13:19:36+00:00",
      "created": "2013-02-25T23:47:36+00:00",
      "summary": "<p><span>In January 2013, S</span><span>pinSpire launched </span><a href=\"http://www.cmcrossroads.com/\">CMCrossRoads.com</a><span>, an online community serving Configuration Management professionals.  </span><span>CMCrossRoads has a community of tens of thousands of users and thousands of content nodes.</span></p>\n\n<div>\n<p>\"CMCrossRoads.com brings together the latest CM ideas and practices from experienced software professionals and thought leaders. CMCrossRoads.com is one of <a href=\"http://techwell.com/\" target=\"_blank\">TechWell's </a>online communities serving the software industry.\"</p>\n\n<p>SpinSpire thanks TechWell for the opportunity to work on such a large Drupal-based content-management project.</p>\n</div>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "166413df-758a-4543-a9fe-96d0316f70e3",
          "alt": "CMCrossroads homepage",
          "title": "CMCrossroads homepage",
          "url": "/sites/default/files/field/image/cm1.png",
          "fid": 87
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SQE selects SpinSpire",
      "nid": 20,
      "alias": "/article/sqe-selects-spinspire",
      "slug": "sqe-selects-spinspire",
      "body": "<p>Software Quality Engineering (<a href=\"http://sqe.com\" target=\"_blank\">SQE</a>), an industry leader in conferences, trainings and online communities has selected <a href=\"http://spinspire.com\">SpinSpire</a> to design and develop their Drupal-based community web portals. SQE delivers training, support, research, and publications to software managers, developers, test professionals, and quality engineers worldwide. SpinSpire provides high-end Drupal development services for enterprises.</p>\n\n<p>Under this deal, SpinSpire will migrate SQE's online properties to Drupal with features including content management, conference registration, groups &amp; forums, revenue generation via advertising, targeted marketing, automated workflows triggered by system events, and extensive integration with social networks. Social login and social commenting will allow users with social network accounts to log into the SQE portals and to participate in conversations that also engage other people in their social network.</p>\n\n<p>Stay tuned for site launch announcements in coming months.</p>\n\n<p><!--break--></p>\n",
      "changed": "2016-05-10T13:19:12+00:00",
      "created": "2012-03-01T03:34:31+00:00",
      "summary": "<p>Software Quality Engineering (<a href=\"http://sqe.com\" target=\"_blank\">SQE</a>), an industry leader in conferences, trainings and online communities has selected <a href=\"http://spinspire.com\">SpinSpire</a> to design and develop their Drupal-based community web portals. SQE delivers training, support, research, and publications to software managers, developers, test professionals, and quality engineers worldwide. SpinSpire provides high-end Drupal development services for enterprises.</p>\n\n<p>Under this deal, SpinSpire will migrate SQE's online properties to Drupal with features including content management, conference registration, groups &amp; forums, revenue generation via advertising, targeted marketing, automated workflows triggered by system events, and extensive integration with social networks. Social login and social commenting will allow users with social network accounts to log into the SQE portals and to participate in conversations that also engage other people in their social network.</p>\n\n<p>Stay tuned for site launch announcements in coming months.</p>\n\n<p><!--break--></p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        }
      ],
      "field_image": [
        {
          "id": "ed9d7632-e54e-44d6-89bb-9ed0eaf38eb0",
          "alt": "SpinSpire logo",
          "title": "SpinSpire logo",
          "url": "/sites/default/files/field/image/spinspire-logo_0.png",
          "fid": 30
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire releases top-level Drupal project - Popular Tags",
      "nid": 56,
      "alias": "/article/spinspire-releases-top-level-drupal-project-popular-tags",
      "slug": "spinspire-releases-top-level-drupal-project-popular-tags",
      "body": "<p>I'm very pleased to announce that SpinSpire has released and published on drupal.org as top-level project - <strong>popular tags</strong> (<a href=\"http://drupal.org/project/popular-tags\">http://drupal.org/project/popular-tags</a>), Drupal module for better taxonomy tag selection (details below).</p>\n\n<p>I now also have the rights to create and promote new top-level projects. In Drupal community, it is considered a significant badge of honor.</p>\n\n<p>Top level projects are different from sandbox projects on <a href=\"http://drupal.org\">drupal.org</a> in that they have to go through a rigorous peer-review process to become top-level and are considered safe/high-quality enough for public use. I have several sandbox projects at <a href=\"http://drupal.org/user/1799550\">http://drupal.org/user/1799550</a>, and some of those projects will turn into top-level projects when they are mature enough.</p>\n\n<p> </p>\n\n<h3>About <a href=\"http://drupal.org/project/popular-tags\" target=\"_blank\">Popular Tags</a> module</h3>\n\n<div>\n<div><a class=\"imagecache imagecache-grid-3 imagecache-imagelink imagecache-grid-3_imagelink\" href=\"http://drupal.org/files/project-images/Create Article  tix - Google Chrome_2012-08-25_14-32-28.png\"><img alt=\"Using clickable tags - tag selection for an article\" class=\"imagecache imagecache-grid-3\" height=\"93\" src=\"http://drupal.org/files/imagecache/grid-3/project-images/Create Article  tix - Google Chrome_2012-08-25_14-32-28.png\" title=\"\" width=\"220\" /></a></div>\n\n<div><a class=\"imagecache imagecache-grid-3 imagecache-imagelink imagecache-grid-3_imagelink\" href=\"http://drupal.org/files/project-images/Greenshot_2012-08-25_14-20-53.png\"><img alt=\"Enabling popular tags on a content-type field\" class=\"imagecache imagecache-grid-3\" height=\"236\" src=\"http://drupal.org/files/imagecache/grid-3/project-images/Greenshot_2012-08-25_14-20-53.png\" title=\"\" width=\"220\" /></a></div>\n</div>\n\n<p>This module allows the users to select taxonomy terms/tags by just clicking on them rather than typing them (auto-complete) or selecting them from a select box/checkbox/radio etc. It shows them a list of tags, sorted by popularity (defined as how many nodes are tagged with it), up to a configurable maximum number. Also, when you hover over a listed tag, it shows how many times it has been used.</p>\n\n<p>This helps the user see what the most commonly used tags, rather than having to guess. It also avoids creation of numerous closely related and similar tags because the user can see such a tag if it already exists. The fact that the tag is only a click away, encourages users to coalesce around a tighter vocabulary than one would have in the absence of this module.</p>\n\n<p> </p>\n\n<p>I would like to thank Anupam Akolkar who helped with the early stages of the <strong>popular tags</strong> module. Also to thank, our client <a href=\"http://techwell.com/\" target=\"_blank\">Techwell</a>, from where the need and idea for such a module originated.</p>\n",
      "changed": "2016-05-10T13:18:57+00:00",
      "created": "2012-11-09T11:22:58+00:00",
      "summary": "<p>I'm very pleased to announce that SpinSpire has released and published on drupal.org as top-level project - <strong>popular tags</strong> (<a href=\"http://drupal.org/project/popular-tags\">http://drupal.org/project/popular-tags</a>), Drupal module for better taxonomy tag selection (details below).</p>\n\n<p>I now also have the rights to create and promote new top-level projects. In Drupal community, it is considered a significant badge of honor.</p>\n\n<p>Top level projects are different from sandbox projects on <a href=\"http://drupal.org\">drupal.org</a> in that they have to go through a rigorous peer-review process to become top-level and are considered safe/high-quality enough for public use. I have several sandbox projects at <a href=\"http://drupal.org/user/1799550\">http://drupal.org/user/1799550</a>, and some of those projects will turn into top-level projects when they are mature enough.</p>\n\n<p> </p>\n\n<h3>About <a href=\"http://drupal.org/project/popular-tags\" target=\"_blank\">Popular Tags</a> module</h3>\n\n<div>\n<div><a class=\"imagecache imagecache-grid-3 imagecache-imagelink imagecache-grid-3_imagelink\" href=\"http://drupal.org/files/project-images/Create Article  tix - Google Chrome_2012-08-25_14-32-28.png\"><img alt=\"Using clickable tags - tag selection for an article\" class=\"imagecache imagecache-grid-3\" height=\"93\" src=\"http://drupal.org/files/imagecache/grid-3/project-images/Create Article  tix - Google Chrome_2012-08-25_14-32-28.png\" title=\"\" width=\"220\" /></a></div>\n\n<div><a class=\"imagecache imagecache-grid-3 imagecache-imagelink imagecache-grid-3_imagelink\" href=\"http://drupal.org/files/project-images/Greenshot_2012-08-25_14-20-53.png\"><img alt=\"Enabling popular tags on a content-type field\" class=\"imagecache imagecache-grid-3\" height=\"236\" src=\"http://drupal.org/files/imagecache/grid-3/project-images/Greenshot_2012-08-25_14-20-53.png\" title=\"\" width=\"220\" /></a></div>\n</div>\n\n<p>This module allows the users to select taxonomy terms/tags by just clicking on them rather than typing them (auto-complete) or selecting them from a select box/checkbox/radio etc. It shows them a list of tags, sorted by popularity (defined as how many nodes are tagged with it), up to a configurable maximum number. Also, when you hover over a listed tag, it shows how many times it has been used.</p>\n\n<p>This helps the user see what the most commonly used tags, rather than having to guess. It also avoids creation of numerous closely related and similar tags because the user can see such a tag if it already exists. The fact that the tag is only a click away, encourages users to coalesce around a tighter vocabulary than one would have in the absence of this module.</p>\n\n<p> </p>\n\n<p>I would like to thank Anupam Akolkar who helped with the early stages of the <strong>popular tags</strong> module. Also to thank, our client <a href=\"http://techwell.com/\" target=\"_blank\">Techwell</a>, from where the need and idea for such a module originated.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        }
      ],
      "field_image": [
        {
          "id": "50032625-089e-402c-8f8c-a2a5b78c7308",
          "alt": "This creates an article",
          "title": "This creates an article",
          "url": "/sites/default/files/field/image/Create%20Article%20%20tix%20-%20Google%20Chrome_2012-08-25_14-32-28.png",
          "fid": 69
        },
        {
          "id": "05cfd286-ac61-4411-8e0d-01d75e053a14",
          "alt": "This lets you insert tags",
          "title": "This lets you insert tags",
          "url": "/sites/default/files/field/image/Greenshot_2012-08-25_14-20-53.png",
          "fid": 70
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire to build consumer marketing web portal for a large health insurance company",
      "nid": 22,
      "alias": "/article/spinspire-build-consumer-marketing-web-portal-large-health-insurance-company",
      "slug": "spinspire-build-consumer-marketing-web-portal-large-health-insurance-company",
      "body": "<p>SpinSpire has won a contract to design and build a health insurance shopping portal for a major healthcare provider in Florida. SpinSpire was chosen by a global, multi-billion dollar software and consulting company, and <a href=\"http://drupal.org\" target=\"_blank\">Drupal</a>+<a href=\"http://ubercart.org\" target=\"_blank\">Ubercart</a> were chosen over a number of other major content management and web store products. As of this writing, the project is in requirements and design phase, with SpinSpire leading the way.</p>\n",
      "changed": "2016-05-10T13:18:21+00:00",
      "created": "2010-12-27T19:58:00+00:00",
      "summary": "<p>SpinSpire has won a contract to design and build a health insurance shopping portal for a major healthcare provider in Florida. SpinSpire was chosen by a global, multi-billion dollar software and consulting company, and <a href=\"http://drupal.org\" target=\"_blank\">Drupal</a>+<a href=\"http://ubercart.org\" target=\"_blank\">Ubercart</a> were chosen over a number of other major content management and web store products. As of this writing, the project is in requirements and design phase, with SpinSpire leading the way.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        },
        {
          "id": "cb50cfa1-90bf-41d9-8bf7-f1d0d6743a1a",
          "tid": 8,
          "name": "healthcare",
          "alias": "/term/healthcare"
        },
        {
          "id": "3972332a-3218-4ebf-9034-2a1e2e6242f3",
          "tid": 9,
          "name": "insurance",
          "alias": "/term/insurance"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "237db5a6-99c0-44ae-8820-0799ea41d099",
          "tid": 10,
          "name": "ubercart",
          "alias": "/term/ubercart"
        }
      ],
      "field_image": [
        {
          "id": "074a3b6f-0c9a-4f80-b83e-f68190708415",
          "alt": "SpinSpire logo",
          "title": "SpinSpire logo",
          "url": "/sites/default/files/field/image/j_2.JPG",
          "fid": 32
        }
      ],
      "uid": {
        "id": "be429efe-e9f7-418a-9795-c17cc887a91f",
        "display_name": "Pramod Jain"
      }
    },
    {
      "title": "URL rewriting within Drupal",
      "nid": 24,
      "alias": "/article/url-rewriting-within-drupal",
      "slug": "url-rewriting-within-drupal",
      "body": "<p>You probably already know how to do URL rewriting using Apache. Here's how you can rewrite paths within Drupal. Added a function named \"custom_url_rewrite_inbound\" to your settings.php file.</p>\n\n<p><!--break--></p>\n\n<pre>\nfunction custom_url_rewrite_inbound(&amp;$result, $path, $path_language) {\n  // convert u/xyz to user/xyz/edit\n  // $result = preg_replace('/^u\\/(.*)/', 'user/${1}/edit', $path);\n  // convert u/xyz to user/xyz/view\n  $result = preg_replace('/^u\\/(.*)/', 'user/${1}/view', $path);\n}</pre>\n\n<p>It has to be in settings.php file so that this function is defined even before Drupal core executes. So now if you hit URL http://localhost/u/555, it will take you to http://localhost/user/555/view</p>\n\n<p>D7 UPDATE: In D7, you don't have to touch settings.php. You can simply implement the <a href=\"http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_url_inbound_alter/7\" target=\"_blank\">hook_url_inbound_alter</a>.</p>\n\n<p> </p>\n",
      "changed": "2016-05-10T13:16:59+00:00",
      "created": "2011-10-08T02:33:48+00:00",
      "summary": "<p>You probably already know how to do URL rewriting using Apache. Here's how you can rewrite paths within Drupal. Added a function named \"custom_url_rewrite_inbound\" to your settings.php file.</p>\n\n<p><!--break--></p>\n\n<pre>\nfunction custom_url_rewrite_inbound(&amp;$result, $path, $path_language) {\n  // convert u/xyz to user/xyz/edit\n  // $result = preg_replace('/^u\\/(.*)/', 'user/${1}/edit', $path);\n  // convert u/xyz to user/xyz/view\n  $result = preg_replace('/^u\\/(.*)/', 'user/${1}/view', $path);\n}</pre>\n\n<p>It has to be in settings.php file so that this function is defined even before Drupal core executes. So now if you hit URL http://localhost/u/555, it will take you to http://localhost/user/555/view</p>\n\n<p>D7 UPDATE: In D7, you don't have to touch settings.php. You can simply implement the <a href=\"http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_url_inbound_alter/7\" target=\"_blank\">hook_url_inbound_alter</a>.</p>\n\n<p> </p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "bb44cc6c-3be1-4fb5-b549-acdfa9627721",
          "alt": "Apache logo",
          "title": "Apache logo",
          "url": "/sites/default/files/field/image/images_7.jpg",
          "fid": 33
        },
        {
          "id": "23abe45d-48ec-4c5d-8e5d-aae5a1b7f9b9",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/drupal_icon_02_by_steven07-d31pz7q.png",
          "fid": 34
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire launches AgileConnection for SQE",
      "nid": 59,
      "alias": "/article/spinspire-launches-agileconnection-sqe",
      "slug": "spinspire-launches-agileconnection-sqe",
      "body": "<p><span>On December 17, 2012, S</span>pinSpire successfully launched <a href=\"http://www.agileconnection.com/\">AgileConnection</a>, an online community serving software professionals on the topic of agile development.  <span>AgileConnection has a community of tens of thousands of users and thousands of content nodes.</span></p>\n\n<p>\"<em>AgileConnection.com brings together the latest agile ideas and practices from experienced software professionals and thought leaders. AgileConnection.com offers how-to advice on the latest agile development principles, practices, and technologies through Q&amp;A discussions, articles, interviews, presentations, and more.  AgileConnection.com is one of <a href=\"http://www.sqe.com/\">SQE's</a> online communities serving the software industry</em>.\"</p>\n\n<p>SpinSpire thanks SQE for the opportunity to work on such a large Drupal-based content-management project.</p>\n",
      "changed": "2016-05-10T13:16:40+00:00",
      "created": "2013-01-19T15:46:32+00:00",
      "summary": "<p><span>On December 17, 2012, S</span>pinSpire successfully launched <a href=\"http://www.agileconnection.com/\">AgileConnection</a>, an online community serving software professionals on the topic of agile development.  <span>AgileConnection has a community of tens of thousands of users and thousands of content nodes.</span></p>\n\n<p>\"<em>AgileConnection.com brings together the latest agile ideas and practices from experienced software professionals and thought leaders. AgileConnection.com offers how-to advice on the latest agile development principles, practices, and technologies through Q&amp;A discussions, articles, interviews, presentations, and more.  AgileConnection.com is one of <a href=\"http://www.sqe.com/\">SQE's</a> online communities serving the software industry</em>.\"</p>\n\n<p>SpinSpire thanks SQE for the opportunity to work on such a large Drupal-based content-management project.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        }
      ],
      "field_image": [
        {
          "id": "0fccd550-40b8-4b61-81a7-977d987921f4",
          "alt": "Better Software Magazine section",
          "title": "Better Software Magazine section",
          "url": "/sites/default/files/field/image/AgileConnection%20%20screenshot3.png",
          "fid": 74
        }
      ],
      "uid": {
        "id": "be429efe-e9f7-418a-9795-c17cc887a91f",
        "display_name": "Pramod Jain"
      }
    },
    {
      "title": "Creating a responsive webpage",
      "nid": 75,
      "alias": "/article/creating-responsive-webpage",
      "slug": "creating-responsive-webpage",
      "body": "<p>Having a responsive website is almost mandatory in modern web development. The way people view websites has changed. People use their phones and tablets almost more than their desktops and laptops. This means people will be viewing your site on mobile devices. Luckily, there are a couple ways to handle this. Javascript and jQuery are likely the most interesting and advanced way of handling this obstacle. However, if you want to keep things nice and simple with full functionality, simply use CSS3 media queries. Here is an example.</p>\n\n<p> </p>\n\n<pre class=\"true; codetag\">\n@media all and (max-width 560px){\n\ndiv#nav{\n\nheight: 300px;\n\n}\n\nh2{\n\nfont-size: 80%;\n\n}\n\n}\n</pre>\n\n<p> </p>\n\n<p>This code will only execute on a screen of width 560px or less. With this you can easily fix the errors that occur on the mobile view without effecting your website on devices with a width larger than 560px. You can drag your browser's width to match your query and you'll see the code execute. You'll have to do various tests to find out at what page widths cause elements on your page to work incorrectly. Then, write a query to correct it and test to see if your correction was sucessful. You can use the chrome extension Mobile/RWD Tester to emulate different phone browsers from your computer. Using these tools, anyone who knows CSS3 can make a responsive website!</p>\n",
      "changed": "2016-05-10T13:16:12+00:00",
      "created": "2014-07-17T14:51:05+00:00",
      "summary": "<p>Having a responsive website is almost mandatory in modern web development. The way people view websites has changed. People use their phones and tablets almost more than their desktops and laptops. This means people will be viewing your site on mobile devices. Luckily, there are a couple ways to handle this. Javascript and jQuery are likely the most interesting and advanced way of handling this obstacle. However, if you want to keep things nice and simple with full functionality, simply use CSS3 media queries. Here is an example.</p>\n\n<p> </p>\n\n<pre class=\"true; codetag\">\n@media all and (max-width 560px){\n\ndiv#nav{\n\nheight: 300px;\n\n}\n\nh2{\n\nfont-size: 80%;\n\n}\n\n}\n</pre>\n\n<p> </p>\n\n<p>This code will only execute on a screen of width 560px or less. With this you can easily fix the errors that occur on the mobile view without effecting your website on devices with a width larger than 560px. You can drag your browser's width to match your query and you'll see the code execute. You'll have to do various tests to find out at what page widths cause elements on your page to work incorrectly. Then, write a query to correct it and test to see if your correction was sucessful. You can use the chrome extension Mobile/RWD Tester to emulate different phone browsers from your computer. Using these tools, anyone who knows CSS3 can make a responsive website!</p>\n",
      "field_tags": [
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "eb8e5794-67c3-4754-ba5c-f66160137019",
          "tid": 58,
          "name": "responsive",
          "alias": "/term/responsive"
        },
        {
          "id": "95799be7-3d0f-4ee3-9871-b260ecdbbe37",
          "tid": 59,
          "name": "web design",
          "alias": "/term/web-design"
        },
        {
          "id": "ad86af78-5416-4afe-b741-9a7841bc52f9",
          "tid": 60,
          "name": "css3",
          "alias": "/term/css3"
        },
        {
          "id": "4821e85c-b80e-4955-a9b7-72df83923fae",
          "tid": 61,
          "name": "media queries",
          "alias": "/term/media-queries"
        }
      ],
      "field_image": [
        {
          "id": "f82b6800-b4f2-4895-a227-d9876de43e93",
          "alt": "CSS3 logo",
          "title": "CSS3 logo",
          "url": "/sites/default/files/field/image/95302236.png",
          "fid": 93
        }
      ],
      "uid": {
        "id": "eb8472b3-54ac-4875-a631-5b313a3653db",
        "display_name": "Jordan McLemore"
      }
    },
    {
      "title": "mimemail attachments - order matters",
      "nid": 25,
      "alias": "/article/mimemail-attachments-order-matters",
      "slug": "mimemail-attachments-order-matters",
      "body": "<p>I wrote a module that generates PDF and attaches it to an email using hook_mail_alter(). It took me a while to figure out that I cannot add the attachment simply as a string in memory. I had to write it to a temp file first. And then my hook_mail_alter() implementation ...</p>\n\n<pre>\n/**\n * Hook to allow attaching PDF file.\n */\nfunction mymodule_mail_alter(&amp;$message) {\n   // generate the PDF file in $filepath\n    $file = array(\n      'filename' =&gt; 'tix.pdf',\n      'filemime' =&gt; 'application/pdf',\n      'filepath' =&gt; $filepath,\n    );\n\n    // add the attachment by appending to the $message['params']['attachments'] array\n    $message['params']['attachments'][] = $file;\n  }\n}</pre>\n\n<p>On my own machine the above was working perfectly and attachment was going out with the email. But on my hosting provider, it didn't work for some reason. I struggled with it for a day. And finally, I just decided to disable to the 'mimemail' module (this module is required for attachments to work). Obviously, attachments didn't work because they can't work without this module. But just as soon as I re-enabled it - attachments started working!</p>\n\n<p>I suspect it had something to do with the order in which modules are enabled and therefore the order in which certain hooks are invoked. I still don't know the exact reasoning behind it. But the moral of the story is - <strong>THE ORDER IN WHICH MODULES ARE ENABLED MATTERS</strong>.</p>\n",
      "changed": "2016-05-10T13:15:43+00:00",
      "created": "2011-11-05T19:25:10+00:00",
      "summary": "<p>I wrote a module that generates PDF and attaches it to an email using hook_mail_alter(). It took me a while to figure out that I cannot add the attachment simply as a string in memory. I had to write it to a temp file first. And then my hook_mail_alter() implementation ...</p>\n\n<pre>\n/**\n * Hook to allow attaching PDF file.\n */\nfunction mymodule_mail_alter(&amp;$message) {\n   // generate the PDF file in $filepath\n    $file = array(\n      'filename' =&gt; 'tix.pdf',\n      'filemime' =&gt; 'application/pdf',\n      'filepath' =&gt; $filepath,\n    );\n\n    // add the attachment by appending to the $message['params']['attachments'] array\n    $message['params']['attachments'][] = $file;\n  }\n}</pre>\n\n<p>On my own machine the above was working perfectly and attachment was going out with the email. But on my hosting provider, it didn't work for some reason. I struggled with it for a day. And finally, I just decided to disable to the 'mimemail' module (this module is required for attachments to work). Obviously, attachments didn't work because they can't work without this module. But just as soon as I re-enabled it - attachments started working!</p>\n\n<p>I suspect it had something to do with the order in which modules are enabled and therefore the order in which certain hooks are invoked. I still don't know the exact reasoning behind it. But the moral of the story is - <strong>THE ORDER IN WHICH MODULES ARE ENABLED MATTERS</strong>.</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "abee118b-c951-41d7-9db7-64cbe93ecf9e",
          "alt": "Email icon",
          "title": "Email icon",
          "url": "/sites/default/files/field/image/images_8.jpg",
          "fid": 35
        },
        {
          "id": "5b0facf0-5f05-43e5-ad0d-6e55fba7b566",
          "alt": "Drupal logo",
          "title": "Drupal logo",
          "url": "/sites/default/files/field/image/images_9.jpg",
          "fid": 36
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Replacing your Android phone OS",
      "nid": 43,
      "alias": "/article/replacing-your-android-phone-os",
      "slug": "replacing-your-android-phone-os",
      "body": "<p>If you have one of the Android-based smart phones then you might not be getting most out it. That's because the distribution of Android that it comes pre-installed with is unnecessarily is bloated and crippled at the same time. You have the choice of installing a lighter and more capable distribution of Android on it. There is a thriving community of developers who are working to give you several such distributions at <a href=\"http://www.xda-developers.com/\">http://www.xda-developers.com/</a>.</p>\n\n<p>Rather than fully describing how to do it in step-by-step instructions (you can search for your device's specific method on <a href=\"http://www.xda-developers.com/\">http://www.xda-developers.com/</a> forums), let me explain the concepts and terms.</p>\n\n<ol>\n\t<li>Custom ROMs - Your phone has an OS on it. It is stored on flash ROM (writable solid state memory, kind of a like a hard-disk partition). A custom ROM is an alternative distribution of the OS (Android or other) as an installable image file.</li>\n\t<li>Boot loader - A program installed on your phone that the phone's computer executes as the very first program - even before it loads the OS. This program, called boot loader, loads and runs the actual OS. The bootloader is also the first layer of security on your device.</li>\n\t<li>Unlocked boot loader - The boot loader that comes pre-installed on most phones is \"locked\" - meaning it doesn't let you install and boot other OS's. In order to replace your phone's OS, you will need to unlock and replace the boot loader.</li>\n\t<li>Recovery - Smart phones have a special partition called \"recovery\" which let you restore the phone's data, or OS to a previous (or another) state. You will have to replace your recovery program as well so that you can install a new OS on your phone. Popular recoveries are Clockwork Mod (CWM) or TWRP.</li>\n</ol>\n\n<p>More to come ...</p>\n\n<p>Please leave a comment if this was helpful, or if some info is incorrect.</p>\n",
      "changed": "2016-05-10T13:15:18+00:00",
      "created": "2012-06-16T23:55:06+00:00",
      "summary": "<p>If you have one of the Android-based smart phones then you might not be getting most out it. That's because the distribution of Android that it comes pre-installed with is unnecessarily is bloated and crippled at the same time. You have the choice of installing a lighter and more capable distribution of Android on it. There is a thriving community of developers who are working to give you several such distributions at <a href=\"http://www.xda-developers.com/\">http://www.xda-developers.com/</a>.</p>\n\n<p>Rather than fully describing how to do it in step-by-step instructions (you can search for your device's specific method on <a href=\"http://www.xda-developers.com/\">http://www.xda-developers.com/</a> forums), let me explain the concepts and terms.</p>\n\n<ol>\n\t<li>Custom ROMs - Your phone has an OS on it. It is stored on flash ROM (writable solid state memory, kind of a like a hard-disk partition). A custom ROM is an alternative distribution of the OS (Android or other) as an installable image file.</li>\n\t<li>Boot loader - A program installed on your phone that the phone's computer executes as the very first program - even before it loads the OS. This program, called boot loader, loads and runs the actual OS. The bootloader is also the first layer of security on your device.</li>\n\t<li>Unlocked boot loader - The boot loader that comes pre-installed on most phones is \"locked\" - meaning it doesn't let you install and boot other OS's. In order to replace your phone's OS, you will need to unlock and replace the boot loader.</li>\n\t<li>Recovery - Smart phones have a special partition called \"recovery\" which let you restore the phone's data, or OS to a previous (or another) state. You will have to replace your recovery program as well so that you can install a new OS on your phone. Popular recoveries are Clockwork Mod (CWM) or TWRP.</li>\n</ol>\n\n<p>More to come ...</p>\n\n<p>Please leave a comment if this was helpful, or if some info is incorrect.</p>\n",
      "field_tags": [],
      "field_image": [
        {
          "id": "f33d79d3-5c53-4477-95ed-3857936c9e78",
          "alt": "android logo",
          "title": "android logo",
          "url": "/sites/default/files/field/image/Awesome-Android-Wallpaper5.jpg",
          "fid": 54
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Drupal Zen theme and SASS",
      "nid": 60,
      "alias": "/article/drupal-zen-theme-and-sass",
      "slug": "drupal-zen-theme-and-sass",
      "body": "<p><a href=\"http://drupal.org/project/zen\">Zen</a> is one of the best themes (in terms of solid, clean foundation) out there. And 7.x-5.x release is even better than previous ones. It comes with a <a href=\"http://drupal.org/project/drush\">drush</a> command to create Zen subthemes in seconds. It also has very clearly laid out and documented CSS stylesheets in the <em>css</em> folder that allow easy modification of styles. But did you know that Zen comes ready with <a href=\"http://sass-lang.com/\">SASS</a> stylesheets and a config.rb for usage with <a href=\"http://compass-style.org/\">COMPASS</a>?</p>\n\n<p><strong>What are <a href=\"http://sass-lang.com/\">SASS</a> and <a href=\"http://compass-style.org/\">COMPASS</a>?</strong></p>\n\n<p>SASS is a stylesheet language that is a superset of CSS, to which it adds - variables, nesting, mixings, selector inheritance, and more. Basically, your stylesheets will be far more maintainable if written in SASS than in plain CSS. If you have done extensive theming and styling for Drupal or any other web technology, then you can imagine the benefits quite readily. Learn more at http://sass-lang.com/</p>\n\n<p>Compass is a library of SASS mixins that make it very easy to use CSS3 features such as rounded corners, box shadows, gradients etc.</p>\n\n<p><strong>How to use Zen with SASS &amp; COMPASS?</strong></p>\n\n<p>Create a new Zen subtheme - either by copying STARTERKIT directory to a new subtheme directory and renaming files and functions appropriately, or simply by running \"drush zen 'My Theme' mytheme\". <a href=\"http://thesassway.com/beginner/getting-started-with-sass-and-compass\">Install SASS and COMPASS</a>. Now, take a look at all the *.scss files in <em>sass</em> directory of your subtheme. Then take a look at the corresponding *.css files in the <em>css</em> directory of your subtheme. Each *.scss file gets compiled into a corresponding *.css file. All these files are very well documented, and if you have done any styling before, it will be quite obvious what the styling rules are for. Make some changes to *.scss files, and then run \"compass compile\" in your subtheme's base directory. This will recompile modified *.scss files and regenerate the corresponding *.css files. Now reload your site in the browser and you should see the effects of your changes. You can keep making edits, recompiling with \"compass compile\" and refreshing the browser. But a much faster way is to run \"compass watch\" instead. Once you run \"compass watch\" in your subtheme's base directory, it watches the sass/*.scss files for modification, and as soon as any of them get modified, it recompiles that file to regenerate the corresponding css/*.css file.</p>\n\n<p>This whole process will make your Zen-based theme development much faster, cleaner, and maintainable.</p>\n",
      "changed": "2016-05-10T13:14:45+00:00",
      "created": "2013-02-16T02:26:43+00:00",
      "summary": "<p><a href=\"http://drupal.org/project/zen\">Zen</a> is one of the best themes (in terms of solid, clean foundation) out there. And 7.x-5.x release is even better than previous ones. It comes with a <a href=\"http://drupal.org/project/drush\">drush</a> command to create Zen subthemes in seconds. It also has very clearly laid out and documented CSS stylesheets in the <em>css</em> folder that allow easy modification of styles. But did you know that Zen comes ready with <a href=\"http://sass-lang.com/\">SASS</a> stylesheets and a config.rb for usage with <a href=\"http://compass-style.org/\">COMPASS</a>?</p>\n\n<p><strong>What are <a href=\"http://sass-lang.com/\">SASS</a> and <a href=\"http://compass-style.org/\">COMPASS</a>?</strong></p>\n\n<p>SASS is a stylesheet language that is a superset of CSS, to which it adds - variables, nesting, mixings, selector inheritance, and more. Basically, your stylesheets will be far more maintainable if written in SASS than in plain CSS. If you have done extensive theming and styling for Drupal or any other web technology, then you can imagine the benefits quite readily. Learn more at http://sass-lang.com/</p>\n\n<p>Compass is a library of SASS mixins that make it very easy to use CSS3 features such as rounded corners, box shadows, gradients etc.</p>\n\n<p><strong>How to use Zen with SASS &amp; COMPASS?</strong></p>\n\n<p>Create a new Zen subtheme - either by copying STARTERKIT directory to a new subtheme directory and renaming files and functions appropriately, or simply by running \"drush zen 'My Theme' mytheme\". <a href=\"http://thesassway.com/beginner/getting-started-with-sass-and-compass\">Install SASS and COMPASS</a>. Now, take a look at all the *.scss files in <em>sass</em> directory of your subtheme. Then take a look at the corresponding *.css files in the <em>css</em> directory of your subtheme. Each *.scss file gets compiled into a corresponding *.css file. All these files are very well documented, and if you have done any styling before, it will be quite obvious what the styling rules are for. Make some changes to *.scss files, and then run \"compass compile\" in your subtheme's base directory. This will recompile modified *.scss files and regenerate the corresponding *.css files. Now reload your site in the browser and you should see the effects of your changes. You can keep making edits, recompiling with \"compass compile\" and refreshing the browser. But a much faster way is to run \"compass watch\" instead. Once you run \"compass watch\" in your subtheme's base directory, it watches the sass/*.scss files for modification, and as soon as any of them get modified, it recompiles that file to regenerate the corresponding css/*.css file.</p>\n\n<p>This whole process will make your Zen-based theme development much faster, cleaner, and maintainable.</p>\n",
      "field_tags": [
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "2369f97f-7d79-4e60-b86d-879081b06898",
          "tid": 37,
          "name": "theming",
          "alias": "/term/theming"
        },
        {
          "id": "cd5c3a9a-9773-4329-b1c5-26cbde0b69c1",
          "tid": 38,
          "name": "css",
          "alias": "/term/css"
        },
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "2d24f5d5-0c7b-4786-8dc3-4bfb48c972e7",
          "alt": "zen theme",
          "title": "zen theme",
          "url": "/sites/default/files/field/image/3823926530_3bc27ee92f.jpg",
          "fid": 75
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "Building a killer PHP/Drupal dev environment",
      "nid": 58,
      "alias": "/article/building-killer-phpdrupal-dev-environment",
      "slug": "building-killer-phpdrupal-dev-environment",
      "body": "<p>I had the pleasure of giving a presentation at the last Jacksonville Drupal Meetup - Building a killer PHP/Drupal dev environment.</p>\n\n<p>Building a local environment for beginners and more advanced high performance environments:</p>\n\n<p>Here's what I covered:</p>\n\n<ul>\n\t<li>Web server: <a href=\"http://nginx.org/\">Nginx</a> instead of Apache</li>\n\t<li>Database server: <a href=\"https://mariadb.org/\">MariaDB</a> instead of MySQL</li>\n\t<li>Installing <a href=\"http://wpn-xm.org/\">WPN-XM</a> package that includes most of the above.</li>\n\t<li>IDE - either <a href=\"http://www.eclipse.org/\">Eclipse</a> or <a href=\"http://netbeans.org/\">NetBeans</a></li>\n\t<li>Database client - <a href=\"http://www.heidisql.com/\">HeidiSQL</a> instead of MySQL-Admin</li>\n\t<li>Command shell - <a href=\"http://code.google.com/p/msysgit/\">Git Bash</a> instead of Putty, because you need to SSH, but you also need to work locally.</li>\n\t<li>Settings up <a href=\"http://xdebug.org/\">XDebug</a> for interactive debugging</li>\n\t<li>Using <a href=\"/article/accessing-remote-mysql-server-locally-using-ssh-port-forwarding\">SSH tunnel</a> for remote database session as well as PHP debugging session</li>\n\t<li>Setting up VMs with <a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a> and <a href=\"http://www.turnkeylinux.org/drupal7\">TurnkeyLinux</a></li>\n\t<li>... and more ...</li>\n</ul>\n\n<p>We followed two very different approaches - one native stack (WPN-XM in case of Windows) and the other based on a VM running Linux, nginx etc. We spent half of our time on each of the two approaches.</p>\n\n<p>We had a laptop running both the approaches side-by-side. Follow the links above to download and configure the software used.</p>\n",
      "changed": "2016-05-09T19:40:39+00:00",
      "created": "2013-01-19T03:53:24+00:00",
      "summary": "<p>I had the pleasure of giving a presentation at the last Jacksonville Drupal Meetup - Building a killer PHP/Drupal dev environment.</p>\n\n<p>Building a local environment for beginners and more advanced high performance environments:</p>\n\n<p>Here's what I covered:</p>\n\n<ul>\n\t<li>Web server: <a href=\"http://nginx.org/\">Nginx</a> instead of Apache</li>\n\t<li>Database server: <a href=\"https://mariadb.org/\">MariaDB</a> instead of MySQL</li>\n\t<li>Installing <a href=\"http://wpn-xm.org/\">WPN-XM</a> package that includes most of the above.</li>\n\t<li>IDE - either <a href=\"http://www.eclipse.org/\">Eclipse</a> or <a href=\"http://netbeans.org/\">NetBeans</a></li>\n\t<li>Database client - <a href=\"http://www.heidisql.com/\">HeidiSQL</a> instead of MySQL-Admin</li>\n\t<li>Command shell - <a href=\"http://code.google.com/p/msysgit/\">Git Bash</a> instead of Putty, because you need to SSH, but you also need to work locally.</li>\n\t<li>Settings up <a href=\"http://xdebug.org/\">XDebug</a> for interactive debugging</li>\n\t<li>Using <a href=\"/article/accessing-remote-mysql-server-locally-using-ssh-port-forwarding\">SSH tunnel</a> for remote database session as well as PHP debugging session</li>\n\t<li>Setting up VMs with <a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a> and <a href=\"http://www.turnkeylinux.org/drupal7\">TurnkeyLinux</a></li>\n\t<li>... and more ...</li>\n</ul>\n\n<p>We followed two very different approaches - one native stack (WPN-XM in case of Windows) and the other based on a VM running Linux, nginx etc. We spent half of our time on each of the two approaches.</p>\n\n<p>We had a laptop running both the approaches side-by-side. Follow the links above to download and configure the software used.</p>\n",
      "field_tags": [
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        },
        {
          "id": "e003f77f-7f1b-42f9-bdaa-3213082f63f3",
          "tid": 7,
          "name": "linux",
          "alias": "/term/linux"
        },
        {
          "id": "3d128cc3-f516-4c08-ae8d-4a90c6febff1",
          "tid": 39,
          "name": "lamp",
          "alias": "/term/lamp"
        },
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        }
      ],
      "field_image": [
        {
          "id": "67324bb7-95bd-4dda-ab87-4f31b0e62bb6",
          "alt": "PHP-MySQL logo",
          "title": "PHP-MySQL logo",
          "url": "/sites/default/files/field/image/php_mysql_logo.png",
          "fid": 72
        },
        {
          "id": "f149f890-bdd2-455d-8bcb-021670e06ffd",
          "alt": "Linux-Apache-MySQL-PHP logo",
          "title": "Linux-Apache-MySQL-PHP logo",
          "url": "/sites/default/files/field/image/lamp.png",
          "fid": 73
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    },
    {
      "title": "SpinSpire releases OpenID Helper module",
      "nid": 21,
      "alias": "/article/spinspire-releases-openid-helper-module",
      "slug": "spinspire-releases-openid-helper-module",
      "body": "<p>We are pleased to announce the beta release of our OpenID Helper Drupal module (see <a href=\"http://drupal.org/sandbox/jitesh_doshi/1460772\" target=\"_blank\">http://drupal.org/sandbox/jitesh_doshi/1460772</a>). OpenID module, included in Drupal core, is very useful, but not very user-friendly. It expects users to know what their OpenID provider URL is. The <a href=\"http://drupal.org/sandbox/jitesh_doshi/1460772\" target=\"_blank\">OpenID Helper module</a> makes it a little more user-friendly by giving the user a dropdown list well-known OpenID providers to choose from. </p>\n\n<p><!--break--></p>\n\n<p>Furthermore, it provides a friendly console for administrators to add more OpenID providers as choices in the dropdown list.</p>\n\n<p>This is free software under GNU GPL, and you are welcome to download the code and use it as per the instructions on this page - <a href=\"http://drupal.org/sandbox/jitesh_doshi/1460772\" target=\"_blank\">http://drupal.org/sandbox/jitesh_doshi/1460772</a>. And <a href=\"http://spinspire.com/contact\">drop us a line</a> if you have any questions.</p>\n",
      "changed": "2016-05-09T19:38:53+00:00",
      "created": "2012-03-01T03:48:52+00:00",
      "summary": "<p>We are pleased to announce the beta release of our OpenID Helper Drupal module (see <a href=\"http://drupal.org/sandbox/jitesh_doshi/1460772\" target=\"_blank\">http://drupal.org/sandbox/jitesh_doshi/1460772</a>). OpenID module, included in Drupal core, is very useful, but not very user-friendly. It expects users to know what their OpenID provider URL is. The <a href=\"http://drupal.org/sandbox/jitesh_doshi/1460772\" target=\"_blank\">OpenID Helper module</a> makes it a little more user-friendly by giving the user a dropdown list well-known OpenID providers to choose from. </p>\n\n<p><!--break--></p>\n\n<p>Furthermore, it provides a friendly console for administrators to add more OpenID providers as choices in the dropdown list.</p>\n\n<p>This is free software under GNU GPL, and you are welcome to download the code and use it as per the instructions on this page - <a href=\"http://drupal.org/sandbox/jitesh_doshi/1460772\" target=\"_blank\">http://drupal.org/sandbox/jitesh_doshi/1460772</a>. And <a href=\"http://spinspire.com/contact\">drop us a line</a> if you have any questions.</p>\n",
      "field_tags": [
        {
          "id": "c5be9cf4-2beb-439a-8f92-586544d0e065",
          "tid": 4,
          "name": "news",
          "alias": "/term/news"
        },
        {
          "id": "314d056c-b068-4bd9-916c-644b058e3c5f",
          "tid": 1,
          "name": "Knowledge Base",
          "alias": "/term/knowledge-base"
        },
        {
          "id": "1777b496-1b85-4088-b317-85a4d86fe540",
          "tid": 2,
          "name": "drupal",
          "alias": "/term/drupal"
        }
      ],
      "field_image": [
        {
          "id": "291596fa-e64a-4328-971e-6a9a39123a5e",
          "alt": "Drupal Admin UI",
          "title": "Drupal Admin UI",
          "url": "/sites/default/files/field/image/drupal-admin-ui.png",
          "fid": 31
        }
      ],
      "uid": {
        "id": "24ba574b-a9a6-43b0-b622-a840798e5f7b",
        "uid": 2,
        "display_name": "Jitesh Doshi",
        "name": "Jitesh Doshi",
        "bio": "<ul>\n\t<li>A seasoned technology entrepreneur and enthusiast</li>\n\t<li>A regular speaker at industry conferences and universities</li>\n\t<li>Host and organizer of technology user groups</li>\n\t<li>Active in management of non-profit organizations serving the local community</li>\n\t<li>Leader and contributor for multiple open-source projects</li>\n\t<li>Expert in cloud, application integration, web and mobile technologies</li>\n\t<li>Author of open-source projects, including on Drupal.org - <a href=\"https://drupal.org/project/popular-tags\">Popular Tags</a> and <a href=\"https://drupal.org/project/prlp\">PRLP</a>.</li>\n\t<li>Developed several highly successful software platforms and frameworks for clients</li>\n</ul>\n",
        "alias": "/user/jitesh-doshi"
      }
    }
  ]
}